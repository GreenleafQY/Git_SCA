# -*- coding:utf-8 -*-

import jieba
from pyhanlp import *
import jieba.posseg as pseg
import csv
import copy
#from pyhanlp import *
import pypinyin
from collections import Counter
import operator
import pandas as pd
import sen_encode

sen = [] #单个句子分词后的列表
sen_flag = [] #单个句子分词后标注词性的列表
cutwords_flag = [] #单词对应的结巴词性标注列表
conj_dict = []
speaker = []

baijia_list = [] #百家姓，做成表格导入
punct_list = ["。", "？", "；", "！", "......", "...","。。。","。。。。。。", "——"] #分词处理冒号后内容时使用
dot_dict = ["。", "，", "；", "？", "！", "《", "》", "<", ">", "、", "——", "：", "‘", "’", "“", "”", "......", "（", "）", "【", "】", "{", "}", "。。。","。。。。。。"] #所有标点列表
include_dict = ["《", "》", "<", ">", "‘", "’", "“", "”", "（", "）", "【", "】", "{", "}", "(", ")"] #引用内容标点

YP_uncut_words = [] #黄页内容分词前(命名实体识别）
YP_word_list = [] #黄页内容分词后
YP_words = [] #本句话的黄页词

num_list = [] #数词列表
chinese_name = []
chinese_name_post_insert = []
chinese_name_post_translate = []
chinese_name_post_capitalize = []
foreign_name = []

chapter = []
chapter_cut = [] #按逗号断句、分词后的全章节列表
chapter_foreign = []
chapter_number = []
chapter_organization = []
chapter_place = []
chapter_marked = []
chapter_after_analyze = [] #按逗号断句、分析句子成分后的全章节列表
sentence_collection = [] #按句号合并断句、分词后的章全节列表
sentence_collection_after_analyze = [] #按句号合并断句、优化句子成分分析后的章全节列表
database_marks = []
database_sen = []
sen_mark = []
mark_dict = []
main_structure_dict_adj = [] #处理定语结构
main_structure_dict_adv = [] #处理状语结构
main_structure_dict = [] #处理主谓宾结构
main_structure_dict_b = [] #处理主谓宾结构时过度用
mark_dict_backup = [] #处理完全部结构后，备份一个mark_dict
main_structure_dict_backup = [] #处理完定状语后的裸干备份，用于Plan_b

node_list = [] # 制作nodes节点列表
bridge_list = [] # 制作bridges关系桥列表
nodes_load = [] #加载已保存nodes列表
bridges_load = [] #加载已保存bridges列表
MC = [] #首要node
MR = [] #首要bridge

punctuation_dict = [] #处理书名号
dun_dict = [] #处理顿号
dash_dict = [] #处理破折号
colon_dict = [] #处理冒号
quote_dict = [] #处理引号
double_quote_dict = [] #处理双引号
ellipsis_dict = [] #处理省略号
bracket_dict = [] #处理括号
fullstop_dict = [] #处理句号
comma_dict = [] #处理逗号
semicolon_dict = [] #处理分号
questionmark_dict = [] #处理问号
exclamatory_dict = [] #处理感叹号

tp_adv_dict = [] #时间地点状语
tp_adv_dict_single = [] #只有时间地点词的状语
tp_adv_dict_ft = [] #from...to时间地点状语
tp_adv_dict_ft_single = [] #只有from或to时间地点状语
adv_sigh_dict = [] #叹词
adv_as_dict = [] #如、若、似等状语补语
adv_middle_dict = [] #n+“里、中”或n+v+"里"，等时间地点词状语
adv_simple_dict = [] #简单副词做状语
adv_with_sb_dict = [] #跟着某人+V
adv_inorderto_dict = [] #"为了"单独做状语
adv_there_be_dict = [] #there be中的状语
adv_through_dict = [] #翻遍地球等做状语
adv_until_dict = [] #等到...状语
complement_degree_to_dict = [] #“到”+数+量做补语
complement_degree_de_dict = [] #"得"+动+名或“得”+动+副或“得”+副做补语
complement_adj_le_dict = [] #"巧了点儿"之类的做补语
complement_degree_dict = [] #普通程度补语
complement_specialuse_dict = [] #特殊用法状、补语
complement_specialtreat_dict = [] #需要特殊处理的状、补语
complement_simple_dict = []
adj_ap_n_de_dict = [] #proun + n/adj + "的/之"结构的定语
adj_should_dict = [] #本应 + "的/之"结构的定语
adj_v_dict = [] #v + "的/之"结构的定语
adj_np_v_dict = [] #np+ v + "的/之"结构的定语
adj_number_dict = [] #数+量词做定语
adj_tp_dict = [] #时间地点词+"的/之"结构的定语
adj_double_dict = [] #双重"的/之"结构的定语
adj_and_dict = [] #"并且又"结构的定语
adj_and_v_dict = [] #"和、同" + V 结构的定语
adj_belong_dict = [] #"属于" + "的之"结构的定语
adj_de_single_dict = [] #简单"的之"结构的定语
adj_connected_dict = [] #简单无“的之”结构的定语
adj_connected_complex_dict = [] #复杂无“的之”结构的定语
adv_compare_dict = [] #比。。。可怕的“比。。。”部分做状语
adj_n_1_dict = [] #无“的”、“之”的代词做定语
adj_between_dict = [] #动词和名词之间的部分做定语
adj_prep_dict = [] # "由。。。派生而来的”
adj_begin_dict = [] # 句子开头部分的定语
middle_adv_dict = []
adj_be_de_dict = [] #是...的定语
adj_note_dict = [] #注释作为定语后置
adj_no_v_dict = [] #无谓语动词句
adj_near_dict = [] #“近六成人口”定语

predicate_dict = [] #谓语
predicate_2_dict = [] #并列谓语2
subject_dict = [] #主语
subject_2_dict = [] #双主语
object_dict = [] #宾语
object_2_dict = [] #并列宾语2
modal_verb_dict = [] #情态动词
modal_verb_conclusion = [] #情态动词后的临时字典
compare_verb_dict = [] #比较的临时字典
conj_dict = [] #连词
verb_j_dict = [] #“把、将”特殊动词
adj_asverb_dict = [] #形容词（+"了"）做谓语
verb_j_conclusion = [] #“把、将”双动词结构的字典
two_verbs_dict = []
objectclause_dict = [] #宾语从句临时用字典
predicate_objectclause_dict = []
subject_objectclause_dict = []
object_objectclause_dict = []
predicate_in_objectclause_dict = []
subject_in_objectclause_dict = []
object_in_objectclause_dict = []
subject_subjectclause_dict = []
predicate_subjectclause_dict = []
object_subjectclause_dict = []
subject_in_subjectclause_dict = []
predicate_in_subjectclause_dict = []
object_in_subjectclause_dict = []
subjectclause_dict = []
subject_twosubject_dict = []
there_be_dict = []
subject_represent_dict = []
predicate_represent_dict = []
object_represent_dict = []
predicate_in_represent_dict = []
object_in_represent_dict = []
adj = []
adv = []
complement = []
df = [] #pd转Dataframe

index_i_prep = 0 #介词
index_i_p = 0 #时间方位副词
index_i_from = 0 #特殊介词from
index_i_to = 0 #特殊介词to
index_i_from_single = 0 #只有特殊介词From
index_i_from_tpc = 0 #只有特殊介词From,后的时间方位词或量词
index_i_to_single = 0 #只有特殊介词to
index_i_to_tpc = 0 #只有特殊介词To,前的时间方位词或量词
index_i_d = 0 #程度副词
index_i_c = 0 #状态副词
index_i_tp_single = 0 #只有时间方位词的副词
index_i_as = 0 #如、若、似等副词
index_i_complement_to = 0 #“到”+数+量做补语
index_i_complement_de = 0 #"得"+动+名或“得”+动+副或“得”+副做补语
index_i_adj_le = 0 #"巧了点儿"之类的做补语
index_i_complement_degree = 0 #普通程度补语
index_i_complement_specialuse = 0 #特殊用法状、补语
index_i_complement_specialtreat = 0 #需要特殊处理的状、补语
index_i_adv_middle = 0 #n+“里、中”或n+v+"里"，等时间地点词状语
index_i_adv_simple = 0 #简单副词做状语
index_i_adv_with_sb = 0 #跟着某人+V
index_i_adv_inorderto = 0 #"为了"单独做状语
index_i_adv_through = 0 #翻遍地球
index_i_adv_through_end = 0 #翻遍地球的结束标
index_i_adv_until = 0 #等到。。
index_adj_ap_n_de = 0 #proun + n/adj + "的/之"结构的定语
index_adj_ap_n_end = 0 #proun + n/adj + "的/之"结构的定语的结束标
index_adj_should = 0 #“本应” + n + "的/之"结构的定语
index_adj_should_end = 0 #“本应” + n + "的/之"结构的定语的结束标
index_adj_v = 0 #v + "的/之"结构的定语
index_adj_v_end = 0 #v + "的/之"结构的定语的结束标
index_adj_np_v = 0 #np+ v + "的/之"结构的定语
index_adj_np_v_end = 0 #np+ v + "的/之"结构的定语
index_adj_number = 0 #数+量词做定语
index_adj_tp = 0 #时间地点词 + "的/之"结构的定语
index_adj_tp_end = 0 #时间地点词 + "的/之"结构的定语的结束标
index_adj_double = 0 #双重"的/之"结构的定语
index_adj_and = 0 #"并且又"结构的定语
index_adj_and_v = 0 #"和、同" + V 结构的定语
index_adj_and_v_start = 0 #"和、同" + V 结构的定语起始
index_adj_belong = 0 #"属于" + "的之"结构的定语
index_adj_belong_end = 0 #"属于" + "的之"结构的定语的结束标
index_adj_de_single = 0 #简单"的之"结构的定语
inde_adj_de_single_start = 0 #简单"的之"结构的定语起始
index_adj_connected = 0 #简单无“的之”结构的定语
index_adj_connected_complex = 0 #复杂无“的之”结构的定语
index_adj_connected_complex_start = 0 #复杂无“的之”结构的定语的结束标
index_backbone_be = 0 #系动词“是...的”结构
index_backbone_modal = 0 #情态动词结构
index_backbone_modal_end = 0 #情态动词结构的结束标
index_backbone_compare = 0 #比较结构
index_backbone_compare_end = 0
index_backbone_verb_j = 0 #“把、将”双动词
index_backbone_verb_j_end = 0 #“把、将”双动词的结束标
index_adj_asverb = 0 #形容词做谓语
index_adj_asverb_end = 0 #形容词做谓语的结束标
index_backbone_two_verbs_end = 0 #双动词结构的结束标
index_backbone_objectclause = 0 #宾语从句
index_backbone_objectclause_end = 0 #宾语从句的结束标
index_backbone_two_verbs = 0 #双动词结构
index_backbone_subjectclause = 0 #主语从句
index_backbone_subjectclause_end = 0 #主语从句的结束标
index_backbone_two_subject = 0 #双主语
index_backbone_two_subject_end = 0 # 双主语的结束标
index_backbone_there_be = 0 # there be
index_backbone_there_be_end = 0 # there be的结束标
index_combine_dot = 0 # 标点符号连接
index_connection = 0
index_i_sigh = 0
index_i_v_c = 0
index_v_simple = 0
index_v_tp = 0
index_adj_n_1 = 0
index_adj_between = 0
index_adj_between_end = 0
index_adj_prep = 0
index_adj_prep_end = 0
index_backbone_tp_subject = 0
index_v_tp_asobject = 0
index_adj_begin = 0
index_adj_begin_end = 0
index_twoverbconnected = 0
index_represent = 0

def Def_speaker():
    global sen
    global speaker

    index_i = 0
    sen_after = []

    for i in sen:
        index_i = sen.index(i)
        if i in [":", "："]:
            speaker = sen[0:index_i+1]
            sen_after = sen[index_i+1::]

    sen = copy.deepcopy(sen_after)

def Load_baijia_list():
    global baijia_list

    with open("./bajia_list.csv", "r", newline='',encoding='GBK') as d:
        content = csv.reader(d)
        for row in content:
            baijia_list.append(row)

def Cut_words(c):
    global sen
    global sen_flag
    global cutwords_flag
    global chapter

    sen = jieba.lcut(c)
    for i in sen:
        if i in ["\r\n", "\ufeff"]:
            sen.remove(i)

    print("Cutted_sen", sen)

    sen_flag = pseg.cut(c)
    for word,flag in sen_flag:
        cutwords_flag.append([word, flag])

def Cut_words_hanlp(c):
    sen_hanlp = []
    chinese_names = []

    Nature = JClass("com.hankcs.hanlp.corpus.tag.Nature")
    cn_name_nature = Nature.create("nr")
    cn_name_nature_1 = Nature.create("ns")

    # 2. HanLP分词（主要处理中文人名识别）
    terms = HanLP.segment(c)
    for term in terms:
        if term.word != "\ufeff":
            sen_hanlp.append(term.word)
        if term.nature == cn_name_nature or term.nature == cn_name_nature_1:
            chinese_names.append(term.word)

    return sen_hanlp, chinese_names

def Is_number(text):
    try:
        float(text)
        if '.' in text:
            return 0  # 浮点
        else:
            return 1  # 整数
    except:
        pass
    return -1  # 不是数字

def Count_str(str_word):
    len_str = 0
    for s in str_word:
        if s.isalpha():
            len_str += 1
    return len_str

def Load_database_marks():
    global df
    global sen
    global database_sen

    with open("./database_marks.csv", "r", newline='',encoding='GBK') as d:
        content = csv.reader(d)
        for row in content:
            database_marks.append(row)
    df = pd.DataFrame(database_marks, columns=["word", "mark"])

    database_sen = sen_encode.Encoding(sen)

def YP_cut_words():
    i_cut = []
    global YP_uncut_words
    global YP_words
    global YP_word_list
    global sen
    global database_marks

    #对库里的黄页词做提取，存入YP_words，以便在分词时正确切分
    for i in database_marks:
        if i[1][2:8] == "010111":
            YP_uncut_words.append(i[0][3::])
            i_cut = jieba.lcut(i[0][3::])
            YP_word_list.append(i_cut)

def Mark_words(c):
    global sen
    global sen_hanlp
    global num_list
    global mark_dict
    global dot_dict
    global include_dict
    global YP_uncut_words
    global YP_word_list
    global YP_words
    global df
    global database_sen

    index_word = 0
    index_i = 0
    index_j = 0
    num_count = []
    proun = []
    noun_pt = []
    proun_pt =[]
    proun_noun = []
    proun_v = []
    count_noun = []
    database_words = []
    v_adv = []
    aux = []
    v_noun = []
    v_through = []
    noun_adj = []

    duplicated_word = []
    targetIndex = []
    count = 0
    i_str = ""
    mark_dict_0 = []
    first = ""
    middle = ""
    last = ""

    # 0. 使用pyhanlp识别中文人名，修正jieba分词的结果sen
    sen_hanlp, chinese_names = Cut_words_hanlp(c)
    #print("sen_hanlp", sen_hanlp)
    #print("chinese_names", chinese_names)
    index_insert_cn_name = 0
    m_cn_name = 0
    mark_cn_name = ""

    for i in sen:
        index_i = sen.index(i)
        if len(chinese_names) != 0:
            for j in sen_hanlp:
                index_j = sen_hanlp.index(j)
                if j in chinese_names and i not in chinese_names and i[0] == j[0]:
                    sen[index_i] = j
                    sen.remove(sen[index_i+1])
                    index_insert_cn_name = index_i
                    m_cn_name += 1
                    mark_cn_name = "1 010111 000000 000000 000000 000000"

    #0,1 对重复的元素，下标区分
    sen_index = []
    for i in range(len(sen)):
        if sen[i] in sen[:i]:
            sen_index.append(sen_index[-1] + 1)
        else:
            sen_index.append(sen.index(sen[i]))
    x = 0
    for i in sen:
        index_i = sen_index[x]
        x += 1

    #先把词加入备用词典
    list_2 = []
    list_2 = df.loc[:, "word"]
    for i in list_2:
        database_words.append(i[3::])
    # for j in database_marks:
    #     database_words.append(j[0][3::])

    #0.2 英文标注
    mark_alpha = ""
    index_insert_alpha = []
    m_alpha = 0
    for word in sen:
        j = word.encode('utf-8').isalpha()
        if j:
            index_insert_alpha.append(sen.index(word))
            mark_alpha = "1 010111 000000 000000 000000 000000"
            m_alpha = 1

    #print("sen_after0.2", sen)

    #0.3 合并破折号
    remove_list = []
    try:
        for word in sen:
            index_word = sen.index(word)
            if word == "—" and sen[index_word + 1]== "—":
                sen[index_word] = "".join(sen[index_word:index_word + 2])
                remove_list = sen[index_word + 1]
                for i in remove_list:
                    sen.remove(i)
        remove_list = []
    except Exception:
        pass

    #print("sen_after0.3", sen)

    #0.4 合并数词
    m_03 = 0
    mark_n_combine = "1 000010 000000 000000 000000 000000"
    index_insert_03 = 0
    try:
        for word in sen:
            index_word = sen.index(word)
            df_word = df.loc[df["word"] == "000" + word].values
            df_word_1 = df.loc[df["word"] == "100" + word].values
            df_word_2 = df.loc[df["word"] == "001" + word].values
            df_word_f = df.loc[df["word"] == "000" + word[0]].values
            df_word_f_1 = df.loc[df["word"] == "100" + word[0]].values
            df_word_f_2 = df.loc[df["word"] == "001" + word[0]].values
            df_word_1_1 = df.loc[df["word"] == "000" + sen[index_word+1]].values
            df_word_1_2 = df.loc[df["word"] == "000" + sen[index_word+2]].values
            df_word_1_3 = df.loc[df["word"] == "000" + sen[index_word + 3]].values
            df_word_1_4 = df.loc[df["word"] == "000" + sen[index_word + 4]].values
            df_word_2_1 = df.loc[df["word"] == "100" + sen[index_word + 1]].values
            df_word_2_2 = df.loc[df["word"] == "100" + sen[index_word + 2]].values
            df_word_2_3 = df.loc[df["word"] == "100" + sen[index_word + 3]].values
            df_word_2_4 = df.loc[df["word"] == "100" + sen[index_word + 4]].values
            if (len(df.loc[df["word"] == "000" + word].index) != 0) and (df_word[0][1][2:8] == "000010" or df_word[0][1][9:15] == "000010" or df_word[0][1][16:22] == "000010" or df_word[0][1][23:29] == "000010" or df_word[0][1][30:36] == "000010"):
                if df_word_1_1[0][1][2:8]== "000010" or df_word_1_1[0][1][9:15] == "000010" or df_word_1_1[0][1][16:22] == "000010" or df_word_1_1[0][1][23:29] == "000010" or df_word_1_1[0][1][30:36] == "000010":
                    sen[index_word] = "".join(sen[index_word:index_word + 2])
                    remove_list = sen[index_word + 1]
                    m_03 = 1
                    index_insert_03 = index_word
                    if df_word_1_2[0][1][2:8] == "000010" or df_word_1_2[0][1][9:15] == "000010" or df_word_1_2[0][1][16:22] == "000010" or df_word_1_2[0][1][23:29] == "000010" or df_word_1_2[0][1][30:36] == "000010":
                        sen[index_word] = "".join(sen[index_word:index_word + 3])
                        remove_list = sen[index_word + 1:index_word + 3]
                        if df_word_1_3[0][1][2:8] == "000010" or df_word_1_3[0][1][9:15] == "000010" or df_word_1_3[0][1][16:22] == "000010" or df_word_1_3[0][1][23:29] == "000010" or df_word_1_3[0][1][30:36] == "000010":
                            sen[index_word] = "".join(sen[index_word:index_word + 4])
                            remove_list = sen[index_word + 1:index_word + 4]
                            if df_word_1_4[0][1][2:8] == "000010" or df_word_1_4[0][1][9:15] == "000010" or df_word_1_4[0][1][16:22] == "000010" or df_word_1_4[0][1][23:29] == "000010" or df_word_1_4[0][1][30:36] == "000010":
                                sen[index_word] = "".join(sen[index_word:index_word + 5])
                                remove_list = sen[index_word + 1:index_word + 5]
                elif df_word_2_1[0][1][2:8]== "000010" or df_word_2_1[0][1][9:15] == "000010" or df_word_2_1[0][1][16:22] == "000010" or df_word_2_1[0][1][23:29] == "000010" or df_word_2_1[0][1][30:36] == "000010":
                    sen[index_word] = "".join(sen[index_word:index_word + 2])
                    remove_list = sen[index_word + 1]
                    m_03 = 1
                    index_insert_03 = index_word
                    if df_word_2_2[0][1][2:8] == "000010" or df_word_2_2[0][1][9:15] == "000010" or df_word_2_2[0][1][16:22] == "000010" or df_word_2_2[0][1][23:29] == "000010" or df_word_2_2[0][1][30:36] == "000010":
                        sen[index_word] = "".join(sen[index_word:index_word + 3])
                        remove_list = sen[index_word + 1:index_word + 3]
                        if df_word_2_3[0][1][2:8] == "000010" or df_word_2_3[0][1][9:15] == "000010" or df_word_2_3[0][1][16:22] == "000010" or df_word_2_3[0][1][23:29] == "000010" or df_word_2_3[0][1][30:36] == "000010":
                            sen[index_word] = "".join(sen[index_word:index_word + 4])
                            remove_list = sen[index_word + 1:index_word + 4]
                            if df_word_2_4[0][1][2:8] == "000010" or df_word_2_4[0][1][9:15] == "000010" or df_word_2_4[0][1][16:22] == "000010" or df_word_2_4[0][1][23:29] == "000010" or df_word_2_4[0][1][30:36] == "000010":
                                sen[index_word] = "".join(sen[index_word:index_word + 5])
                                remove_list = sen[index_word + 1:index_word + 5]
            elif (len(df.loc[df["word"] == "100" + word].index) != 0) and (df_word_1[0][1][2:8] == "000010" or df_word_1[0][1][9:15] == "000010" or df_word_1[0][1][16:22] == "000010" or df_word_1[0][1][23:29] == "000010" or df_word_1[0][1][30:36] == "000010"):
                if df_word_1_1[0][1][2:8]== "000010" or df_word_1_1[0][1][9:15] == "000010" or df_word_1_1[0][1][16:22] == "000010" or df_word_1_1[0][1][23:29] == "000010" or df_word_1_1[0][1][30:36] == "000010":
                    sen[index_word] = "".join(sen[index_word:index_word + 2])
                    remove_list = sen[index_word + 1]
                    m_03 = 1
                    index_insert_03 = index_word
                    if df_word_1_2[0][1][2:8] == "000010" or df_word_1_2[0][1][9:15] == "000010" or df_word_1_2[0][1][16:22] == "000010" or df_word_1_2[0][1][23:29] == "000010" or df_word_1_2[0][1][30:36] == "000010":
                        sen[index_word] = "".join(sen[index_word:index_word + 3])
                        remove_list = sen[index_word + 1:index_word + 3]
                        if df_word_1_3[0][1][2:8] == "000010" or df_word_1_3[0][1][9:15] == "000010" or df_word_1_3[0][1][16:22] == "000010" or df_word_1_3[0][1][23:29] == "000010" or df_word_1_3[0][1][30:36] == "000010":
                            sen[index_word] = "".join(sen[index_word:index_word + 4])
                            remove_list = sen[index_word + 1:index_word + 4]
                            if df_word_1_4[0][1][2:8] == "000010" or df_word_1_4[0][1][9:15] == "000010" or df_word_1_4[0][1][16:22] == "000010" or df_word_1_4[0][1][23:29] == "000010" or df_word_1_4[0][1][30:36] == "000010":
                                sen[index_word] = "".join(sen[index_word:index_word + 5])
                                remove_list = sen[index_word + 1:index_word + 5]
                elif df_word_2_1[0][1][2:8]== "000010" or df_word_2_1[0][1][9:15] == "000010" or df_word_2_1[0][1][16:22] == "000010" or df_word_2_1[0][1][23:29] == "000010" or df_word_2_1[0][1][30:36] == "000010":
                    sen[index_word] = "".join(sen[index_word:index_word + 2])
                    remove_list = sen[index_word + 1]
                    m_03 = 1
                    index_insert_03 = index_word
                    if df_word_2_2[0][1][2:8] == "000010" or df_word_2_2[0][1][9:15] == "000010" or df_word_2_2[0][1][16:22] == "000010" or df_word_2_2[0][1][23:29] == "000010" or df_word_2_2[0][1][30:36] == "000010":
                        sen[index_word] = "".join(sen[index_word:index_word + 3])
                        remove_list = sen[index_word + 1:index_word + 3]
                        if df_word_2_3[0][1][2:8] == "000010" or df_word_2_3[0][1][9:15] == "000010" or df_word_2_3[0][1][16:22] == "000010" or df_word_2_3[0][1][23:29] == "000010" or df_word_2_3[0][1][30:36] == "000010":
                            sen[index_word] = "".join(sen[index_word:index_word + 4])
                            remove_list = sen[index_word + 1:index_word + 4]
                            if df_word_2_4[0][1][2:8] == "000010" or df_word_2_4[0][1][9:15] == "000010" or df_word_2_4[0][1][16:22] == "000010" or df_word_2_4[0][1][23:29] == "000010" or df_word_2_4[0][1][30:36] == "000010":
                                sen[index_word] = "".join(sen[index_word:index_word + 5])
                                remove_list = sen[index_word + 1:index_word + 5]
            elif (len(df.loc[df["word"] == "001" + word].index) != 0) and (df_word_2[0][1][2:8] == "000010" or df_word_2[0][1][9:15] == "000010" or df_word_2[0][1][16:22] == "000010" or df_word_2[0][1][23:29] == "000010" or df_word_2[0][1][30:36] == "000010"):
                if df_word_1_1[0][1][2:8]== "000010" or df_word_1_1[0][1][9:15] == "000010" or df_word_1_1[0][1][16:22] == "000010" or df_word_1_1[0][1][23:29] == "000010" or df_word_1_1[0][1][30:36] == "000010":
                    sen[index_word] = "".join(sen[index_word:index_word + 2])
                    remove_list = sen[index_word + 1]
                    m_03 = 1
                    index_insert_03 = index_word
                    if df_word_1_2[0][1][2:8] == "000010" or df_word_1_2[0][1][9:15] == "000010" or df_word_1_2[0][1][16:22] == "000010" or df_word_1_2[0][1][23:29] == "000010" or df_word_1_2[0][1][30:36] == "000010":
                        sen[index_word] = "".join(sen[index_word:index_word + 3])
                        remove_list = sen[index_word + 1:index_word + 3]
                        if df_word_1_3[0][1][2:8] == "000010" or df_word_1_3[0][1][9:15] == "000010" or df_word_1_3[0][1][16:22] == "000010" or df_word_1_3[0][1][23:29] == "000010" or df_word_1_3[0][1][30:36] == "000010":
                            sen[index_word] = "".join(sen[index_word:index_word + 4])
                            remove_list = sen[index_word + 1:index_word + 4]
                            if df_word_1_4[0][1][2:8] == "000010" or df_word_1_4[0][1][9:15] == "000010" or df_word_1_4[0][1][16:22] == "000010" or df_word_1_4[0][1][23:29] == "000010" or df_word_1_4[0][1][30:36] == "000010":
                                sen[index_word] = "".join(sen[index_word:index_word + 5])
                                remove_list = sen[index_word + 1:index_word + 5]
                elif df_word_2_1[0][1][2:8]== "000010" or df_word_2_1[0][1][9:15] == "000010" or df_word_2_1[0][1][16:22] == "000010" or df_word_2_1[0][1][23:29] == "000010" or df_word_2_1[0][1][30:36] == "000010":
                    sen[index_word] = "".join(sen[index_word:index_word + 2])
                    remove_list = sen[index_word + 1]
                    m_03 = 1
                    index_insert_03 = index_word
                    if df_word_2_2[0][1][2:8] == "000010" or df_word_2_2[0][1][9:15] == "000010" or df_word_2_2[0][1][16:22] == "000010" or df_word_2_2[0][1][23:29] == "000010" or df_word_2_2[0][1][30:36] == "000010":
                        sen[index_word] = "".join(sen[index_word:index_word + 3])
                        remove_list = sen[index_word + 1:index_word + 3]
                        if df_word_2_3[0][1][2:8] == "000010" or df_word_2_3[0][1][9:15] == "000010" or df_word_2_3[0][1][16:22] == "000010" or df_word_2_3[0][1][23:29] == "000010" or df_word_2_3[0][1][30:36] == "000010":
                            sen[index_word] = "".join(sen[index_word:index_word + 4])
                            remove_list = sen[index_word + 1:index_word + 4]
                            if df_word_2_4[0][1][2:8] == "000010" or df_word_2_4[0][1][9:15] == "000010" or df_word_2_4[0][1][16:22] == "000010" or df_word_2_4[0][1][23:29] == "000010" or df_word_2_4[0][1][30:36] == "000010":
                                sen[index_word] = "".join(sen[index_word:index_word + 5])
                                remove_list = sen[index_word + 1:index_word + 5]
            elif (len(df.loc[df["word"] == "000" + word[0]].index) != 0) and (df_word_f[0][1][2:8] == "000010" or df_word_f[0][1][9:15] == "000010" or df_word_f[0][1][16:22] == "000010" or df_word_f[0][1][23:29] == "000010" or df_word_f[0][1][30:36] == "000010"):
                if df_word_1_1[0][1][2:8]== "000010" or df_word_1_1[0][1][9:15] == "000010" or df_word_1_1[0][1][16:22] == "000010" or df_word_1_1[0][1][23:29] == "000010" or df_word_1_1[0][1][30:36] == "000010":
                    sen[index_word] = "".join(sen[index_word:index_word + 2])
                    remove_list = sen[index_word + 1]
                    m_03 = 1
                    index_insert_03 = index_word
                    if df_word_1_2[0][1][2:8] == "000010" or df_word_1_2[0][1][9:15] == "000010" or df_word_1_2[0][1][16:22] == "000010" or df_word_1_2[0][1][23:29] == "000010" or df_word_1_2[0][1][30:36] == "000010":
                        sen[index_word] = "".join(sen[index_word:index_word + 3])
                        remove_list = sen[index_word + 1:index_word + 3]
                        if df_word_1_3[0][1][2:8] == "000010" or df_word_1_3[0][1][9:15] == "000010" or df_word_1_3[0][1][16:22] == "000010" or df_word_1_3[0][1][23:29] == "000010" or df_word_1_3[0][1][30:36] == "000010":
                            sen[index_word] = "".join(sen[index_word:index_word + 4])
                            remove_list = sen[index_word + 1:index_word + 4]
                            if df_word_1_4[0][1][2:8] == "000010" or df_word_1_4[0][1][9:15] == "000010" or df_word_1_4[0][1][16:22] == "000010" or df_word_1_4[0][1][23:29] == "000010" or df_word_1_4[0][1][30:36] == "000010":
                                sen[index_word] = "".join(sen[index_word:index_word + 5])
                                remove_list = sen[index_word + 1:index_word + 5]
                elif df_word_2_1[0][1][2:8]== "000010" or df_word_2_1[0][1][9:15] == "000010" or df_word_2_1[0][1][16:22] == "000010" or df_word_2_1[0][1][23:29] == "000010" or df_word_2_1[0][1][30:36] == "000010":
                    sen[index_word] = "".join(sen[index_word:index_word + 2])
                    remove_list = sen[index_word + 1]
                    m_03 = 1
                    index_insert_03 = index_word
                    if df_word_2_2[0][1][2:8] == "000010" or df_word_2_2[0][1][9:15] == "000010" or df_word_2_2[0][1][16:22] == "000010" or df_word_2_2[0][1][23:29] == "000010" or df_word_2_2[0][1][30:36] == "000010":
                        sen[index_word] = "".join(sen[index_word:index_word + 3])
                        remove_list = sen[index_word + 1:index_word + 3]
                        if df_word_2_3[0][1][2:8] == "000010" or df_word_2_3[0][1][9:15] == "000010" or df_word_2_3[0][1][16:22] == "000010" or df_word_2_3[0][1][23:29] == "000010" or df_word_2_3[0][1][30:36] == "000010":
                            sen[index_word] = "".join(sen[index_word:index_word + 4])
                            remove_list = sen[index_word + 1:index_word + 4]
                            if df_word_2_4[0][1][2:8] == "000010" or df_word_2_4[0][1][9:15] == "000010" or df_word_2_4[0][1][16:22] == "000010" or df_word_2_4[0][1][23:29] == "000010" or df_word_2_4[0][1][30:36] == "000010":
                                sen[index_word] = "".join(sen[index_word:index_word + 5])
                                remove_list = sen[index_word + 1:index_word + 5]
            elif (len(df.loc[df["word"] == "100" + word[0]].index) != 0) and (df_word_f_1[0][1][2:8] == "000010" or df_word_f_1[0][1][9:15] == "000010" or df_word_f_1[0][1][16:22] == "000010" or df_word_f_1[0][1][23:29] == "000010" or df_word_f_1[0][1][30:36] == "000010"):
                if df_word_1_1[0][1][2:8]== "000010" or df_word_1_1[0][1][9:15] == "000010" or df_word_1_1[0][1][16:22] == "000010" or df_word_1_1[0][1][23:29] == "000010" or df_word_1_1[0][1][30:36] == "000010":
                    sen[index_word] = "".join(sen[index_word:index_word + 2])
                    remove_list = sen[index_word + 1]
                    m_03 = 1
                    index_insert_03 = index_word
                    if df_word_1_2[0][1][2:8] == "000010" or df_word_1_2[0][1][9:15] == "000010" or df_word_1_2[0][1][16:22] == "000010" or df_word_1_2[0][1][23:29] == "000010" or df_word_1_2[0][1][30:36] == "000010":
                        sen[index_word] = "".join(sen[index_word:index_word + 3])
                        remove_list = sen[index_word + 1:index_word + 3]
                        if df_word_1_3[0][1][2:8] == "000010" or df_word_1_3[0][1][9:15] == "000010" or df_word_1_3[0][1][16:22] == "000010" or df_word_1_3[0][1][23:29] == "000010" or df_word_1_3[0][1][30:36] == "000010":
                            sen[index_word] = "".join(sen[index_word:index_word + 4])
                            remove_list = sen[index_word + 1:index_word + 4]
                            if df_word_1_4[0][1][2:8] == "000010" or df_word_1_4[0][1][9:15] == "000010" or df_word_1_4[0][1][16:22] == "000010" or df_word_1_4[0][1][23:29] == "000010" or df_word_1_4[0][1][30:36] == "000010":
                                sen[index_word] = "".join(sen[index_word:index_word + 5])
                                remove_list = sen[index_word + 1:index_word + 5]
                elif df_word_2_1[0][1][2:8]== "000010" or df_word_2_1[0][1][9:15] == "000010" or df_word_2_1[0][1][16:22] == "000010" or df_word_2_1[0][1][23:29] == "000010" or df_word_2_1[0][1][30:36] == "000010":
                    sen[index_word] = "".join(sen[index_word:index_word + 2])
                    remove_list = sen[index_word + 1]
                    m_03 = 1
                    index_insert_03 = index_word
                    if df_word_2_2[0][1][2:8] == "000010" or df_word_2_2[0][1][9:15] == "000010" or df_word_2_2[0][1][16:22] == "000010" or df_word_2_2[0][1][23:29] == "000010" or df_word_2_2[0][1][30:36] == "000010":
                        sen[index_word] = "".join(sen[index_word:index_word + 3])
                        remove_list = sen[index_word + 1:index_word + 3]
                        if df_word_2_3[0][1][2:8] == "000010" or df_word_2_3[0][1][9:15] == "000010" or df_word_2_3[0][1][16:22] == "000010" or df_word_2_3[0][1][23:29] == "000010" or df_word_2_3[0][1][30:36] == "000010":
                            sen[index_word] = "".join(sen[index_word:index_word + 4])
                            remove_list = sen[index_word + 1:index_word + 4]
                            if df_word_2_4[0][1][2:8] == "000010" or df_word_2_4[0][1][9:15] == "000010" or df_word_2_4[0][1][16:22] == "000010" or df_word_2_4[0][1][23:29] == "000010" or df_word_2_4[0][1][30:36] == "000010":
                                sen[index_word] = "".join(sen[index_word:index_word + 5])
                                remove_list = sen[index_word + 1:index_word + 5]
            elif (len(df.loc[df["word"] == "001" + word[0]].index) != 0) and (df_word_f_2[0][1][2:8] == "000010" or df_word_f_2[0][1][9:15] == "000010" or df_word_f_2[0][1][16:22] == "000010" or df_word_f_2[0][1][23:29] == "000010" or df_word_f_2[0][1][30:36] == "000010"):
                if df_word_1_1[0][1][2:8]== "000010" or df_word_1_1[0][1][9:15] == "000010" or df_word_1_1[0][1][16:22] == "000010" or df_word_1_1[0][1][23:29] == "000010" or df_word_1_1[0][1][30:36] == "000010":
                    sen[index_word] = "".join(sen[index_word:index_word + 2])
                    remove_list = sen[index_word + 1]
                    m_03 = 1
                    index_insert_03 = index_word
                    if df_word_1_2[0][1][2:8] == "000010" or df_word_1_2[0][1][9:15] == "000010" or df_word_1_2[0][1][16:22] == "000010" or df_word_1_2[0][1][23:29] == "000010" or df_word_1_2[0][1][30:36] == "000010":
                        sen[index_word] = "".join(sen[index_word:index_word + 3])
                        remove_list = sen[index_word + 1:index_word + 3]
                        if df_word_1_3[0][1][2:8] == "000010" or df_word_1_3[0][1][9:15] == "000010" or df_word_1_3[0][1][16:22] == "000010" or df_word_1_3[0][1][23:29] == "000010" or df_word_1_3[0][1][30:36] == "000010":
                            sen[index_word] = "".join(sen[index_word:index_word + 4])
                            remove_list = sen[index_word + 1:index_word + 4]
                            if df_word_1_4[0][1][2:8] == "000010" or df_word_1_4[0][1][9:15] == "000010" or df_word_1_4[0][1][16:22] == "000010" or df_word_1_4[0][1][23:29] == "000010" or df_word_1_4[0][1][30:36] == "000010":
                                sen[index_word] = "".join(sen[index_word:index_word + 5])
                                remove_list = sen[index_word + 1:index_word + 5]
                elif df_word_2_1[0][1][2:8]== "000010" or df_word_2_1[0][1][9:15] == "000010" or df_word_2_1[0][1][16:22] == "000010" or df_word_2_1[0][1][23:29] == "000010" or df_word_2_1[0][1][30:36] == "000010":
                    sen[index_word] = "".join(sen[index_word:index_word + 2])
                    remove_list = sen[index_word + 1]
                    m_03 = 1
                    index_insert_03 = index_word
                    if df_word_2_2[0][1][2:8] == "000010" or df_word_2_2[0][1][9:15] == "000010" or df_word_2_2[0][1][16:22] == "000010" or df_word_2_2[0][1][23:29] == "000010" or df_word_2_2[0][1][30:36] == "000010":
                        sen[index_word] = "".join(sen[index_word:index_word + 3])
                        remove_list = sen[index_word + 1:index_word + 3]
                        if df_word_2_3[0][1][2:8] == "000010" or df_word_2_3[0][1][9:15] == "000010" or df_word_2_3[0][1][16:22] == "000010" or df_word_2_3[0][1][23:29] == "000010" or df_word_2_3[0][1][30:36] == "000010":
                            sen[index_word] = "".join(sen[index_word:index_word + 4])
                            remove_list = sen[index_word + 1:index_word + 4]
                            if df_word_2_4[0][1][2:8] == "000010" or df_word_2_4[0][1][9:15] == "000010" or df_word_2_4[0][1][16:22] == "000010" or df_word_2_4[0][1][23:29] == "000010" or df_word_2_4[0][1][30:36] == "000010":
                                sen[index_word] = "".join(sen[index_word:index_word + 5])
                                remove_list = sen[index_word + 1:index_word + 5]
    except Exception:
        pass

    try:
        for i in remove_list:
            sen.remove(i)
    except Exception:
        pass

    remove_list = []

    # 0.5 拆分独立的单个字
    index_word = 0
    try:
        for word in sen:
            index_word = sen.index(word)
            if (word[0] in ["是", "及", "和", "与", "同", "跟", "并"]) and (word not in database_words):
                sen[index_word] = word[0]
                sen.insert(index_word + 1, word[1::])
                break
            elif (word[-1] in ["是", "及", "和", "与", "同", "跟", "并"]) and (word not in database_words):
                sen[index_word] = word[0:-1]
                sen.insert(index_word + 1, word[-1])
                break
    except Exception:
        pass

    # 1. 拆分数、量词
    word_combine = ""
    m_1 = 0
    index_insert_1 = 0
    joint_list = []

    try:
        for word in sen:
            index_word = sen.index(word)
            df_word_1 = df.loc[df["word"] == "000" + word[-1]].values
            df_word_2 = df.loc[df["word"] == "001" + word[-1]].values
            df_word_3 = df.loc[df["word"] == "010" + word[-1]].values
            df_word_4 = df.loc[df["word"] == "011" + word[-1]].values
            word_before = df.loc[df["word"] == "000" + sen[index_word-1]].values
            word_before_1 = df.loc[df["word"] == "001" + sen[index_word - 1]].values
            word_before_2 = df.loc[df["word"] == "010" + sen[index_word - 1]].values
            word_before_3 = df.loc[df["word"] == "011" + sen[index_word - 1]].values
            word_before_4 = df.loc[df["word"] == "100" + sen[index_word - 1]].values
            if (len(df.loc[df["word"] == "000" + word[-1]].index) != 0) and (df_word_1[0][1][2:8] == "000011" or df_word_1[0][1][3:9] == "000011" or df_word_1[0][1][9:15] == "000011" or df_word_1[0][1][16:22] == "000011" or df_word_1[0][1][23:29] == "000011" or df_word_1[0][1][30:36] == "000011") and (word not in YP_uncut_words) and (word not in database_words):
                if (len(df.loc[df["word"] == "000" + sen[index_word - 1]].index) != 0) and (
                        word_before[0][1][2:8] == "000010" or word_before_1[0][1][3:9] == "000010" or
                        word_before[0][1][9:15] == "000010" or word_before_1[0][1][16:22] == "000010" or
                        word_before[0][1][23:29] == "000010" or word_before_1[0][1][30:36] == "000010"):
                    sen[index_word] = word[0]
                    sen.insert(index_word+1, word[-1::])
                elif (len(df.loc[df["word"] == "001" + sen[index_word - 1]].index) != 0) and (
                        word_before_1[0][1][2:8] == "000010" or word_before_1[0][1][3:9] == "000010" or
                        word_before_1[0][1][9:15] == "000010" or word_before_1[0][1][16:22] == "000010" or
                        word_before_1[0][1][23:29] == "000010" or word_before_1[0][1][30:36] == "000010"):
                    sen[index_word] = word[0]
                    sen.insert(index_word+1, word[-1::])
                elif (len(df.loc[df["word"] == "010" + sen[index_word - 1]].index) != 0) and (
                        word_before_2[0][1][2:8] == "000010" or word_before_2[0][1][3:9] == "000010" or
                        word_before_2[0][1][9:15] == "000010" or word_before_2[0][1][16:22] == "000010" or
                        word_before_2[0][1][23:29] == "000010" or word_before_2[0][1][30:36] == "000010"):
                    sen[index_word] = word[0]
                    sen.insert(index_word + 1, word[-1::])
                elif (len(df.loc[df["word"] == "011" + sen[index_word - 1]].index) != 0) and (
                        word_before_3[0][1][2:8] == "000010" or word_before_3[0][1][3:9] == "000010" or
                        word_before_3[0][1][9:15] == "000010" or word_before_3[0][1][16:22] == "000010" or
                        word_before_3[0][1][23:29] == "000010" or word_before_3[0][1][30:36] == "000010"):
                    sen[index_word] = word[0]
                    sen.insert(index_word + 1, word[-1::])
                elif (len(df.loc[df["word"] == "011" + sen[index_word - 1]].index) != 0) and (
                        word_before_3[0][1][2:8] == "000010" or word_before_3[0][1][3:9] == "000010" or
                        word_before_3[0][1][9:15] == "000010" or word_before_3[0][1][16:22] == "000010" or
                        word_before_3[0][1][23:29] == "000010" or word_before_3[0][1][30:36] == "000010"):
                    sen[index_word] = word[0]
                    sen.insert(index_word + 1, word[-1::])
                break
            elif (len(df.loc[df["word"] == "001" + word[-1]].index) != 0) and (df_word_2[0][1][2:8] == "000011" or df_word_2[0][1][3:9] == "000011" or df_word_2[0][1][9:15] == "000011" or df_word_2[0][1][16:22] == "000011" or df_word_2[0][1][23:29] == "000011" or df_word_2[0][1][30:36] == "000011") and (word not in YP_uncut_words) and (word not in database_words):
                if (len(df.loc[df["word"] == "000" + sen[index_word - 1]].index) != 0) and (
                        word_before[0][1][2:8] == "000010" or word_before_1[0][1][3:9] == "000010" or
                        word_before[0][1][9:15] == "000010" or word_before_1[0][1][16:22] == "000010" or
                        word_before[0][1][23:29] == "000010" or word_before_1[0][1][30:36] == "000010"):
                    sen[index_word] = word[0]
                    sen.insert(index_word+1, word[-1::])
                elif (len(df.loc[df["word"] == "001" + sen[index_word - 1]].index) != 0) and (
                        word_before_1[0][1][2:8] == "000010" or word_before_1[0][1][3:9] == "000010" or
                        word_before_1[0][1][9:15] == "000010" or word_before_1[0][1][16:22] == "000010" or
                        word_before_1[0][1][23:29] == "000010" or word_before_1[0][1][30:36] == "000010"):
                    sen[index_word] = word[0]
                    sen.insert(index_word+1, word[-1::])
                elif (len(df.loc[df["word"] == "010" + sen[index_word - 1]].index) != 0) and (
                        word_before_2[0][1][2:8] == "000010" or word_before_2[0][1][3:9] == "000010" or
                        word_before_2[0][1][9:15] == "000010" or word_before_2[0][1][16:22] == "000010" or
                        word_before_2[0][1][23:29] == "000010" or word_before_2[0][1][30:36] == "000010"):
                    sen[index_word] = word[0]
                    sen.insert(index_word + 1, word[-1::])
                elif (len(df.loc[df["word"] == "011" + sen[index_word - 1]].index) != 0) and (
                        word_before_3[0][1][2:8] == "000010" or word_before_3[0][1][3:9] == "000010" or
                        word_before_3[0][1][9:15] == "000010" or word_before_3[0][1][16:22] == "000010" or
                        word_before_3[0][1][23:29] == "000010" or word_before_3[0][1][30:36] == "000010"):
                    sen[index_word] = word[0]
                    sen.insert(index_word + 1, word[-1::])
                elif (len(df.loc[df["word"] == "011" + sen[index_word - 1]].index) != 0) and (
                        word_before_3[0][1][2:8] == "000010" or word_before_3[0][1][3:9] == "000010" or
                        word_before_3[0][1][9:15] == "000010" or word_before_3[0][1][16:22] == "000010" or
                        word_before_3[0][1][23:29] == "000010" or word_before_3[0][1][30:36] == "000010"):
                    sen[index_word] = word[0]
                    sen.insert(index_word + 1, word[-1::])
                break
            elif (len(df.loc[df["word"] == "010" + word[-1]].index) != 0) and (df_word_3[0][1][2:8] == "000011" or df_word_3[0][1][3:9] == "000011" or df_word_3[0][1][9:15] == "000011" or df_word_3[0][1][16:22] == "000011" or df_word_3[0][1][23:29] == "000011" or df_word_3[0][1][30:36] == "000011") and (word not in YP_uncut_words) and (word not in database_words):
                if (len(df.loc[df["word"] == "000" + sen[index_word - 1]].index) != 0) and (
                        word_before[0][1][2:8] == "000010" or word_before_1[0][1][3:9] == "000010" or
                        word_before[0][1][9:15] == "000010" or word_before_1[0][1][16:22] == "000010" or
                        word_before[0][1][23:29] == "000010" or word_before_1[0][1][30:36] == "000010"):
                    sen[index_word] = word[0]
                    sen.insert(index_word+1, word[-1::])
                elif (len(df.loc[df["word"] == "001" + sen[index_word - 1]].index) != 0) and (
                        word_before_1[0][1][2:8] == "000010" or word_before_1[0][1][3:9] == "000010" or
                        word_before_1[0][1][9:15] == "000010" or word_before_1[0][1][16:22] == "000010" or
                        word_before_1[0][1][23:29] == "000010" or word_before_1[0][1][30:36] == "000010"):
                    sen[index_word] = word[0]
                    sen.insert(index_word+1, word[-1::])
                elif (len(df.loc[df["word"] == "010" + sen[index_word - 1]].index) != 0) and (
                        word_before_2[0][1][2:8] == "000010" or word_before_2[0][1][3:9] == "000010" or
                        word_before_2[0][1][9:15] == "000010" or word_before_2[0][1][16:22] == "000010" or
                        word_before_2[0][1][23:29] == "000010" or word_before_2[0][1][30:36] == "000010"):
                    sen[index_word] = word[0]
                    sen.insert(index_word + 1, word[-1::])
                elif (len(df.loc[df["word"] == "011" + sen[index_word - 1]].index) != 0) and (
                        word_before_3[0][1][2:8] == "000010" or word_before_3[0][1][3:9] == "000010" or
                        word_before_3[0][1][9:15] == "000010" or word_before_3[0][1][16:22] == "000010" or
                        word_before_3[0][1][23:29] == "000010" or word_before_3[0][1][30:36] == "000010"):
                    sen[index_word] = word[0]
                    sen.insert(index_word + 1, word[-1::])
                elif (len(df.loc[df["word"] == "011" + sen[index_word - 1]].index) != 0) and (
                        word_before_3[0][1][2:8] == "000010" or word_before_3[0][1][3:9] == "000010" or
                        word_before_3[0][1][9:15] == "000010" or word_before_3[0][1][16:22] == "000010" or
                        word_before_3[0][1][23:29] == "000010" or word_before_3[0][1][30:36] == "000010"):
                    sen[index_word] = word[0]
                    sen.insert(index_word + 1, word[-1::])
                break
            elif (len(df.loc[df["word"] == "011" + word[-1]].index) != 0) and (df_word_4[0][1][2:8] == "000011" or df_word_4[0][1][3:9] == "000011" or df_word_4[0][1][9:15] == "000011" or df_word_4[0][1][16:22] == "000011" or df_word_4[0][1][23:29] == "000011" or df_word_4[0][1][30:36] == "000011") and (word not in YP_uncut_words) and (word not in database_words):
                sen[index_word] = word[0]
                sen.insert(index_word+1, word[-1::])
                if (len(df.loc[df["word"] == "000" + sen[index_word - 1]].index) != 0) and (
                        word_before[0][1][2:8] == "000010" or word_before_1[0][1][3:9] == "000010" or
                        word_before[0][1][9:15] == "000010" or word_before_1[0][1][16:22] == "000010" or
                        word_before[0][1][23:29] == "000010" or word_before_1[0][1][30:36] == "000010"):
                    sen[index_word] = word[0]
                    sen.insert(index_word+1, word[-1::])
                elif (len(df.loc[df["word"] == "001" + sen[index_word - 1]].index) != 0) and (
                        word_before_1[0][1][2:8] == "000010" or word_before_1[0][1][3:9] == "000010" or
                        word_before_1[0][1][9:15] == "000010" or word_before_1[0][1][16:22] == "000010" or
                        word_before_1[0][1][23:29] == "000010" or word_before_1[0][1][30:36] == "000010"):
                    sen[index_word] = word[0]
                    sen.insert(index_word+1, word[-1::])
                elif (len(df.loc[df["word"] == "010" + sen[index_word - 1]].index) != 0) and (
                        word_before_2[0][1][2:8] == "000010" or word_before_2[0][1][3:9] == "000010" or
                        word_before_2[0][1][9:15] == "000010" or word_before_2[0][1][16:22] == "000010" or
                        word_before_2[0][1][23:29] == "000010" or word_before_2[0][1][30:36] == "000010"):
                    sen[index_word] = word[0]
                    sen.insert(index_word + 1, word[-1::])
                elif (len(df.loc[df["word"] == "011" + sen[index_word - 1]].index) != 0) and (
                        word_before_3[0][1][2:8] == "000010" or word_before_3[0][1][3:9] == "000010" or
                        word_before_3[0][1][9:15] == "000010" or word_before_3[0][1][16:22] == "000010" or
                        word_before_3[0][1][23:29] == "000010" or word_before_3[0][1][30:36] == "000010"):
                    sen[index_word] = word[0]
                    sen.insert(index_word + 1, word[-1::])
                elif (len(df.loc[df["word"] == "011" + sen[index_word - 1]].index) != 0) and (
                        word_before_3[0][1][2:8] == "000010" or word_before_3[0][1][3:9] == "000010" or
                        word_before_3[0][1][9:15] == "000010" or word_before_3[0][1][16:22] == "000010" or
                        word_before_3[0][1][23:29] == "000010" or word_before_3[0][1][30:36] == "000010"):
                    sen[index_word] = word[0]
                    sen.insert(index_word + 1, word[-1::])
                break
    except Exception:
            pass

    try:
         for word in sen:
             index_word =sen.index(word)
             df_word_1 = df.loc[df["word"] == "000" + word].values
             df_word_2 = df.loc[df["word"] == "001" + word].values
             df_word_3 = df.loc[df["word"] == "010" + word].values
             df_word_4 = df.loc[df["word"] == "011" + word].values
             df_word_5 = df.loc[df["word"] == "100" + word].values
             word_before_1 = df.loc[df["word"] == "000" + sen[index_word-1]].values
             word_before_2 = df.loc[df["word"] == "001" + sen[index_word-1]].values
             word_before_3 = df.loc[df["word"] == "010" + sen[index_word-1]].values
             word_before_4 = df.loc[df["word"] == "011" + sen[index_word-1]].values
             word_before_5 = df.loc[df["word"] == "100" + sen[index_word-1]].values
             if (len(df.loc[df["word"] == "000" + word].index) != 0) and (df_word_1[0][1][2:8] == "000010" or df_word_1[0][1][3:9] == "000010" or df_word_1[0][1][9:15] == "000010" or df_word_1[0][1][16:22] == "000010" or df_word_1[0][1][23:29] == "000010" or df_word_1[0][1][30:36] == "000010"):
                if (len(df.loc[df["word"] == "000" + sen[index_word-1]].index) != 0) and (word_before_1[0][1][2:8] == "000010" or word_before_1[0][1][3:9] == "000010" or word_before_1[0][1][9:15] == "000010" or word_before_1[0][1][16:22] == "000010" or word_before_1[0][1][23:29] == "000010" or word_before_1[0][1][30:36] == "000010"):
                    joint_list = sen[index_word:index_word+2]
                    word_combine = "".join(joint_list)
                    sen[index_word] = word_combine
                    sen.remove(sen[index_word+1])
                    m_1 = 1
                    index_insert_1 = index_word
                    if m_03 == 1 and index_insert_03 > index_insert_1:
                        index_insert_03 -= (len(joint_list) - 1)
                elif (len(df.loc[df["word"] == "001" + sen[index_word - 1]].index) != 0) and (
                        word_before_2[0][1][2:8] == "000010" or word_before_2[0][1][3:9] == "000010" or word_before_2[0][1][
                                                                                                        9:15] == "000010" or
                        word_before_2[0][1][16:22] == "000010" or word_before_2[0][1][23:29] == "000010" or word_before_2[0][1][
                                                                                                            30:36] == "000010"):
                    joint_list = sen[index_word:index_word + 2]
                    word_combine = "".join(joint_list)
                    sen[index_word] = word_combine
                    sen.remove(sen[index_word + 1])
                    m_1 = 1
                    index_insert_1 = index_word
                    if m_03 == 1 and index_insert_03 > index_insert_1:
                        index_insert_03 -= (len(joint_list) - 1)
                elif (len(df.loc[df["word"] == "010" + sen[index_word - 1]].index) != 0) and (
                        word_before_3[0][1][2:8] == "000010" or word_before_3[0][1][3:9] == "000010" or word_before_3[0][1][
                                                                                                        9:15] == "000010" or
                        word_before_3[0][1][16:22] == "000010" or word_before_3[0][1][23:29] == "000010" or word_before_3[0][1][
                                                                                                            30:36] == "000010"):
                    joint_list = sen[index_word:index_word + 2]
                    word_combine = "".join(joint_list)
                    sen[index_word] = word_combine
                    sen.remove(sen[index_word + 1])
                    m_1 = 1
                    index_insert_1 = index_word
                    if m_03 == 1 and index_insert_03 > index_insert_1:
                        index_insert_03 -= (len(joint_list) - 1)
                elif (len(df.loc[df["word"] == "011" + sen[index_word - 1]].index) != 0) and (
                        word_before_4[0][1][2:8] == "000010" or word_before_4[0][1][3:9] == "000010" or word_before_4[0][1][
                                                                                                        9:15] == "000010" or
                        word_before_4[0][1][16:22] == "000010" or word_before_4[0][1][23:29] == "000010" or word_before_4[0][1][
                                                                                                            30:36] == "000010"):
                    joint_list = sen[index_word:index_word + 2]
                    word_combine = "".join(joint_list)
                    sen[index_word] = word_combine
                    sen.remove(sen[index_word + 1])
                    m_1 = 1
                    index_insert_1 = index_word
                    if m_03 == 1 and index_insert_03 > index_insert_1:
                        index_insert_03 -= (len(joint_list) - 1)
                elif (len(df.loc[df["word"] == "100" + sen[index_word - 1]].index) != 0) and (word_before_5[0][1][2:8] == "000010" or word_before_5[0][1][3:9] == "000010" or word_before_5[0][1][9:15] == "000010" or
                        word_before_5[0][1][16:22] == "000010" or word_before_5[0][1][23:29] == "000010" or word_before_5[0][1][
                                                                                                            30:36] == "000010"):
                    joint_list = sen[index_word:index_word + 2]
                    word_combine = "".join(joint_list)
                    sen[index_word] = word_combine
                    sen.remove(sen[index_word + 1])
                    m_1 = 1
                    index_insert_1 = index_word
                    if m_03 == 1 and index_insert_03 > index_insert_1:
                        index_insert_03 -= (len(joint_list) - 1)
             elif (len(df.loc[df["word"] == "001" + word].index) != 0) and (
                    df_word_2[0][1][2:8] == "000010" or df_word_2[0][1][3:9] == "000010" or df_word_2[0][1][9:15] == "000010" or
                    df_word_2[0][1][16:22] == "000010" or df_word_2[0][1][23:29] == "000010" or df_word_2[0][1][
                                                                                                30:36] == "000010"):
                if (len(df.loc[df["word"] == "000" + sen[index_word - 1]].index) != 0) and (
                        word_before_1[0][1][2:8] == "000010" or word_before_1[0][1][3:9] == "000010" or word_before_1[0][1][
                                                                                                        9:15] == "000010" or
                        word_before_1[0][1][16:22] == "000010" or word_before_1[0][1][23:29] == "000010" or word_before_1[0][1][
                                                                                                            30:36] == "000010"):
                    joint_list = sen[index_word:index_word + 2]
                    word_combine = "".join(joint_list)
                    sen[index_word] = word_combine
                    sen.remove(sen[index_word + 1])
                    m_1 = 1
                    index_insert_1 = index_word
                    if m_03 == 1 and index_insert_03 > index_insert_1:
                        index_insert_03 -= (len(joint_list) - 1)
                elif (len(df.loc[df["word"] == "001" + sen[index_word - 1]].index) != 0) and (
                        word_before_2[0][1][2:8] == "000010" or word_before_2[0][1][3:9] == "000010" or word_before_2[0][1][
                                                                                                        9:15] == "000010" or
                        word_before_2[0][1][16:22] == "000010" or word_before_2[0][1][23:29] == "000010" or word_before_2[0][1][
                                                                                                            30:36] == "000010"):
                    joint_list = sen[index_word:index_word + 2]
                    word_combine = "".join(joint_list)
                    sen[index_word] = word_combine
                    sen.remove(sen[index_word + 1])
                    m_1 = 1
                    index_insert_1 = index_word
                    if m_03 == 1 and index_insert_03 > index_insert_1:
                        index_insert_03 -= (len(joint_list) - 1)
                elif (len(df.loc[df["word"] == "010" + sen[index_word - 1]].index) != 0) and (
                        word_before_3[0][1][2:8] == "000010" or word_before_3[0][1][3:9] == "000010" or word_before_3[0][1][
                                                                                                        9:15] == "000010" or
                        word_before_3[0][1][16:22] == "000010" or word_before_3[0][1][23:29] == "000010" or word_before_3[0][1][
                                                                                                            30:36] == "000010"):
                    joint_list = sen[index_word:index_word + 2]
                    word_combine = "".join(joint_list)
                    sen[index_word] = word_combine
                    sen.remove(sen[index_word + 1])
                    m_1 = 1
                    index_insert_1 = index_word
                    if m_03 == 1 and index_insert_03 > index_insert_1:
                        index_insert_03 -= (len(joint_list) - 1)
                elif (len(df.loc[df["word"] == "011" + sen[index_word - 1]].index) != 0) and (
                        word_before_4[0][1][2:8] == "000010" or word_before_4[0][1][3:9] == "000010" or word_before_4[0][1][
                                                                                                        9:15] == "000010" or
                        word_before_4[0][1][16:22] == "000010" or word_before_4[0][1][23:29] == "000010" or word_before_4[0][1][
                                                                                                            30:36] == "000010"):
                    joint_list = sen[index_word:index_word + 2]
                    word_combine = "".join(joint_list)
                    sen[index_word] = word_combine
                    sen.remove(sen[index_word + 1])
                    m_1 = 1
                    index_insert_1 = index_word
                    if m_03 == 1 and index_insert_03 > index_insert_1:
                        index_insert_03 -= (len(joint_list) - 1)
                elif (len(df.loc[df["word"] == "100" + sen[index_word - 1]].index) != 0) and (
                        word_before_5[0][1][2:8] == "000010" or word_before_5[0][1][3:9] == "000010" or word_before_5[0][1][
                                                                                                        9:15] == "000010" or
                        word_before_5[0][1][16:22] == "000010" or word_before_5[0][1][23:29] == "000010" or word_before_5[0][1][
                                                                                                            30:36] == "000010"):
                    joint_list = sen[index_word:index_word + 2]
                    word_combine = "".join(joint_list)
                    sen[index_word] = word_combine
                    sen.remove(sen[index_word + 1])
                    m_1 = 1
                    index_insert_1 = index_word
                    if m_03 == 1 and index_insert_03 > index_insert_1:
                        index_insert_03 -= (len(joint_list) - 1)
             elif (len(df.loc[df["word"] == "010" + word].index) != 0) and (
                    df_word_3[0][1][2:8] == "000010" or df_word_3[0][1][3:9] == "000010" or df_word_3[0][1][9:15] == "000010" or
                    df_word_3[0][1][16:22] == "000010" or df_word_3[0][1][23:29] == "000010" or df_word_3[0][1][
                                                                                                30:36] == "000010"):
                if (len(df.loc[df["word"] == "000" + sen[index_word - 1]].index) != 0) and (
                        word_before_1[0][1][2:8] == "000010" or word_before_1[0][1][3:9] == "000010" or word_before_1[0][1][
                                                                                                        9:15] == "000010" or
                        word_before_1[0][1][16:22] == "000010" or word_before_1[0][1][23:29] == "000010" or word_before_1[0][1][
                                                                                                            30:36] == "000010"):
                    joint_list = sen[index_word:index_word + 2]
                    word_combine = "".join(joint_list)
                    sen[index_word] = word_combine
                    sen.remove(sen[index_word + 1])
                    m_1 = 1
                    index_insert_1 = index_word
                    if m_03 == 1 and index_insert_03 > index_insert_1:
                        index_insert_03 -= (len(joint_list) - 1)
                elif (len(df.loc[df["word"] == "001" + sen[index_word - 1]].index) != 0) and (
                        word_before_2[0][1][2:8] == "000010" or word_before_2[0][1][3:9] == "000010" or word_before_2[0][1][
                                                                                                        9:15] == "000010" or
                        word_before_2[0][1][16:22] == "000010" or word_before_2[0][1][23:29] == "000010" or word_before_2[0][1][
                                                                                                            30:36] == "000010"):
                    joint_list = sen[index_word:index_word + 2]
                    word_combine = "".join(joint_list)
                    sen[index_word] = word_combine
                    sen.remove(sen[index_word + 1])
                    m_1 = 1
                    index_insert_1 = index_word
                    if m_03 == 1 and index_insert_03 > index_insert_1:
                        index_insert_03 -= (len(joint_list) - 1)
                elif (len(df.loc[df["word"] == "010" + sen[index_word - 1]].index) != 0) and (
                        word_before_3[0][1][2:8] == "000010" or word_before_3[0][1][3:9] == "000010" or word_before_3[0][1][
                                                                                                        9:15] == "000010" or
                        word_before_3[0][1][16:22] == "000010" or word_before_3[0][1][23:29] == "000010" or word_before_3[0][1][
                                                                                                            30:36] == "000010"):
                    joint_list = sen[index_word:index_word + 2]
                    word_combine = "".join(joint_list)
                    sen[index_word] = word_combine
                    sen.remove(sen[index_word + 1])
                    m_1 = 1
                    index_insert_1 = index_word
                    if m_03 == 1 and index_insert_03 > index_insert_1:
                        index_insert_03 -= (len(joint_list) - 1)
                elif (len(df.loc[df["word"] == "011" + sen[index_word - 1]].index) != 0) and (
                        word_before_4[0][1][2:8] == "000010" or word_before_4[0][1][3:9] == "000010" or word_before_4[0][1][
                                                                                                        9:15] == "000010" or
                        word_before_4[0][1][16:22] == "000010" or word_before_4[0][1][23:29] == "000010" or word_before_4[0][1][
                                                                                                            30:36] == "000010"):
                    joint_list = sen[index_word:index_word + 2]
                    word_combine = "".join(joint_list)
                    sen[index_word] = word_combine
                    sen.remove(sen[index_word + 1])
                    m_1 = 1
                    index_insert_1 = index_word
                    if m_03 == 1 and index_insert_03 > index_insert_1:
                        index_insert_03 -= (len(joint_list) - 1)
                elif (len(df.loc[df["word"] == "100" + sen[index_word - 1]].index) != 0) and (
                        word_before_5[0][1][2:8] == "000010" or word_before_5[0][1][3:9] == "000010" or word_before_5[0][1][
                                                                                                        9:15] == "000010" or
                        word_before_5[0][1][16:22] == "000010" or word_before_5[0][1][23:29] == "000010" or word_before_5[0][1][
                                                                                                            30:36] == "000010"):
                    joint_list = sen[index_word:index_word + 2]
                    word_combine = "".join(joint_list)
                    sen[index_word] = word_combine
                    sen.remove(sen[index_word + 1])
                    m_1 = 1
                    index_insert_1 = index_word
                    if m_03 == 1 and index_insert_03 > index_insert_1:
                        index_insert_03 -= (len(joint_list) - 1)
             elif (len(df.loc[df["word"] == "011" + word].index) != 0) and (
                    df_word_4[0][1][2:8] == "000010" or df_word_4[0][1][3:9] == "000010" or df_word_4[0][1][9:15] == "000010" or
                    df_word_4[0][1][16:22] == "000010" or df_word_4[0][1][23:29] == "000010" or df_word_4[0][1][
                                                                                                30:36] == "000010"):
                if (len(df.loc[df["word"] == "000" + sen[index_word - 1]].index) != 0) and (
                        word_before_1[0][1][2:8] == "000010" or word_before_1[0][1][3:9] == "000010" or word_before_1[0][1][
                                                                                                        9:15] == "000010" or
                        word_before_1[0][1][16:22] == "000010" or word_before_1[0][1][23:29] == "000010" or word_before_1[0][1][
                                                                                                            30:36] == "000010"):
                    joint_list = sen[index_word:index_word + 2]
                    word_combine = "".join(joint_list)
                    sen[index_word] = word_combine
                    sen.remove(sen[index_word + 1])
                    m_1 = 1
                    index_insert_1 = index_word
                    if m_03 == 1 and index_insert_03 > index_insert_1:
                        index_insert_03 -= (len(joint_list) - 1)
                elif (len(df.loc[df["word"] == "001" + sen[index_word - 1]].index) != 0) and (
                        word_before_2[0][1][2:8] == "000010" or word_before_2[0][1][3:9] == "000010" or word_before_2[0][1][
                                                                                                        9:15] == "000010" or
                        word_before_2[0][1][16:22] == "000010" or word_before_2[0][1][23:29] == "000010" or word_before_2[0][1][
                                                                                                            30:36] == "000010"):
                    joint_list = sen[index_word:index_word + 2]
                    word_combine = "".join(joint_list)
                    sen[index_word] = word_combine
                    sen.remove(sen[index_word + 1])
                    m_1 = 1
                    index_insert_1 = index_word
                    if m_03 == 1 and index_insert_03 > index_insert_1:
                        index_insert_03 -= (len(joint_list) - 1)
                elif (len(df.loc[df["word"] == "010" + sen[index_word - 1]].index) != 0) and (
                        word_before_3[0][1][2:8] == "000010" or word_before_3[0][1][3:9] == "000010" or word_before_3[0][1][
                                                                                                        9:15] == "000010" or
                        word_before_3[0][1][16:22] == "000010" or word_before_3[0][1][23:29] == "000010" or word_before_3[0][1][
                                                                                                            30:36] == "000010"):
                    joint_list = sen[index_word:index_word + 2]
                    word_combine = "".join(joint_list)
                    sen[index_word] = word_combine
                    sen.remove(sen[index_word + 1])
                    m_1 = 1
                    index_insert_1 = index_word
                    if m_03 == 1 and index_insert_03 > index_insert_1:
                        index_insert_03 -= (len(joint_list) - 1)
                elif (len(df.loc[df["word"] == "011" + sen[index_word - 1]].index) != 0) and (
                        word_before_4[0][1][2:8] == "000010" or word_before_4[0][1][3:9] == "000010" or word_before_4[0][1][
                                                                                                        9:15] == "000010" or
                        word_before_4[0][1][16:22] == "000010" or word_before_4[0][1][23:29] == "000010" or word_before_4[0][1][
                                                                                                            30:36] == "000010"):
                    joint_list = sen[index_word:index_word + 2]
                    word_combine = "".join(joint_list)
                    sen[index_word] = word_combine
                    sen.remove(sen[index_word + 1])
                    m_1 = 1
                    index_insert_1 = index_word
                    if m_03 == 1 and index_insert_03 > index_insert_1:
                        index_insert_03 -= (len(joint_list) - 1)
                elif (len(df.loc[df["word"] == "100" + sen[index_word - 1]].index) != 0) and (
                        word_before_5[0][1][2:8] == "000010" or word_before_5[0][1][3:9] == "000010" or word_before_5[0][1][
                                                                                                        9:15] == "000010" or
                        word_before_5[0][1][16:22] == "000010" or word_before_5[0][1][23:29] == "000010" or word_before_5[0][1][
                                                                                                            30:36] == "000010"):
                    joint_list = sen[index_word:index_word + 2]
                    word_combine = "".join(joint_list)
                    sen[index_word] = word_combine
                    sen.remove(sen[index_word + 1])
                    m_1 = 1
                    index_insert_1 = index_word
                    if m_03 == 1 and index_insert_03 > index_insert_1:
                        index_insert_03 -= (len(joint_list) - 1)
             elif (len(df.loc[df["word"] == "100" + word].index) != 0) and (
                    df_word_5[0][1][2:8] == "000010" or df_word_5[0][1][3:9] == "000010" or df_word_5[0][1][9:15] == "000010" or
                    df_word_5[0][1][16:22] == "000010" or df_word_5[0][1][23:29] == "000010" or df_word_5[0][1][
                                                                                                30:36] == "000010"):
                if (len(df.loc[df["word"] == "000" + sen[index_word - 1]].index) != 0) and (
                        word_before_1[0][1][2:8] == "000010" or word_before_1[0][1][3:9] == "000010" or word_before_1[0][1][
                                                                                                        9:15] == "000010" or
                        word_before_1[0][1][16:22] == "000010" or word_before_1[0][1][23:29] == "000010" or word_before_1[0][1][
                                                                                                            30:36] == "000010"):
                    joint_list = sen[index_word:index_word + 2]
                    word_combine = "".join(joint_list)
                    sen[index_word] = word_combine
                    sen.remove(sen[index_word + 1])
                    m_1 = 1
                    index_insert_1 = index_word
                    if m_03 == 1 and index_insert_03 > index_insert_1:
                        index_insert_03 -= (len(joint_list) - 1)
                elif (len(df.loc[df["word"] == "001" + sen[index_word - 1]].index) != 0) and (
                        word_before_2[0][1][2:8] == "000010" or word_before_2[0][1][3:9] == "000010" or word_before_2[0][1][
                                                                                                        9:15] == "000010" or
                        word_before_2[0][1][16:22] == "000010" or word_before_2[0][1][23:29] == "000010" or word_before_2[0][1][
                                                                                                            30:36] == "000010"):
                    joint_list = sen[index_word:index_word + 2]
                    word_combine = "".join(joint_list)
                    sen[index_word] = word_combine
                    sen.remove(sen[index_word + 1])
                    m_1 = 1
                    index_insert_1 = index_word
                    if m_03 == 1 and index_insert_03 > index_insert_1:
                        index_insert_03 -= (len(joint_list) - 1)
                elif (len(df.loc[df["word"] == "010" + sen[index_word - 1]].index) != 0) and (
                        word_before_3[0][1][2:8] == "000010" or word_before_3[0][1][3:9] == "000010" or word_before_3[0][1][
                                                                                                        9:15] == "000010" or
                        word_before_3[0][1][16:22] == "000010" or word_before_3[0][1][23:29] == "000010" or word_before_3[0][1][
                                                                                                            30:36] == "000010"):
                    joint_list = sen[index_word:index_word + 2]
                    word_combine = "".join(joint_list)
                    sen[index_word] = word_combine
                    sen.remove(sen[index_word + 1])
                    m_1 = 1
                    index_insert_1 = index_word
                    if m_03 == 1 and index_insert_03 > index_insert_1:
                        index_insert_03 -= (len(joint_list) - 1)
                elif (len(df.loc[df["word"] == "011" + sen[index_word - 1]].index) != 0) and (
                        word_before_4[0][1][2:8] == "000010" or word_before_4[0][1][3:9] == "000010" or word_before_4[0][1][
                                                                                                        9:15] == "000010" or
                        word_before_4[0][1][16:22] == "000010" or word_before_4[0][1][23:29] == "000010" or word_before_4[0][1][
                                                                                                            30:36] == "000010"):
                    joint_list = sen[index_word:index_word + 2]
                    word_combine = "".join(joint_list)
                    sen[index_word] = word_combine
                    sen.remove(sen[index_word + 1])
                    m_1 = 1
                    index_insert_1 = index_word
                    if m_03 == 1 and index_insert_03 > index_insert_1:
                        index_insert_03 -= (len(joint_list) - 1)
                elif (len(df.loc[df["word"] == "100" + sen[index_word - 1]].index) != 0) and (
                        word_before_5[0][1][2:8] == "000010" or word_before_5[0][1][3:9] == "000010" or word_before_5[0][1][
                                                                                                        9:15] == "000010" or
                        word_before_5[0][1][16:22] == "000010" or word_before_5[0][1][23:29] == "000010" or word_before_5[0][1][
                                                                                                            30:36] == "000010"):
                    joint_list = sen[index_word:index_word + 2]
                    word_combine = "".join(joint_list)
                    sen[index_word] = word_combine
                    sen.remove(sen[index_word + 1])
                    m_1 = 1
                    index_insert_1 = index_word
                    if m_03 == 1 and index_insert_03 > index_insert_1:
                        index_insert_03 -= (len(joint_list) - 1)
    except Exception:
        pass

    mark_1 = "1 000010 000000 000000 000000 000000"

    #print("1sen_after:", sen)

    # 2. 拆分名、时间方位词
    #(1)名词是4位
    try:
        for word in sen:
            df_word = df.loc[df["word"] == "000" + word[0:4]].values
            if (word not in YP_words and word[1:-1] not in YP_words) and (len(df.loc[df["word"] == "000" + word[0:4]].index) != 0) and (df_word[0][1][2:8] == "000111" or df_word[0][1][9:15] == "000111" or df_word[0][1][16:22] == "000111" or df_word[0][1][
                                                                                                        23:29] == "000111" or
                    df_word[0][1][30:36] == "000111") and (len(df.loc[df["word"] == "000" + word].index) == 0):
                noun_pt.append(word)
    except Exception:
        pass

    try:
        for word in noun_pt:
            index_word = sen.index(word)
            df_word = df.loc[df["word"] == "000" + word[-4::]].values
            df_word_1 = df.loc[df["word"] == "000" + word[-3::]].values
            df_word_2 = df.loc[df["word"] == "000" + word[-2::]].values
            df_word_3 = df.loc[df["word"] == "000" + word[-1]].values
            if (len(df.loc[df["word"] == "000" + word[-4::]].index) != 0) and (
                    df_word[0][1][2:8] in ["110000", "111011"] or df_word[0][1][9:15] in ["110000", "111011"] or df_word[0][1][16:22] in [
                "110000", "111011"] or df_word[0][1][23:29] in ["110000", "111011"] or df_word[0][1][30:36] in ["110000",
                                                                                                  "111011"]) and (
                    word[0:4] != word[-4::]) and (word not in database_words):
                sen[index_word] = word[0:4]
                sen.insert(index_word + 1, word[-4::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-3::]].index) != 0) and (
                    df_word_1[0][1][2:8] in ["110000", "111011"] or df_word_1[0][1][9:15] in ["110000", "111011"] or df_word_1[0][1][16:22] in [
                "110000", "111011"] or df_word_1[0][1][23:29] in ["110000", "111011"] or df_word_1[0][1][30:36] in ["110000",
                                                                                                  "111011"]) and (
                    word[0:4] != word[-3::]) and (word not in database_words):
                sen[index_word] = word[0:4]
                sen.insert(index_word + 1, word[-3::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-2::]].index) != 0) and (
                    df_word_2[0][1][2:8] in ["110000", "111011"] or df_word_2[0][1][9:15] in ["110000", "111011"] or df_word_2[0][1][16:22] in [
                "110000", "111011"] or df_word_2[0][1][23:29] in ["110000", "111011"] or df_word_2[0][1][30:36] in ["110000",
                                                                                                  "111011"]) and (
                    word[0:4] != word[-2::]) and (word not in database_words):
                sen[index_word] = word[0:4]
                sen.insert(index_word + 1, word[-2::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-1]].index) != 0) and (
                    df_word_3[0][1][2:8] in ["110000", "111011"] or df_word_3[0][1][9:15] in ["110000", "111011"] or df_word_3[0][1][16:22] in [
                "110000", "111011"] or df_word_3[0][1][23:29] in ["110000", "111011"] or df_word_3[0][1][30:36] in ["110000",
                                                                                                  "111011"]) and (
                    word[0:4] != word[-1::]) and (word not in database_words):
                sen[index_word] = word[0:4]
                sen.insert(index_word + 1, word[-1])
                break
    except Exception:
        pass

    noun_pt = []

    # (2)名词是3位
    try:
        for word in sen:
            df_word = df.loc[df["word"] == "000" + word[0:3]].values
            if (word not in YP_words and word[1:-1] not in YP_words) and (len(df.loc[df["word"] == "000" + word[0:3]].index) != 0) and (df_word[0][1][2:8] == "000111" or df_word[0][1][9:15] == "000111" or df_word[0][1][16:22] == "000111" or df_word[0][1][23:29] == "000111" or df_word[0][1][30:36] == "000111") and (word not in database_words):
                noun_pt.append(word)
    except Exception:
        pass

    try:
        for word in noun_pt:
            index_word = sen.index(word)
            df_word = df.loc[df["word"] == "000" + word[-4::]].values
            df_word_1 = df.loc[df["word"] == "000" + word[-3::]].values
            df_word_2 = df.loc[df["word"] == "000" + word[-2::]].values
            df_word_3 = df.loc[df["word"] == "000" + word[-1]].values
            if (len(df.loc[df["word"] == "000" + word[-4::]].index) != 0) and (df_word[0][1][2:8] in ["110000", "111011"] or df_word[0][1][9:15] in ["110000", "111011"] or df_word[0][1][16:22] in ["110000", "111011"] or df_word[0][1][23:29] in ["110000", "111011"] or df_word[0][1][30:36] in ["110000", "111011"]) and (word[0:3] != word[-4::]) and (word not in database_words):
                sen[index_word] = word[0:3]
                sen.insert(index_word+1, word[-1])
                break
            elif (len(df.loc[df["word"] == "000" + word[-3::]].index) != 0) and (df_word_1[0][1][2:8] in ["110000", "111011"] or df_word_1[0][1][9:15] in ["110000", "111011"] or df_word_1[0][1][16:22] in ["110000", "111011"] or df_word_1[0][1][23:29] in ["110000", "111011"] or df_word_1[0][1][30:36] in ["110000", "111011"]) and (word[0:3] != word[-3::]) and (word not in database_words):
                sen[index_word] = word[0:3]
                sen.insert(index_word+1, word[-2::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-2::]].index) != 0) and (df_word_2[0][1][2:8] in ["110000", "111011"] or df_word_2[0][1][9:15] in ["110000", "111011"] or df_word_2[0][1][16:22] in ["110000", "111011"] or df_word_2[0][1][23:29] in ["110000", "111011"] or df_word_2[0][1][30:36] in ["110000", "111011"]) and (word[0:3] != word[-2::]) and (word not in database_words):
                sen[index_word] = word[0:3]
                sen.insert(index_word+1, word[-3::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-1]].index) != 0) and (df_word_3[0][1][2:8] in ["110000", "111011"] or df_word_3[0][1][9:15] in ["110000", "111011"] or df_word_3[0][1][16:22] in ["110000", "111011"] or df_word_3[0][1][23:29] in ["110000", "111011"] or df_word_3[0][1][30:36] in ["110000", "111011"]) and (word[0:3] != word[-1::]) and (word not in database_words):
                sen[index_word] = word[0:3]
                sen.insert(index_word+1, word[-4::])
                break
    except Exception:
        pass

    noun_pt = []

    #print("22sen_after:", sen)

    # (3)名词是2位
    try:
        for word in sen:
            #print("word[0:2]", word[0:2])
            for key in database_marks:
                if (word not in YP_words and word[1:-1] not in YP_words) and (word[0:2] == key[0][3::]) and (key[1][2:8] == "000111" or key[1][9:15] == "000111" or key[1][16:22] == "000111" or key[1][23:29] == "000111" or key[1][30:36] == "000111") and (word not in database_words):
                    noun_pt.append(word)
    except Exception:
        pass

    try:
        for word in noun_pt:
            index_word = sen.index(word)
            df_word = df.loc[df["word"] == "000" + word[-4::]].values
            df_word_1 = df.loc[df["word"] == "000" + word[-3::]].values
            df_word_2 = df.loc[df["word"] == "000" + word[-2::]].values
            df_word_3 = df.loc[df["word"] == "000" + word[-1]].values
            if (len(df.loc[df["word"] == "000" + word[-4::]].index) != 0) and (df_word[0][1][2:8] in ["110000", "111011"] or df_word[0][1][9:15] in ["110000", "111011"] or df_word[0][1][16:22] in ["110000", "111011"] or df_word[0][1][23:29] in ["110000", "111011"] or df_word[0][1][30:36] in ["110000", "111011"]) and (word[0:2] != word[-4::]) and (word not in database_words):
                sen[index_word] = word[0:2]
                sen.insert(index_word + 1, word[-4::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-3::]].index) != 0) and (df_word_1[0][1][2:8] in ["110000", "111011"] or df_word_1[0][1][9:15] in ["110000", "111011"] or df_word_1[0][1][16:22] in ["110000", "111011"] or df_word_1[0][1][23:29] in ["110000", "111011"] or df_word_1[0][1][30:36] in ["110000", "111011"]) and (word[0:2] != word[-3::]) and (word not in database_words):
                sen[index_word] = word[0:2]
                sen.insert(index_word + 1, word[-3::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-2::]].index) != 0) and (df_word_2[0][1][2:8] in ["110000", "111011"] or df_word_2[0][1][9:15] in ["110000", "111011"] or df_word_2[0][1][16:22] in ["110000", "111011"] or df_word_2[0][1][23:29] in ["110000", "111011"] or df_word_2[0][1][30:36] in ["110000", "111011"]) and (word[0:2] != word[-2::]) and (word not in database_words):
                sen[index_word] = word[0:2]
                sen.insert(index_word + 1, word[-2::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-1]].index) != 0) and (df_word_3[0][1][2:8] in ["110000", "111011"] or df_word_3[0][1][9:15] in ["110000", "111011"] or df_word_3[0][1][16:22] in ["110000", "111011"] or df_word_3[0][1][23:29] in ["110000", "111011"] or df_word_3[0][1][30:36] in ["110000", "111011"]) and (word[0:2] != word[-1]) and (word not in database_words):
                sen[index_word] = word[0:2]
                sen.insert(index_word + 1, word[-1])
                break
    except Exception:
        pass

    noun_pt = []

    #print("23sen_after:", sen)

    # (4)名词是1位
    try:
        for word in sen:
            df_word = df.loc[df["word"] == "000" + word[0]].values
            if (word not in YP_words and word[1:-1] not in YP_words) and (len(df.loc[df["word"] == "000" + word[0]].index) != 0) and (word[0] != "首") and (df_word[0][1][2:8] == "000111" or df_word[0][1][9:15] == "000111" or df_word[0][1][16:22] == "000111" or df_word[0][1][23:29] == "000111" or df_word[0][1][30:36] == "000111") and (word not in database_words):
                noun_pt.append(word)
    except Exception:
        pass

    try:
        for word in noun_pt:
            index_word = sen.index(word)
            df_word = df.loc[df["word"] == "000" + word[-4::]].values
            df_word_1 = df.loc[df["word"] == "000" + word[-3::]].values
            df_word_2 = df.loc[df["word"] == "000" + word[-2::]].values
            df_word_3 = df.loc[df["word"] == "000" + word[-1]].values
            if (len(df.loc[df["word"] == "000" + word[-4::]].index) != 0) and (df_word[0][1][2:8] in ["110000", "111011"] or df_word[0][1][9:15] in ["110000", "111011"] or df_word[0][1][16:22] == "110000" or df_word[0][1][23:29] == "110000" or df_word[0][1][30:36] == "110000") and (word[0] != word[-4::]) and (word not in database_words):
                sen[index_word] = word[0]
                sen.insert(index_word + 1, word[-4::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-3::]].index) != 0) and (df_word_1[0][1][2:8] in ["110000", "111011"] or df_word_1[0][1][9:15] in ["110000", "111011"] or df_word_1[0][1][16:22] in ["110000", "111011"] or df_word_1[0][1][23:29] in ["110000", "111011"] or df_word_1[0][1][30:36] in ["110000", "111011"]) and (word[0] != word[-3::]) and (word not in database_words):
                sen[index_word] = word[0]
                sen.insert(index_word + 1, word[-3::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-2::]].index) != 0) and (df_word_2[0][1][2:8] in ["110000", "111011"] or df_word_2[0][1][9:15] in ["110000", "111011"] or df_word_2[0][1][16:22] in ["110000", "111011"] or df_word_2[0][1][23:29] in ["110000", "111011"] or df_word_2[0][1][30:36] in ["110000", "111011"]) and (word[0] != word[-2::]) and (word not in database_words):
                sen[index_word] = word[0]
                sen.insert(index_word + 1, word[-2::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-1]].index) != 0) and (df_word_3[0][1][2:8] in ["110000", "111011"] or df_word_3[0][1][9:15] in ["110000", "111011"] or df_word_3[0][1][16:22] in ["110000", "111011"] or df_word_3[0][1][23:29] in ["110000", "111011"] or df_word_3[0][1][30:36] in ["110000", "111011"]) and (word[0] != word[-1]) and (word not in database_words):
                sen[index_word] = word[0]
                sen.insert(index_word + 1, word[-1])
                break
    except Exception:
        pass

    noun_pt = []

    #print("24", sen)

    # 3. 拆分代词、动词
    # (1)代词是4位
    try:
        for word in sen:
            df_word = df.loc[df["word"] == "000" + word[0:4]].values
            if (len(df.loc[df["word"] == "000" + word[0:4]].index) != 0) and (df_word[0][1][2:8] == "000100" or df_word[0][1][9:15] == "000100" or df_word[0][1][16:22] == "000100" or df_word[0][1][23:29] == "000100" or df_word[0][1][30:36] == "000100") and (word not in database_words):
                proun_v.append(word)
    except Exception:
        pass

    try:
        for word in proun_v:
            index_word = sen.index(word)
            df_word = df.loc[df["word"] == "000" + word[-4::]].values
            df_word_1 = df.loc[df["word"] == "000" + word[-3::]].values
            df_word_2 = df.loc[df["word"] == "000" + word[-2::]].values
            df_word_3 = df.loc[df["word"] == "000" + word[-1]].values
            if (len(df.loc[df["word"] == "000" + word[-4::]].index) != 0) and (df_word[0][1][2:8] in ["000001", "000101"] or df_word[0][1][9:15] in ["000001", "000101"] or df_word[0][1][16:22] in ["000001", "000101"] or df_word[0][1][23:29] in ["000001", "000101"] or df_word[0][1][30:36] in ["000001", "000101"]) and (word[0:4] != word[-4::]):
                sen[index_word] = word[0]
                sen.insert(index_word + 1, word[-4::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-3::]].index) != 0) and (df_word_1[0][1][2:8] in ["000001", "000101"] or df_word_1[0][1][9:15] in ["000001", "000101"] or df_word_1[0][1][16:22] in ["000001", "000101"] or df_word_1[0][1][23:29] in ["000001", "000101"] or df_word_1[0][1][30:36] in ["000001", "000101"]) and (word[0:4] != word[-3::]):
                sen[index_word] = word[0:4]
                sen.insert(index_word + 1, word[-3::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-2::]].index) != 0) and (df_word_2[0][1][2:8] in ["000001", "000101"] or df_word_2[0][1][9:15] in ["000001", "000101"] or df_word_2[0][1][16:22] in ["000001", "000101"] or df_word_2[0][1][23:29] in ["000001", "000101"] or df_word_2[0][1][30:36] in ["000001", "000101"]) and (word[0:4] != word[-2::]):
                sen[index_word] = word[0:4]
                sen.insert(index_word + 1, word[-2::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-1]].index) != 0) and (df_word_3[0][1][2:8] in ["000001", "000101"] or df_word_3[0][1][9:15] in ["000001", "000101"] or df_word_3[0][1][16:22] in ["000001", "000101"] or df_word_3[0][1][23:29] in ["000001", "000101"] or df_word_3[0][1][30:36] in ["000001", "000101"]) and (word[0:4] != word[-1]):
                sen[index_word] = word[0:4]
                sen.insert(index_word + 1, word[-1])
                break
    except Exception:
        pass

    proun_pt = []

    #print("3sen_after:", sen)

    # (2)代词是3位
    try:
        for word in sen:
            df_word = df.loc[df["word"] == "000" + word[0:3]].values
            if (df_word) and (df_word[0][1][2:8] == "000100" or df_word[0][1][9:15] == "000100" or df_word[0][1][16:22] == "000100" or df_word[0][1][23:29] == "000100" or df_word[0][1][30:36] == "000100") and (word not in database_words):
                proun_v.append(word)
    except Exception:
        pass

    try:
        for word in proun_v:
            index_word = sen.index(word)
            df_word = df.loc[df["word"] == "000" + word[-4::]].values
            df_word_1 = df.loc[df["word"] == "000" + word[-3::]].values
            df_word_2 = df.loc[df["word"] == "000" + word[-2::]].values
            df_word_3 = df.loc[df["word"] == "000" + word[-1]].values
            if (len(df.loc[df["word"] == "000" + word[-4::]].index) != 0)  and (df_word[0][1][2:8] in ["000001", "000101"] or df_word[0][1][9:15] in ["000001", "000101"] or df_word[0][1][16:22] in ["000001", "000101"] or
                                           df_word[0][1][23:29] in ["000001", "000101"] or df_word[0][1][30:36] in ["000001", "000101"]) and (word[0:3] != word[-1]):
                sen[index_word] = word[0:3]
                sen.insert(index_word + 1, word[-1])
                break
            elif (len(df.loc[df["word"] == "000" + word[-3::]].index) != 0) and (df_word_1[0][1][2:8] in ["000001", "000101"] or df_word_1[0][1][9:15] in ["000001", "000101"] or df_word_1[0][1][16:22] in ["000001", "000101"] or df_word_1[0][1][23:29] in ["000001", "000101"] or df_word_1[0][1][30:36] in ["000001", "000101"]) and (word[0:3] != word[-3::]):
                sen[index_word] = word[0:3]
                sen.insert(index_word + 1, word[-2::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-2::]].index) != 0) and (df_word_2[0][1][2:8] in ["000001", "000101"] or df_word_2[0][1][9:15] in ["000001", "000101"] or df_word_2[0][1][16:22] in ["000001", "000101"] or df_word_2[0][1][23:29] in ["000001", "000101"] or df_word_2[0][1][30:36] in ["000001", "000101"]) and (word[0:3] != word[-2::]):
                sen[index_word] = word[0:3]
                sen.insert(index_word + 1, word[-3::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-1]].index) != 0) and (df_word_3[0][1][2:8] in ["000001", "000101"] or df_word_3[0][1][9:15] in ["000001", "000101"] or df_word_3[0][1][16:22] in ["000001", "000101"] or df_word_3[0][1][23:29] in ["000001", "000101"] or df_word_3[0][1][30:36] in ["000001", "000101"]) and (word[0:3] != word[-1]):
                sen[index_word] = word[0:3]
                sen.insert(index_word + 1, word[-4::])
                break
    except Exception:
        pass

    proun_pt = []

    #print("32sen_after:", sen)

    # (3)代词是2位
    try:
        for word in sen:
            df_word = df.loc[df["word"] == "000" + word].values
            if (len(df.loc[df["word"] == "000" + word].index) != 0) and (df_word[0][1][2:8] == "000100" or df_word[0][1][9:15] == "000100" or df_word[0][1][16:22] == "000100" or df_word[0][1][23:29] == "000100" or df_word[0][1][30:36] == "000100") and (word not in database_words):
                proun_v.append(word)
    except Exception:
        pass

    try:
        for word in proun_v:
            index_word = sen.index(word)
            df_word = df.loc[df["word"] == "000" + word[-4::]].values
            df_word_1 = df.loc[df["word"] == "000" + word[-3::]].values
            df_word_2 = df.loc[df["word"] == "000" + word[-2::]].values
            df_word_3 = df.loc[df["word"] == "000" + word[-1]].values
            if (len(df.loc[df["word"] == "000" + word[-4::]].index) != 0) and (df_word[0][1][2:8] in ["000001", "000101"] or df_word[0][1][9:15] in ["000001", "000101"] or df_word[0][1][16:22] in ["000001", "000101"] or df_word[0][1][23:29] in ["000001", "000101"] or df_word[0][1][30:36] in ["000001", "000101"]) and (word[0:2] != word[-4::]):
                sen[index_word] = word[0:2]
                sen.insert(index_word + 1, word[-4::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-3::]].index) != 0) and (df_word_1[0][1][2:8] in ["000001", "000101"] or df_word_1[0][1][9:15] in ["000001", "000101"] or df_word_1[0][1][16:22] in ["000001", "000101"] or df_word_1[0][1][23:29] in ["000001", "000101"] or df_word_1[0][1][30:36] in ["000001", "000101"]) and (word[0:2] != word[-3::]):
                sen[index_word] = word[0:2]
                sen.insert(index_word + 1, word[-3::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-2::]].index) != 0) and (df_word_2[0][1][2:8] in ["000001", "000101"] or df_word_2[0][1][9:15] in ["000001", "000101"] or df_word_2[0][1][16:22] in ["000001", "000101"] or df_word_2[0][1][23:29] in ["000001", "000101"] or df_word_2[0][1][30:36] in ["000001", "000101"]) and (word[0:2] != word[-2::]):
                sen[index_word] = word[0:2]
                sen.insert(index_word + 1, word[-2::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-1]].index) != 0) and (df_word_3[0][1][2:8] in ["000001", "000101"] or df_word_3[0][1][9:15] in ["000001", "000101"] or df_word_3[0][1][16:22] in ["000001", "000101"] or df_word_3[0][1][23:29] in ["000001", "000101"] or df_word_3[0][1][30:36] in ["000001", "000101"]) and (word[0:2] != word[-1]):
                sen[index_word] = word[0:2]
                sen.insert(index_word + 1, word[-1])
                break
    except Exception:
        pass

    proun_pt = []

    #print("33sen_after:", sen)

    # (4)代词是1位
    try:
        for word in sen:
            df_word = df.loc[df["word"] == "000" + word[0]].values
            if (len(df.loc[df["word"] == "000" + word[0]].index) != 0) and (df_word[0][1][2:8] == "000100" or df_word[0][1][9:15] == "000100" or df_word[0][1][16:22] == "000100" or df_word[0][1][23:29] == "000100" or df_word[0][1][30:36] == "000100") and (word not in database_words):
                proun_v.append(word)
    except Exception:
        pass

    try:
        for word in proun_v:
            index_word = sen.index(word)
            df_word = df.loc[df["word"] == "000" + word[-4::]].values
            df_word_1 = df.loc[df["word"] == "000" + word[-3::]].values
            df_word_2 = df.loc[df["word"] == "000" + word[-2::]].values
            df_word_3 = df.loc[df["word"] == "000" + word[-1]].values
            if (len(df.loc[df["word"] == "000" + word[-4::]].index) != 0) and (df_word[0][1][2:8] in ["000001", "000101"] or df_word[0][1][9:15] in ["000001", "000101"] or df_word[0][1][16:22] in ["000001", "000101"] or df_word[0][1][23:29] in ["000001", "000101"] or df_word[0][1][30:36] in ["000001", "000101"]) and (word[0] != word[-4::]):
                sen[index_word] = word[0]
                sen.insert(index_word + 1, word[-4::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-3::]].index) != 0) and (df_word_1[0][1][2:8] in ["000001", "000101"] or df_word_1[0][1][9:15] in ["000001", "000101"] or df_word_1[0][1][ 16:22] in ["000001", "000101"] or df_word_1[0][1][23:29] in ["000001", "000101"] or df_word_1[0][1][30:36] in ["000001", "000101"]) and (word[0] != word[-3::]):
                sen[index_word] = word[0]
                sen.insert(index_word + 1, word[-3::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-2::]].index) != 0) and (df_word_2[0][1][2:8] in ["000001", "000101"] or df_word_2[0][1][9:15] in ["000001", "000101"] or df_word_2[0][1][16:22] in ["000001", "000101"] or df_word_2[0][1][23:29] in ["000001", "000101"] or df_word_2[0][1][30:36] in ["000001", "000101"]) and (word[0] != word[-2::]):
                sen[index_word] = word[0]
                sen.insert(index_word + 1, word[-2::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-1]].index) != 0)  and (df_word_3[0][1][2:8] in ["000001", "000101"] or df_word_3[0][1][9:15] in ["000001", "000101"] or df_word_3[0][1][16:22] in ["000001", "000101"] or df_word_3[0][1][23:29] in ["000001", "000101"] or df_word_3[0][1][30:36] in ["000001", "000101"]) and (word[0] != word[-1]):
                sen[index_word] = word[0]
                sen.insert(index_word + 1, word[-1])
                #print("4")
                break
    except Exception:
        pass

    proun_v = []

    #print("34", sen)

    # 4. 拆分代词、名词
    # (1)代词是2位
    try:
        for word in sen:
            df_word = df.loc[df["word"] == "000" + word[0:2]].values
            if (word not in YP_uncut_words and word[1:-1] not in YP_uncut_words) and (len(df.loc[df["word"] == "000" + word[0:2]].index) != 0) and (df_word[0][1][2:8] == "000100" or df_word[0][1][9:15] == "000100" or df_word[0][1][16:22] == "000100" or df_word[0][1][23:29] == "000100" or df_word[0][1][30:36] == "000100") and (word not in database_words):
                proun_noun.append(word)
    except Exception:
        pass

    try:
        for word in proun_noun:
            index_word = sen.index(word)
            df_word = df.loc[df["word"] == "000" + word[-4::]].values
            df_word_1 = df.loc[df["word"] == "000" + word[-3::]].values
            df_word_2 = df.loc[df["word"] == "000" + word[-2::]].values
            df_word_3 = df.loc[df["word"] == "000" + word[-1]].values
            if (len(df.loc[df["word"] == "000" + word[-4::]].index) != 0) and (
                    df_word[0][1][2:8] =="000111" or df_word[0][1][9:15] =="000111"or df_word[0][1][16:22] =="000111" or df_word[0][1][23:29] =="000111" or df_word[0][1][30:36] =="000111") and (word[0:2] != word[-4::]):
                sen[index_word] = word[0:2]
                sen.insert(index_word + 1, word[-4::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-3::]].index) != 0) and (df_word_1[0][1][2:8] =="000111" or df_word_1[0][1][9:15] =="000111"or df_word_1[0][1][16:22] =="000111" or df_word_1[0][1][23:29] =="000111" or df_word_1[0][1][30:36] =="000111") and (word[0:2] != word[-3::]):
                sen[index_word] = word[0:2]
                sen.insert(index_word + 1, word[-3::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-2::]].index) != 0) and (df_word_2[0][1][2:8] =="000111" or df_word_2[0][1][9:15] =="000111"or df_word_2[0][1][16:22] =="000111" or df_word_2[0][1][23:29] =="000111" or df_word_2[0][1][30:36] =="000111") and (word[0:2] != word[-2::]):
                sen[index_word] = word[0:2]
                sen.insert(index_word + 1, word[-2::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-1]].index) != 0) and (df_word_3[0][1][2:8] =="000111" or df_word_3[0][1][9:15] =="000111"or df_word_3[0][1][16:22] =="000111" or df_word_3[0][1][23:29] =="000111" or df_word_3[0][1][30:36] =="000111") and (word[0:2] != word[-1]):
                sen[index_word] = word[0:2]
                sen.insert(index_word + 1, word[-1])
                break
    except Exception:
        pass

    proun_noun = []

    #print("4sen_after:", sen)

    #(2)代词是1位
    try:
        for word in sen:
            df_word = df.loc[df["word"[0]] == "000" + word].values
            if (word not in YP_uncut_words and word[1:-1] not in YP_uncut_words) and (len(df.loc[df["word"] == "000" + word].index) != 0) and (key[1][2:8] == "000100" or key[1][9:15] == "000100" or key[1][16:22] == "000100" or key[1][23:29] == "000100" or key[1][30:36] == "000100") and (word not in database_words):
                proun_noun.append(word)
    except Exception:
        pass

    try:
        for word in proun_noun:
            index_word = sen.index(word)
            df_word = df.loc[df["word"] == "000" + word[-4::]].values
            df_word_1 = df.loc[df["word"] == "000" + word[-3::]].values
            df_word_2 = df.loc[df["word"] == "000" + word[-2::]].values
            df_word_3 = df.loc[df["word"] == "000" + word[-1]].values
            if (len(df.loc[df["word"] == "000" + word[-4::]].index) != 0) and (df_word[0][1][2:8] =="000111" or df_word[0][1][9:15] =="000111"or df_word[0][1][16:22] =="000111" or df_word[0][1][23:29] =="000111" or df_word[0][1][30:36] =="000111"):
                sen[index_word] = word[0]
                sen.insert(index_word + 1, word[-4::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-3::]].index) != 0) and (df_word_1[0][1][2:8] =="000111" or df_word_1[0][1][9:15] =="000111"or df_word_1[0][1][16:22] =="000111" or df_word_1[0][1][23:29] =="000111" or df_word_1[0][1][30:36] =="000111"):
                sen[index_word] = word[0]
                sen.insert(index_word + 1, word[-3::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-2::]].index) != 0) and (df_word_2[0][1][2:8] =="000111" or df_word_2[0][1][9:15] =="000111"or df_word_2[0][1][16:22] =="000111" or df_word_2[0][1][23:29] =="000111" or df_word_2[0][1][30:36] =="000111"):
                sen[index_word] = word[0]
                sen.insert(index_word + 1, word[-2::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-1]].index) != 0) and (df_word_3[0][1][2:8] =="000111" or df_word_3[0][1][9:15] =="000111"or df_word_3[0][1][16:22] =="000111" or df_word_3[0][1][23:29] =="000111" or df_word_3[0][1][30:36] == "000111"):
                sen[index_word] = word[0]
                sen.insert(index_word + 1, word[-1])
                break
    except Exception:
        pass

    proun_noun = []

    #print("42:", sen)

    # 5. 拆分量词、名词
    try:
        for word in sen:
            df_word = df.loc[df["word"] == "000" + word[0]].values
            if (word not in YP_uncut_words and word[1:-1] not in YP_uncut_words) and (len(df.loc[df["word"] == "000" + word[0]].index) != 0) and (df_word[0][1][2:8] == "000011" or df_word[0][1][9:15] == "000011" or df_word[0][1][16:22] == "000011" or df_word[0][1][23:29] == "000011" or
                                                                                                                df_word[0][1][30:36] == "000011") and (word not in database_words):
                count_noun.append(word)
    except Exception:
        pass

    try:
        for word in count_noun:
            index_word = sen.index(word)
            df_word = df.loc[df["word"] == "000" + word[-4::]].values
            df_word_1 = df.loc[df["word"] == "000" + word[-3::]].values
            df_word_2 = df.loc[df["word"] == "000" + word[-2::]].values
            df_word_3 = df.loc[df["word"] == "000" + word[-1]].values
            if (len(df.loc[df["word"] == "000" + word[-4::]].index) != 0) and (
                    df_word[0][1][2:8] == "000111" or df_word[0][1][9:15] == "000111" or df_word[0][1][16:22] == "000111" or df_word[0][1][
                                                                                                        23:29] == "000111" or
                    df_word[0][1][30:36] == "000111") and (word[0] != word[-4::]):
                sen[index_word] = word[0]
                sen.insert(index_word + 1, word[-4::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-3::]].index) != 0) and (
                    df_word_1[0][1][2:8] == "000111" or df_word_1[0][1][9:15] == "000111" or df_word_1[0][1][16:22] == "000111" or df_word_1[0][1][23:29] == "000111" or
                    df_word_1[0][1][30:36] == "000111") and (word[0] != word[-3::]):
                sen[index_word] = word[0]
                sen.insert(index_word + 1, word[-3::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-2::]].index) != 0) and (
                    df_word_2[0][1][2:8] == "000111" or df_word_2[0][1][9:15] == "000111" or df_word_2[0][1][16:22] == "000111" or df_word_2[0][1][
                                                                                                        23:29] == "000111" or
                    df_word_2[0][1][30:36] == "000111") and (word[0] != word[-2::]):
                sen[index_word] = word[0]
                sen.insert(index_word + 1, word[-2::])
                #print("2")
                break
            elif (len(df.loc[df["word"] == "000" + word[-1]].index) != 0) and (
                    df_word_3[0][1][2:8] == "000111" or df_word_3[0][1][9:15] == "000111" or df_word_3[0][1][16:22] == "000111" or df_word_3[0][1][
                                                                                                        23:29] == "000111" or
                    df_word_3[0][1][30:36] == "000111") and (word[0] != word[-1]):
                sen[index_word] = word[0]
                sen.insert(index_word + 1, word[-1])
                break
    except Exception:
        pass

    count_noun = []

    # 6. 拆分动词和到、至等副词
    #（1）副词在后
    #(1)副词是2位
    try:
        for word in sen:
            df_word = df.loc[df["word"] == "000" + word[-2::]].values
            if (len(df.loc[df["word"] == "000" + word[-2::]].index) != 0) and (df_word[0][1][2:8] == "000110" or df_word[0][1][9:15] == "000110" or df_word[0][1][16:22] == "000110" or df_word[0][1][23:29] == "000110" or
                                          df_word[0][1][30:36] == "000110") and (word not in database_words):
                v_adv.append(word)
    except Exception:
        pass

    try:
        for word in v_adv:
            index_word = sen.index(word)
            df_word = df.loc[df["word"] == "000" + word[0:5]].values
            df_word_1 = df.loc[df["word"] == "000" + word[0:4]].values
            df_word_2 = df.loc[df["word"] == "000" + word[0:3]].values
            df_word_3 = df.loc[df["word"] == "000" + word[0:2]].values
            df_word_4 = df.loc[df["word"] == "000" + word[0:1]].values
            if (len(df.loc[df["word"] == "000" + word[0:5]].index) != 0) and (
                    df_word[0][1][2:8] in ["000001", "000101"] or df_word[0][1][9:15] in ["000001", "000101"] or df_word[0][1][16:22] in ["000001", "000101"] or df_word[0][1][
                                                                                                        23:29] in ["000001", "000101"] or
                    df_word[0][1][30:36] in ["000001", "000101"]) and (word[0:5] != word[-2::]):
                sen[index_word] = word[0:5]
                sen.insert(index_word + 1, word[-2::])
                break
            elif (len(df.loc[df["word"] == "000" + word[0:4]].index) != 0) and (
                    df_word_1[0][1][2:8] in ["000001", "000101"] or df_word_1[0][1][9:15] in ["000001", "000101"] or df_word_1[0][1][
                                                                                                   16:22] in [
                        "000001", "000101"] or df_word_1[0][1][
                                               23:29] in ["000001", "000101"] or
                    df_word_1[0][1][30:36] in ["000001", "000101"]) and (word[0:4] != word[-2::]):
                sen[index_word] = word[0:4]
                sen.insert(index_word + 1, word[-2::])
                break
            elif (len(df.loc[df["word"] == "000" + word[0:3]].index) != 0) and (
                    df_word_2[0][1][2:8] in ["000001", "000101"] or df_word_2[0][1][9:15] in ["000001", "000101"] or df_word_2[0][1][16:22] in ["000001", "000101"] or df_word_2[0][1][
                                                                                                        23:29] in ["000001", "000101"] or
                    df_word_2[0][1][30:36] in ["000001", "000101"]) and (word[0:3] != word[-2::]):
                sen[index_word] = word[0:3]
                sen.insert(index_word + 1, word[-2::])
                break
            elif (len(df.loc[df["word"] == "000" + word[0:2]].index) != 0) and (
                    df_word_3[0][1][2:8] in ["000001", "000101"] or df_word_3[0][1][9:15] in ["000001", "000101"] or df_word_3[0][1][16:22] in ["000001", "000101"] or df_word_3[0][1][
                                                                                                        23:29] in ["000001", "000101"] or
                    df_word_3[0][1][30:36] in ["000001", "000101"]) and (word[0:2] != word[-2::]):
                sen[index_word] = word[0:2]
                sen.insert(index_word + 1, word[-2::])
                break
            elif (len(df.loc[df["word"] == "000" + word[0:1]].index) != 0) and (
                    df_word_4[0][1][2:8] in ["000001", "000101"] or df_word_4[0][1][9:15] in ["000001", "000101"] or df_word_4[0][1][16:22] in ["000001", "000101"] or df_word_4[0][1][
                                                                                                        23:29] in ["000001", "000101"] or
                    df_word_4[0][1][30:36] in ["000001", "000101"]) and (word[0:1] != word[-2::]):
                sen[index_word] = word[0:1]
                sen.insert(index_word + 1, word[-2::])
                break
    except Exception:
        pass

    v_adv = []

    # (2)副词是1位
    try:
        for word in sen:
            df_word = df.loc[df["word"] == "000" + word[-1]].values
            if (len(df.loc[df["word"] == "000" + word[-1]].index) != 0) and (df_word[0][1][2:8] == "000110" or df_word[0][1][9:15] == "000110" or df_word[0][1][16:22] == "000110" or df_word[0][1][23:29] == "000110")  and (word not in database_words):
                v_adv.append(word)
    except Exception:
        pass

    df_word_4 = []

    try:
        for word in v_adv:
            index_word = sen.index(word)
            df_word = df.loc[df["word"] == "000" + word[0:5]].values
            df_word_1 = df.loc[df["word"] == "000" + word[0:4]].values
            df_word_2 = df.loc[df["word"] == "000" + word[0:3]].values
            df_word_3 = df.loc[df["word"] == "000" + word[0:2]].values
            df_word_4 = df.loc[df["word"] == "000" + word[0:1]].values
            if (len(df.loc[df["word"] == "000" + word[0:5]].index) != 0) and (
                    df_word[0][1][2:8] in ["000001", "000101"] or df_word[0][1][9:15] in ["000001", "000101"] or df_word[0][1][
                                                                                                   16:22] in [
                        "000001", "000101"] or df_word[0][1][
                                               23:29] in ["000001", "000101"] or
                df_word[0][1][30:36] in ["000001", "000101"]) and (word[0:5] != word[-1::]):
                sen[index_word] = word[0:5]
                sen.insert(index_word + 1, word[-1::])
                #print("1")
                break
            elif (len(df.loc[df["word"] == "000" + word[0:4]].index) != 0) and (
                    df_word_1[0][1][2:8] in ["000001", "000101"] or df_word_1[0][1][9:15] in ["000001", "000101"] or df_word_1[0][1][
                                                                                                   16:22] in [
                        "000001", "000101"] or df_word_1[0][1][
                                               23:29] in ["000001", "000101"] or
                    df_word_1[0][1][30:36] in ["000001", "000101"]) and (word[0:4] != word[-1::]):
                sen[index_word] = word[0:4]
                sen.insert(index_word + 1, word[-1::])
                #print("2")
                break
            elif (len(df.loc[df["word"] == "000" + word[0:3]].index) != 0) and (
                    df_word_2[0][1][2:8] in ["000001", "000101"] or df_word_2[0][1][9:15] in ["000001", "000101"] or df_word_2[0][1][
                                                                                                   16:22] in [
                        "000001", "000101"] or df_word_2[0][1][
                                               23:29] in ["000001", "000101"] or
                    df_word_2[0][1][30:36] in ["000001", "000101"]) and (word[0:3] != word[-1::]):
                sen[index_word] = word[0:3]
                sen.insert(index_word + 1, word[-1::])
                #print("3")
                break
            elif (len(df.loc[df["word"] == "000" + word[0:2]].index) != 0) and (
                    df_word_3[0][1][2:8] in ["000001", "000101"] or df_word_3[0][1][9:15] in ["000001", "000101"] or df_word_3[0][1][
                                                                                                   16:22] in [
                        "000001", "000101"] or df_word_3[0][1][
                                               23:29] in ["000001", "000101"] or
                    df_word_3[0][1][30:36] in ["000001", "000101"]) and (word[0:2] != word[-1::]):
                sen[index_word] = word[0:2]
                sen.insert(index_word + 1, word[-1::])
                #print("4")
                break
            elif (len(df.loc[df["word"] == "000" + word[0:1]].index) != 0) and (
                    df_word_4[0][1][2:8] in ["000001", "000101"] or df_word_4[0][1][9:15] in ["000001", "000101"] or df_word_4[0][1][
                                                                                                   16:22] in [
                        "000001", "000101"] or df_word_4[0][1][
                                               23:29] in ["000001", "000101"] or
                    df_word_4[0][1][30:36] in ["000001", "000101"]) and (word[0:1] != word[-1::]):
                sen[index_word] = word[0:1]
                sen.insert(index_word + 1, word[-1::])
                #print("5")
                break
    except Exception:
        pass

    v_adv = []

    # （1）副词在前
    # (1)副词是2位
    try:
        for word in sen:
            df_word = df.loc[df["word"] == "000" + word[0:2]].values
            if (len(df.loc[df["word"] == "000" + word[0:2]].index) != 0) and (
                    df_word[0][1][2:8] == "000110" or df_word[0][1][9:15] == "000110" or df_word[0][1][16:22] == "000110" or df_word[0][1][
                                                                                                        23:29] == "000110" or
                    df_word[0][1][30:36] == "000110") and (word not in database_words):
                v_adv.append(word)
    except Exception:
        pass

    try:
        for word in v_adv:
            index_word = sen.index(word)
            df_word = df.loc[df["word"] == "000" + word[-4::]].values
            df_word_1 = df.loc[df["word"] == "000" + word[-3::]].values
            df_word_2 = df.loc[df["word"] == "000" + word[-2::]].values
            if (len(df.loc[df["word"] == "000" + word[-4::]].index) != 0) and (
                    df_word[0][1][2:8] in ["000001", "000101"] or df_word[0][1][9:15] in ["000001", "000101"] or df_word[0][1][
                                                                                                   16:22] in [
                        "000001", "000101"] or df_word[0][1][
                                               23:29] in ["000001", "000101"] or
                    df_word[0][1][30:36] in ["000001", "000101"]) and (word[0:4] != word[-2::]):
                sen[index_word] = word[0:2]
                sen.insert(index_word + 1, word[-4::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-3::]].index) != 0) and (
                    df_word_1[0][1][2:8] in ["000001", "000101"] or df_word_1[0][1][9:15] in ["000001", "000101"] or df_word_1[0][1][
                                                                                                   16:22] in [
                        "000001", "000101"] or key[1][
                                               23:29] in ["000001", "000101"] or
                    key[1][30:36] in ["000001", "000101"]) and (word[0:3] != word[-2::]):
                sen[index_word] = word[0:2]
                sen.insert(index_word + 1, word[-3::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-2::]].index) != 0) and (
                    df_word_2[0][1][2:8] in ["000001", "000101"] or df_word_2[0][1][9:15] in ["000001", "000101"] or df_word_2[0][1][
                                                                                                   16:22] in [
                        "000001", "000101"] or df_word_2[0][1][
                                               23:29] in ["000001", "000101"] or
                    df_word_2[0][1][30:36] in ["000001", "000101"]) and (word[0:2] != word[-2::]):
                sen[index_word] = word[0:2]
                sen.insert(index_word + 1, word[-2::])
                break
    except Exception:
        pass

    #print("sen_test2", sen)

    v_adv = []

    # (2)副词是1位
    try:
        for word in sen:
            df_word = df.loc[df["word"] == "000" + word[0]].values
            df_word_1 = df.loc[df["word"] == "001" + word[0]].values
            df_word_2 = df.loc[df["word"] == "010" + word[0]].values
            df_word_3 = df.loc[df["word"] == "011" + word[0]].values
            df_word_4 = df.loc[df["word"] == "100" + word[0]].values
            df_word_second = df.loc[df["word"] == "000" + word[1]].values
            df_word_second_1 = df.loc[df["word"] == "001" + word[1]].values
            df_word_second_2 = df.loc[df["word"] == "010" + word[1]].values
            df_word_second_3 = df.loc[df["word"] == "011" + word[1]].values
            df_word_second_4 = df.loc[df["word"] == "100" + word[1]].values
            if (len(df.loc[df["word"] == "000" + word[0]].index) != 0) and (
                    df_word[0][1][2:8] in ["000110", "000010"] or df_word[0][1][9:15] in ["000110", "000010"] or df_word[0][1][16:22] in ["000110", "000010"] or df_word[0][1][23:29] in ["000110", "000010"] or df_word[0][1][30:36] in ["000110", "000010"]) and (df_word_second[0][3::] != df_word[0][3::]):
                v_adv.append(word)
                #print("1test")
            elif (len(df.loc[df["word"] == "001" + word[0]].index) != 0) and (
                    df_word_1[0][1][2:8] in ["000110", "000011"] or df_word_1[0][1][9:15] in ["000110", "000011"] or df_word_1[0][1][16:22] in ["000110", "000010"] or df_word_1[0][1][23:29] in ["000110", "000010"] or df_word_1[0][1][30:36] in ["000110", "000010"]) and (df_word_second_1[0][3::] != df_word_1[0][3::]):
                v_adv.append(word)
                #print("2test")
            elif (len(df.loc[df["word"] == "010" + word[0]].index) != 0) and (
                    df_word_2[0][1][2:8] in ["000110", "000010"] or df_word_2[0][1][9:15] in ["000110", "000010"] or df_word_2[0][1][16:22] in ["000110", "000010"] or df_word_2[0][1][23:29] in ["000110", "000010"] or df_word_2[0][1][30:36] in ["000110", "000010"]) and (df_word_second_2[0][3::] != df_word_2[0][3::]):
                v_adv.append(word)
                #print("3test")
            elif (len(df.loc[df["word"] == "011" + word[0]].index) != 0) and (
                    df_word_3[0][1][2:8] in ["000110", "000010"] or df_word_3[0][1][9:15] in ["000110", "000010"] or
                    df_word_3[0][1][16:22] in ["000110", "000010"] or df_word_3[0][1][23:29] in ["000110", "000010"] or
                    df_word_3[0][1][30:36] in ["000110", "000010"]) and (df_word_second_3[0][3::] != df_word_3[0][3::]):
                v_adv.append(word)
                #print("4test")
            elif (len(df.loc[df["word"] == "100" + word[0]].index) != 0) and (
                    df_word_4[0][1][2:8] in ["000110", "000010"] or df_word_4[0][1][9:15] in ["000110", "000010"] or df_word_4[0][1][16:22] in ["000110", "000010"] or df_word_4[0][1][23:29] in ["000110", "000010"] or df_word_4[0][1][30:36] in ["000110", "000010"]) and (df_word_second_4[0][3::] != df_word_4[0][3::]):
                v_adv.append(word)
                #print("5test")
    except Exception:
        pass

    try:
        for word in v_adv:
            index_word = sen.index(word)
            df_word = df.loc[df["word"] == "000" + word[-4::]].values
            df_word_1 = df.loc[df["word"] == "000" + word[-3::]].values
            df_word_2 = df.loc[df["word"] == "000" + word[-2::]].values
            df_word_3 = df.loc[df["word"] == "000" + word[-1::]].values
            if (len(df.loc[df["word"] == "000" + word[-4::]].index) != 0) and (
                    df_word[0][1][2:8] in ["000001", "000101"] or df_word[0][1][9:15] in ["000001", "000101"] or df_word[0][1][
                                                                                                   16:22] in [
                        "000001", "000101"] or df_word[0][1][
                                               23:29] in ["000001", "000101"] or
                    df_word[0][1][30:36] in ["000001", "000101"]) and (word[0:4] != word[-2::]):
                sen[index_word] = word[0]
                sen.insert(index_word + 1, word[-4::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-3::]].index) != 0) and (
                    df_word_1[0][1][2:8] in ["000001", "000101"] or df_word_1[0][1][9:15] in ["000001", "000101"] or df_word_1[0][1][
                                                                                                   16:22] in [
                        "000001", "000101"] or df_word_1[0][1][
                                               23:29] in ["000001", "000101"] or
                    df_word_1[0][1][30:36] in ["000001", "000101"]) and (word[0:3] != word[-2::]):
                sen[index_word] = word[0]
                sen.insert(index_word + 1, word[-3::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-2::]].index) != 0) and (
                    df_word_2[0][1][2:8] in ["000001", "000101"] or df_word_2[0][1][9:15] in ["000001", "000101"] or df_word_2[0][1][
                                                                                                   16:22] in [
                        "000001", "000101"] or df_word_2[0][1][
                                               23:29] in ["000001", "000101"] or
                    df_word_2[0][1][30:36] in ["000001", "000101"]) and (word[0:2] != word[-2::]):
                sen[index_word] = word[0]
                sen.insert(index_word + 1, word[-2::])
                break
            elif (len(df.loc[df["word"] == "000" + word[-1::]].index) != 0) and (
                    df_word_3[0][1][2:8] in ["000001", "000101"] or df_word_3[0][1][9:15] in ["000001", "000101"] or df_word_3[0][1][
                                                                                                   16:22] in [
                        "000001", "000101"] or df_word_3[0][1][
                                               23:29] in ["000001", "000101"] or
                    df_word_3[0][1][30:36] in ["000001", "000101"]) and (word[0:2] != word[-1::]):
                sen[index_word] = word[0]
                sen.insert(index_word + 1, word[-1::])
                break
    except Exception:
        pass

    v_adv = []

    #print("6:", sen)

    #6.5 拆分形容词和名词
    word_temp = []
    word_noun = []

    try:
        for word in sen:
            df_word = df.loc[df["word"] == "000" + word[-2::]].values
            df_word_1 = df.loc[df["word"] == "000" + word[-3::]].values
            df_word_2 = df.loc[df["word"] == "000" + word[-4::]].values
            if (word not in YP_uncut_words and word[1:-1] not in YP_cut_words) and (len(word) == 3) and (len(df.loc[df["word"] == "000" + word[-2::]].index) != 0) and (df_word[0][1][2:8] == "000111" or df_word[0][1][9:15] == "000111" or df_word[0][1][16:22] == "000111" or df_word[0][1][23:29] == "000111" or
                                                                                                                                   df_word[
                                                                                                                                       0][1][30:36] == "000111"):
                index_word = sen.index(word)
                noun_adj.append(word)
                word_temp = word[0:-2]
                word_noun = word[-2::]
            elif (word not in YP_uncut_words and word[1:-1] not in YP_uncut_words) and (len(word) == 4) and (len(df.loc[df["word"] == "000" + word[-2::]].index) != 0) and (df_word[0][1][2:8] == "000111" or df_word[0][1][9:15] == "000111" or df_word[0][1][16:22] == "000111" or df_word[0][1][23:29] == "000111" or
                                                                                                                                   df_word[
                                                                                                                                       0][1][30:36] == "000111"):
                index_word = sen.index(word)
                noun_adj.append(word)
                word_temp = word[0:-2]
                word_noun = word[-2::]
            elif (word not in YP_uncut_words and word[1:-1] not in YP_uncut_words) and (len(word) > 4) and (len(df.loc[df["word"] == "000" + word[-2::]].index) != 0) and (df_word[0][1][2:8] == "000111" or df_word[0][1][9:15] == "000111" or df_word[0][1][16:22] == "000111" or df_word[0][1][23:29] == "000111" or
                                                                                                                                   df_word[
                                                                                                                                       0][1][30:36] == "000111"):
                index_word = sen.index(word)
                noun_adj.append(word)
                word_temp = word[0:-2]
                word_noun = word[-2::]
            elif (word not in YP_uncut_words and word[1:-1] not in YP_uncut_words) and (len(word) > 4) and (len(df.loc[df["word"] == "000" + word[-3::]].index) != 0) and (df_word_1[0][1][2:8] == "000111" or df_word_1[0][1][9:15] == "000111" or df_word_1[0][1][16:22] == "000111" or df_word_1[0][1][23:29] == "000111" or
                                                                                                                                   df_word_1[
                                                                                                                                       0][1][30:36] == "000111"):
                index_word = sen.index(word)
                noun_adj.append(word)
                word_temp = word[0:-3]
                word_noun = word[-2::]
            elif (word not in YP_uncut_words and word[1:-1] not in YP_uncut_words) and (len(word) > 4) and (len(df.loc[df["word"] == "000" + word[-4::]].index) != 0) and (df_word_2[0][1][2:8] == "000111" or df_word_2[0][1][9:15] == "000111" or df_word_2[0][1][16:22] == "000111" or df_word_2[0][1][23:29] == "000111" or
                                                                                                                                   df_word_2[
                                                                                                                                       0][1][30:36] == "000111"):
                index_word = sen.index(word)
                noun_adj.append(word)
                word_temp = word[0:-4]
                word_noun = word[-2::]
    except Exception:
        pass

    try:
        for word in word_temp:
            df_word = df.loc[df["word"] == "000" + word].values
            if (len(df.loc[df["word"] == "000" + word].index) != 0)  and (
                    df_word[0][1][2:8] in ["000101", "010111"] or df_word[0][1][9:15] in ["000101", "010111"] or df_word[0][1][16:22] in ["000101", "010111"] or df_word[0][1][23:29] in ["000101", "010111"] or
                    df_word[0][1][30:36] in ["000101", "010111"]):
                sen[index_word] = word
                sen.insert(index_word + 1, word_noun)
                break
    except Exception:
        pass

    word_temp = []
    word_noun = []

    #print("65sen_after:", sen)

    # 6.6 合并错误分词类型：“第三”、“大城市”里的“第三”和“大”
    index_word = 0
    word_first = []
    word_next = []
    remove_dict = []
    count_len = 0
    m_66 = 0
    mark_se = ""

    try:
        for word in sen:
            if_number = Is_number(word)
            index_word = sen.index(word)
            df_word = df.loc[df["word"] == "000" + word[1]].values
            if len(word)>1 and (len(df.loc[df["word"] == "000" + word[1]].index) != 0) and (df_word[0][1][2:8] == "000010" or df_word[0][1][9:15] == "000010" or df_word[0][1][16:22] == "000010" or df_word[0][1][23:29] == "000010" or
                    df_word[0][1][30:36] == "000010") and (word[0] == "第"):
                word_first = sen[index_word:index_word+1]
                index_word_first = sen.index(sen[index_word])
                word_next = sen[index_word +1:index_word +2]
                index_word_next = sen.index(sen[index_word+1])
            elif len(word)>1 and (if_number == 0 or if_number == 1) and (sen[index_word - 1] == "第"):
                word_first = sen[index_word - 1:index_word + 1]
                index_word_first = sen.index(sen[index_word])
                word_next = sen[index_word + 1:index_word +2]
                index_word_next = sen.index(sen[index_word+1])
    except Exception:
        pass

    for word in word_first:
        remove_dict.append(word)

    for word in word_next:
        remove_dict.append(word)

    if len(word_first) > 1:
        count_len = len(word_first[0])

    #print("word_first", word_first)
    #print("word_next", word_next)

    try:
        for word in word_next:
            index_word = sen.index(word)
            df_word = df.loc[df["word"] == "000" + word[0]].values
            if (len(df.loc[df["word"] == "000" + word[0]].index) != 0) and (df_word[0][1][2:8] == "000101" or df_word[0][1][9:15] == "000101" or df_word[0][1][16:22] == "000101" or df_word[0][1][23:29] == "000101" or df_word[0][1][30:36] == "000101"):
                word_first[0] = "".join(word_first[0] + word[0])
                word_next[0] = "".join(word[1::])
    except Exception:
        pass

    if len(word_first)>1 and len(word_first[0]) != count_len:
        for i in remove_dict:
            sen.remove(i)
        sen.insert(index_word_first, word_first[0])
        sen.insert(index_word_next, word_next[0])
        m_66 = 1
        mark_se = "1 111101 000000 000000 000000 000000"

    #print("word_first", word_first)
    #print("word_next", word_next)

    #print("66sen_after:", sen)

    # 7 拆分同词性的词
    word_first = []
    word_second = []
    word_complete = []
    index_word = 0

    #（1）两个词都是一位
    try:
        for word in sen:
            df_word = df.loc[df["word"] == "000" + word[0]].values
            df_word_1 = df.loc[df["word"] == "000" + word[1]].values
            if (word not in YP_uncut_words and word[1:-1] not in YP_uncut_words) and (len(word) == 2) and (len(df.loc[df["word"] == "000" + word[0]].index) != 0):
                word_first = df_word[0][0]
            if (word not in YP_uncut_words and word[1:-1] not in YP_uncut_words) and (len(word) == 2) and (len(df.loc[df["word"] == "000" + word[1]].index) != 0):
                word_second = df_word_1[0][0]
                word_complete = word
                index_word = sen.index(word)

        for word in word_complete:
            df_word = df.loc[df["word"] == "000" + word].values
            if len(df.loc[df["word"] == "000" + word].index) != 0:
                word_first = []
                word_second = []

        if (len(word_first) != 0) and (len(word_second) != 0) and (word_first[1][2:8] == word_second[1][2:8]) and (word_first != word_second):
            sen[index_word] = word_first[0][3::]
            sen.insert(index_word + 1, word_second[0][3::])
            word_first = []
            word_second = []
    except Exception:
        pass

    # (2）两个词都是两位
    try:
        for word in sen:
            df_word = df.loc[df["word"] == "000" + word[0:2]].values
            df_word_1 = df.loc[df["word"] == "000" + word[2:4]].values
            if (word not in YP_uncut_words and word[1:-1] not in YP_uncut_words) and (len(word) == 4) and (len(df.loc[df["word"] == "000" + word[0:2]].index) != 0) and (word not in database_words):
                word_first = df_word[0][0]
            if (word not in YP_uncut_words and word[1:-1] not in YP_uncut_words) and (len(word) == 4) and (len(df.loc[df["word"] == "000" + word[2:4]].index) != 0) and (word not in database_words):
                word_second = df_word_1[0][0]
                word_complete = word
                index_word = sen.index(word)

        for word in word_complete:
            df_word = df.loc[df["word"] == "000" + word].values
            if len(df.loc[df["word"] == "000" + word].index) != 0:
                word_first = []
                word_second = []

        if (len(word_first) != 0) and (len(word_second) != 0) and (word_first[1][2:8] == word_second[1][2:8]) and word_first != word_second:
            sen[index_word] = word_first[3::]
            sen.insert(index_word + 1, word_second[3::])
            word_first = []
            word_second = []
    except Exception:
        pass

    # (3）前一位后两位
    try:
        for word in sen:
            df_word = df.loc[df["word"] == "000" + word[0]].values
            df_word_1 = df.loc[df["word"] == "000" + word[1:3]].values
            if (len(word) == 3) and (len(df.loc[df["word"] == "000" + word[0]].index) != 0):
                word_first = df_word[0][0]
            if (len(word) == 3) and (len(df.loc[df["word"] == "000" + word[1:3]].index) != 0):
                word_second = df_word_1[0][0]
                word_complete = word
                index_word = sen.index(word)

        for word in word_complete:
            df_word = df.loc[df["word"] == "000" + word].values
            if len(df.loc[df["word"] == "000" + word].index) != 0:
                word_first = []
                word_second = []

        if (len(word_first) != 0) and (len(word_second) != 0) and (word_first[1][2:8] == word_second[1][2:8]) and word_first != word_second:
            sen[index_word] = word_first[0][3::]
            sen.insert(index_word + 1, word_second[0][3::])
            word_first = []
            word_second = []
    except Exception:
        pass

    # (4）前两位后一位
    try:
        for word in sen:
            df_word = df.loc[df["word"] == "000" + word[0:2]].values
            df_word_1 = df.loc[df["word"] == "000" + word[2]].values
            df_word_o = df.loc[df["word"] == "000" + word].values
            if (len(word) == 3) and (len(df.loc[df["word"] == "000" + word[0:2]].index) != 0) and (len(df.loc[df["word"] == "000" + word].index) == 0):
                word_first = df_word[0][0]
                index_word = sen.index(word)
            if (m_01 == 0) and (len(word) == 3) and (len(df.loc[df["word"] == "000" + word[2]].index) != 0) and (len(df.loc[df["word"] == "000" + word].index) == 0):
                word_second = df_word_1[0][0]
                word_complete = word
                index_word = sen.index(word)

        for word in word_complete:
            df_word = df.loc[df["word"] == "000" + word].values
            if len(word) == 3 and len(df.loc[df["word"] == "000" + word].index) != 0:
                word_first = []
                word_second = []

        if (len(word_first) != 0) and (len(word_second) != 0) and (word_first[1][2:8] == word_second[1][2:8]) and word_first != word_second:
            sen[index_word] = word_first[0][3::]
            sen.insert(index_word + 1, word_second[0][3::])
            word_first = []
            word_second = []
    except Exception:
        pass

    #print("7sen_after:", sen)

    # 7.5 拆分助词/情态词和其他词
    # （1）助词在前
    try:
        for word in sen:
            df_word = df.loc[df["word"] == "000" + word[0]].values
            if (word not in YP_uncut_words and word[1:-1] not in YP_uncut_words) and (len(word) == 3) and (len(df.loc[df["word"] == "000" + word[0]].index) != 0) and (word[0] not in ["的", "地", "得"]) and (
                    df_word[0][1][2:8] in ["110101"] or df_word[0][1][9:15] in ["110101"] or df_word[0][1][16:22] in ["110101"] or df_word[0][1][
                                                                                                        23:29] in ["110101"] or
                    df_word[0][1][30:36] in ["110101"]) and (
                    df_word[0][1][2:8] != "000111" and df_word[0][1][9:15] != "000111" and df_word[0][1][16:22] != "000111" and df_word[0][
                                                                                                               1][
                                                                                                           23:29] != "000111" and
                    df_word[0][1][30:36] != "000111"):
                aux.append(word)

        #print("aux", aux)

        for word in aux:
            df_word = df.loc[df["word"] == "000" + word].values
            if (len(word) == 3) and (len(df.loc[df["word"] == "000" + word].index) != 0) and (
                    df_word[0][1][2:8] == "000111" or df_word[0][1][9:15] == "000111" or df_word[0][1][16:22] == "000111" or df_word[0][1][
                                                                                                        23:29] == "000111" or
                    df_word[0][1][30:36] == "000111"):
                #print("word", word)
                aux = []

        for word in aux:
            index_word = sen.index(word)
            df_word = df.loc[df["word"] == "000" + word[-4::]].values
            df_word_1 = df.loc[df["word"] == "000" + word[-3::]].values
            df_word_2 = df.loc[df["word"] == "000" + word[-2::]].values
            df_word_3 = df.loc[df["word"] == "000" + word[-1]].values
            if (len(word) > 4) and (len(df.loc[df["word"] == "000" + word[-4::]].index) != 0) and (
                    df_word[0][1][2:8] in ["000001", "000101", "000110"] or df_word[0][1][9:15] in ["000001", "000101",
                                                                                      "000110"] or df_word[0][1][
                                                                                                   16:22] in [
                        "000001", "000101", "000110"] or df_word[0][1][23:29] in ["000001", "000101", "000110"] or
                    df_word[0][1][30:36] in ["000001", "000101", "000110"]):
                sen[index_word] = word[0]
                sen.insert(index_word + 1, word[-4::])
                #print("ok1")
                break
            elif (len(word) > 3) and (len(df.loc[df["word"] == "000" + word[-3::]].index) != 0) and (
                    df_word_1[0][1][2:8] in ["000001", "000101", "000110"] or df_word_1[0][1][9:15] in ["000001", "000101",
                                                                                      "000110"] or df_word_1[0][1][
                                                                                                   16:22] in [
                        "000001", "000101", "000110"] or key[1][23:29] in ["000001", "000101", "000110"] or
                    df_word_1[0][1][30:36] in ["000001", "000101", "000110"]):
                sen[index_word] = word[0]
                sen.insert(index_word + 1, word[-3::])
                #print("ok2")
                break
            elif (len(word) > 2) and (len(df.loc[df["word"] == "000" + word[-2::]].index) != 0) and (
                    df_word_2[0][1][2:8] in ["000001", "000101", "000110"] or df_word_2[0][1][9:15] in ["000001", "000101",
                                                                                      "000110"] or df_word_2[0][1][
                                                                                                   16:22] in [
                        "000001", "000101", "000110"] or df_word_2[0][1][23:29] in ["000001", "000101", "000110"] or
                    df_word_2[0][1][30:36] in ["000001", "000101", "000110"]):
                sen[index_word] = word[0]
                sen.insert(index_word + 1, word[-2::])
                #print("ok3")
                break
            elif (len(word) > 1) and (len(df.loc[df["word"] == "000" + word].index) != 0) and (
                    df_word_3[0][1][2:8] in ["000001", "000101", "000110"] or df_word_3[0][1][9:15] in ["000001", "000101","000110"] or df_word_3[0][1][16:22] in [
                        "000001", "000101", "000110"] or df_word_3[0][1][23:29] in ["000001", "000101", "000110"] or
                    df_word_3[0][1][30:36] in ["000001", "000101", "000110"]):
                sen[index_word] = word[0]
                sen.insert(index_word + 1, word[-1])
                #print("ok4")
                break
    except Exception:
        pass

    # （2）助词在后
    # 助词1位
    try:
        for word in sen:
            index_word = sen.index(word)
            df_word = df.loc[df["word"] == "000" + word[-1]].values
            #print("df_word", df_word)
            if (word not in YP_uncut_words and word[1:-1] not in YP_uncut_words) and (word[-1] in ["的", "地", "得"]) and (len(df.loc[df["word"] == "000" + word[-1]].index) != 0) and (
                    df_word[0][1][2:8] in ["110101"] or df_word[0][1][9:15] in ["110101"] or df_word[0][1][16:22] in ["110101"] or df_word[0][1][
                                                                                                        23:29] in ["110101"] or
                    df_word[0][1][30:36] in ["110101"]) and (
                    df_word[0][1][2:8] != "000111" and df_word[0][1][9:15] != "000111" and df_word[0][1][16:22] != "000111" and df_word[0][
                                                                                                               1][
                                                                                                           23:29] != "000111" and
                    df_word[0][1][30:36] != "000111") and (len(df.loc[df["word"] == "000" + word].index) == 0):
                aux.append(word)
            elif (word not in YP_uncut_words and word[1:-1] not in YP_uncut_words) and (len(df.loc[df["word"] == "000" + word[-1]].index) != 0) and (
                    df_word[0][1][2:8] in ["111110"] or df_word[0][1][9:15] in ["111110"] or df_word[0][1][16:22] in ["111110"] or df_word[0][1][
                                                                                                        23:29] in ["111110"] or
                    df_word[0][1][30:36] in ["111110"]) and (
                    df_word[0][1][2:8] != "000111" and df_word[0][1][9:15] != "000111" and df_word[0][1][16:22] != "000111" and df_word[0][
                                                                                                               1][
                                                                                                           23:29] != "000111" and
                    df_word[0][1][30:36] != "000111"):
                #print("OK")
                aux.append(word)
    except Exception:
        pass

    #print("aux2", aux)

    try:
        for word in aux:
            index_word = sen.index(word)
            df_word = df.loc[df["word"] == "000" + word[0:5]].values
            df_word_1 = df.loc[df["word"] == "000" + word[0:4]].values
            df_word_2 = df.loc[df["word"] == "000" + word[0:3]].values
            df_word_3 = df.loc[df["word"] == "000" + word[0:2]].values
            df_word_4 = df.loc[df["word"] == "000" + word[0]].values
            if (len(word) > 5) and (len(df.loc[df["word"] == "000" + word[0:5]].index) != 0) and (
                    df_word[0][1][2:8] in ["000001", "000101", "000110"] or df_word[0][1][9:15] in ["000001", "000101",
                                                                                      "000110"] or df_word[0][1][
                                                                                                   16:22] in [
                        "000001", "000101", "000110"] or df_word[0][1][23:29] in ["000001", "000101", "000110"] or
                    df_word[0][1][30:36] in ["000001", "000101", "000110"]):
                sen[index_word] = word[0:5]
                sen.insert(index_word + 1, word[-1])
                #print("ok5")
                break
            elif (len(word) > 4)and (len(df.loc[df["word"] == "000" + word[0:4]].index) != 0) and (
                    df_word_1[0][1][2:8] in ["000001", "000101", "000110"] or df_word_1[0][1][9:15] in ["000001", "000101",
                                                                                      "000110"] or df_word_1[0][1][
                                                                                                   16:22] in [
                        "000001", "000101", "000110"] or df_word_1[0][1][23:29] in ["000001", "000101", "000110"] or
                    df_word_1[0][1][30:36] in ["000001", "000101", "000110"]):
                sen[index_word] = word[0:4]
                sen.insert(index_word + 1, word[-1])
                #print("ok6")
                break
            elif (len(word) > 3) and (len(df.loc[df["word"] == "000" + word[0:3]].index) != 0) and (
                    df_word_2[0][1][2:8] in ["000001", "000101", "000110"] or df_word_2[0][1][9:15] in ["000001", "000101",
                                                                                      "000110"] or df_word_2[0][1][
                                                                                                   16:22] in [
                        "000001", "000101", "000110"] or df_word_2[0][1][23:29] in ["000001", "000101", "000110"] or
                    df_word_2[0][1][30:36] in ["000001", "000101", "000110"]):
                sen[index_word] = word[0:3]
                sen.insert(index_word + 1, word[-1])
                #print("ok7")
                break
            elif (len(word) > 2) and (len(df.loc[df["word"] == "000" + word[0:2]].index) != 0) and (
                    df_word_3[0][1][2:8] in ["000001", "000101", "000110", "111011"] or df_word_3[0][1][9:15] in ["000001", "000101",
                                                                                      "000110", "111011"] or df_word_3[0][1][
                                                                                                   16:22] in [
                        "000001", "000101", "000110", "111011"] or df_word_3[0][1][23:29] in ["000001", "000101", "000110", "111011"] or
                    df_word_3[0][1][30:36] in ["000001", "000101", "000110", "111011"]):
                print("word", word[0:2])
                sen[index_word] = word[0:2]
                sen.insert(index_word + 1, word[-1])
                #print("ok8")
            elif (len(word) == 2) and (len(df.loc[df["word"] == "000" + word[0]].index) != 0) and (
                    df_word_4[0][1][2:8] in ["000001", "000101", "000110", "111011"] or df_word_4[0][1][9:15] in [
                "000001", "000101","000110", "111011"] or df_word_4[0][1][16:22] in ["000001", "000101", "000110", "111011"] or df_word_4[0][1][23:29] in ["000001", "000101",
                                                                                              "000110", "111011"] or
                    df_word_4[0][1][30:36] in ["000001", "000101", "000110", "111011"]):
                sen[index_word] = word[0]
                sen.insert(index_word + 1, word[-1])
                # print("ok8")
                break
    except Exception:
        pass

        aux = []

    #print("7.5sen_after:", sen)

    # 8. 拆分动词、名词
    try:
        for word in sen:
            df_word = df.loc[df["word"] == "000" + word[0:2]].values
            #df_word_1 = df.loc[df["word"] == "000" + word].values
            if (word not in YP_uncut_words and word[1:-1] not in YP_uncut_words) and (len(df.loc[df["word"] == "000" + word[0:2]].index) != 0) and (
                    df_word[0][1][2:8] == "000001" or df_word[0][1][9:15] == "000001" or df_word[0][1][16:22] == "000001" or df_word[0][1][23:29] == "000001" or
                    df_word[0][1][30:36] == "000001") and (len(df.loc[df["word"] == "000" + word].index) == 0) and (df_word[0][1][2:8] != "000111" and df_word[0][1][9:15] != "000111" and df_word[0][1][16:22] != "000111" and df_word[0][1][23:29] != "000111" and
                    df_word[0][1][30:36] != "000111"):
                v_noun.append(word)
    except Exception:
        pass

    try:
        for word in v_noun:
            index_word = sen.index(word)
            df_word = df.loc[df["word"] == "000" + word[-2::]].values
            if (len(df.loc[df["word"] == "000" + word[-2::]].index) != 0) and (
                    df_word[0][1][2:8] == "000111" or df_word[0][1][9:15] == "000111" or df_word[0][1][16:22] == "000111" or df_word[0][1][23:29] == "000111" or
                    df_word[0][1][30:36] == "000111") and (word[0:2] != word[-2::]):
                sen[index_word] = word[0:2]
                sen.insert(index_word + 1, word[-2::])
                break
    except Exception:
        pass

    v_noun = []

    #print("8sen_after:", sen)

    # 9. 拆分动词和“遍”
    for word in sen:
        df_word = df.loc[df["word"] == "000" + word].values
        #df_word_1 = df.loc[df["word"] == "000" + word].values
        #print("df_word", df_word)
        if len(df.loc[df["word"] == "000" + word].index) != 0:
            if (df_word[0][1][2:8] == "000001" or df_word[0][1][9:15] == "000001" or df_word[0][1][16:22] == "000001" or df_word[0][1][23:29] == "000001" or
                df_word[0][1][30:36] == "000001") and (len(df.loc[df["word"] == "000" + word].index) == 0):
                v_through.append(word)
                #print("v", v_noun)
        else:
            pass

    try:
        for word in v_through:
            index_word = sen.index(word)
            df_word = df.loc[df["word"] == "000" + word[-1]].values
            if (len(df.loc[df["word"] == "000" + word[-1]].index) != 0) and (
                    df_word[0][1][2:8] == "000110" or df_word[0][1][9:15] == "000110" or df_word[0][1][16:22] == "000110" or df_word[0][1][23:29] == "000110" or
                    df_word[0][1][30:36] == "000110") and (word[0:1] != word[-1]):
                sen[index_word] = word[0:1]
                sen.insert(index_word + 1, word[-1])
                break
    except Exception:
        pass

    v_through = []

    #print("9sen_after9", sen)

    # 9.1 拆分时间方位词和随后的介词
    index_word = 0
    position_word = ""
    prep_word = ""
    index_insert_91 = 0
    m_91 = 0
    try:
        for word in sen:
            index_word = sen.index(word)
            df_word = df.loc[df["word"] == "000" + word[0]].values
            df_word_1 = df.loc[df["word"] == "000" + word[1]].values
            if (word not in YP_uncut_words and word[1:-1] not in YP_uncut_words) and (len(word)==2) and (len(df.loc[df["word"] == "000" + word[0]].index) != 0) and (
                    df_word[0][1][2:8] == "110000" or df_word[0][1][9:15] == "110000" or df_word[0][1][16:22] == "110000" or df_word[0][1][23:29] == "110000" or df_word[0][1][30:36] == "110000"):
                position_word = word[0]
                if (len(df.loc[df["word"] == "000" + word[1]].index) != 0) and (df_word_1[0][1][2:8] == "110011" or df_word_1[0][1][9:15] == "110011" or df_word_1[0][1][16:22] == "110011" or df_word_1[0][1][23:29] == "110011" or df_word_1[0][1][30:36] == "110011" ):
                    prep_word = word[1]
                    sen[index_word] = position_word
                    sen.insert(index_word + 1, prep_word)
                    index_insert_91 = index_word + 1
                    m_91 = 1
                    if m_03 == 1 and index_insert_03 > index_insert_91:
                        index_insert_03 + 1
                    if m_1 == 1 and index_insert_1 > index_insert_91:
                        index_insert_1 + 1
                    break

    except Exception:
        pass

    index_word = 0

    #print("sen_after91", sen)

    # 9.2 东起、南到...结构后的地点词合并标注
    index_start = 0
    index_end = 0
    block_position = []
    combine_word = ""
    m_92 = 0
    index_insert_92 = 0
    mark_p_p = ""
    try:
        for word in sen:
            index_start = sen.index(word)
            df_word = df.loc[df["word"] == "000" + word].values
            if (word not in YP_uncut_words and word[1:-1] not in YP_uncut_words) and (len(df.loc[df["word"] == "000" + word].index) != 0) and (
                    df_word[0][1][2:8] == "110000" or df_word[0][1][9:15] == "110000" or df_word[0][1][16:22] == "110000" or df_word[0][1][23:29] == "110000" or df_word[0][1][30:36] == "110000"):
                df_word_1 = df.loc[df["word"] == "000" + sen[index_start+1]].values
                if (len(df.loc[df["word"] == "000" + sen[index_start+1]].index) != 0) and (df_word_1[0][1][2:8] == "110011" or df_word_1[0][1][9:15] == "110011" or df_word_1[0][1][16:22] == "110011" or df_word_1[0][1][23:29] == "110011" or df_word_1[0][1][30:36] == "110011" ) and df_word_1[0][0][3::] not in ["按", "按照","照", "依", "依照", "依着", "本着", "据", "根据", "依据", "以", "凭", "凭着", "为", "为了", "因", "因为", "由于", "对", "对于", "跟", "关于", "除", "除了", "除去", "除非", "除开", "作为", "比", "便于", "关乎", "有关", "由"]:
                    block_position = sen[index_start+2::]
                    for i in block_position:
                        index_end = block_position.index(i)
                        if i in ["，", "；", "、", "。"]:
                            block_position = block_position[0:index_end]
                            for i in block_position:
                                combine_word = combine_word + i
                                sen.remove(i)
                            sen.insert(index_start+2, combine_word)
                            m_92 += 1
                            index_insert_92 = index_start + 2
    except Exception:
        pass

    mark_p_p = "1 110000 000000 000000 000000 000000"

    if len(block_position) >0 and m_03 == 1 and index_insert_03 > index_insert_92:
        index_insert_03 -= len(block_position)
    if len(block_position) > 0 and m_1 == 1 and index_insert_1 > index_insert_92:
        index_insert_1 -= len(block_position)
    if len(block_position) > 0 and m_91 == 1 and index_insert_91 > index_insert_92:
        index_insert_91 -= len(block_position)

    mark_p_p = "1 110000 000000 000000 000000 000000"

    #print("sen_after92", sen)

    # 9.3 第XX届/首届/第XX位时间地点词合并
    num = ""
    new_list = []
    joint_content = ""
    joint_list = []
    sen_remove_list = []
    index_se = 0
    index_se_end = 0
    mark_start = 0
    mark_end = 0
    index_insert_93 = 0
    mark_se = ""
    flag = 0
    m_93 = 0
    flag = 0

    try:
        for i in sen:
            index_se = sen.index(i)
            if_number = Is_number(i)
            if (if_number == 0 or if_number == 1) and sen[index_se - 1] == "第":
                mark_start = index_se - 1
                flag = 1
                df_word = df.loc[df["word"] == "000" + sen[index_se + 1]].values
                if (len(df.loc[df["word"] == "000" + sen[index_se + 1]].index) != 0) and (df_word[0][1][2:8] == "000011" or df_word[0][1][9:15] == "000011" or df_word[0][1][16:22] == "000011" or df_word[0][1][23:29] == "000011" or df_word[0][1][30:36] == "000011"):
                    mark_end = sen.index(i) + 1
                elif sen[index_se + 1] in dot_dict:
                    mark_end = sen.index(i) + 1
        if flag != 0:
            index_insert_93 = mark_start

    except Exception:
        pass

    flag = 0

    try:
        for i in sen:
            #if_number = Is_number(i)
            df_word = df.loc[df["word"] == "000" + word].values
            index_se = sen.index(i)
            if (len(df.loc[df["word"] == "000" + word].index) != 0) and (df_word[0][1][2:8] == "000010" or df_word[0][1][9:15] == "000010" or df_word[0][1][16:22] == "000010" or df_word[0][1][23:29] == "000010" or df_word[0][1][30:36] == "000010") and sen[index_se - 1] == "第":
                mark_start = index_se - 1
                flag = 1
                df_word_1 = df.loc[df["word"] == "000" + sen[index_se + 1]].values
                if (len(df.loc[df["word"] == "000" + sen[index_se + 1]].index) != 0) and (df_word_1[0][1][2:8] == "000011" or df_word_1[0][1][9:15] == "000011" or df_word_1[0][1][16:22] == "000011" or df_word_1[0][1][23:29] == "000011" or
                        df_word_1[0][1][30:36] == "000011"):
                    mark_end = sen.index(i) + 1
                elif sen[index_se + 1] in dot_dict:
                    mark_end = sen.index(i) + 1

        if flag != 0:
            index_insert_93 = mark_start

    except Exception:
        pass

    flag = 0

    try:
        for i in sen:
            df_word = df.loc[df["word"] == "000" + sen[index_se + 1]].values
            index_se = sen.index(i)
            if (i == ["首", "二", "三", "四", "五", "六", "七", "八", "九", "十", "十一", "十二", "十三", "十四", "十五", "十六", "十七", "十八", "十九", "二十"]) and (len(df.loc[df["word"] == "000" + sen[index_se + 1]].index) != 0 and df_word[0][1][2:8] == "000011" or df_word[0][1][9:15] == "000011" or df_word[0][1][16:22] == "000011" or df_word[0][1][23:29] == "000011" or df_word[0][1][30:36] == "000011"):
                mark_start = index_se
                mark_end = sen.index(i) + 1
                flag = 1
                break
            elif (i == ["一", "二", "三", "四", "五", "六", "七", "八", "九", "十", "十一", "十二", "十三", "十四", "十五", "十六", "十七", "十八", "十九", "二十"]) and (sen[index_se - 1] == "第") and (len(df.loc[df["word"] == "000" + sen[index_se + 1]].index) != 0 and df_word[0][1][2:8] == "000011" or df_word[0][1][9:15] == "000011" or df_word[0][1][16:22] == "000011" or df_word[0][1][23:29] == "000011" or df_word[0][1][30:36] == "000011"):
                mark_start = index_se - 1
                mark_end = sen.index(i) + 1
                flag = 1
                break
            elif (i == ["一", "二", "三", "四", "五", "六", "七", "八", "九", "十", "十一", "十二", "十三", "十四", "十五", "十六", "十七", "十八", "十九", "二十"]) and (sen[index_se - 1] == "第") and (sen[index_se + 1] in dot_dict):
                mark_start = index_se - 1
                mark_end = sen.index(i) + 1
                flag = 1
                break

        if flag != 0:
            index_insert_93 = mark_start

    except Exception:
        pass

    try:
        if mark_end > mark_start:
            joint_content = "".join(sen[mark_start:mark_end + 1])
            joint_list.append(joint_content)

            for i in range(mark_start, mark_end +1):
                sen_remove_list.append(sen[i])

            for i in sen_remove_list:
                sen.remove(i)

            if len(joint_list) > 0:
                for j in joint_list:
                    sen.insert(index_insert_93, j)
                    m_93 = 1
                    if m_03 == 1 and index_insert_03 > index_insert_93:
                        index_insert_91 -= (len(j)-1)
                    if m_1 == 1 and index_insert_1 > index_insert_93:
                        index_insert_1 -= (len(j)-1)
                    if m_91 == 1 and index_insert_91 > index_insert_93:
                        index_insert_91 -= (len(j)-1)
                    if m_92 == 1 and index_insert_92 > index_insert_93:
                        index_insert_92 -= (len(j)-1)

        if mark_end == mark_start:
            joint_content = ""
            joint_list = []

    except Exception:
        pass

    mark_se = "1 111101 000000 000000 000000 000000"

    new_list = []

    #print("sen_after93", sen)

    # 9.4 多重地点词合并
    mark_start = 0
    mark_mid_end = 0
    mark_mid_start = 0
    mark_end = 0
    new_list = []
    joint_content = ""
    joint_list = []
    sen_remove_list_1 = []
    sen_remove_list_2 = []
    m_941 = 0
    m_942 = 0
    index_i_mid = 0
    index_insert_941 = 0
    index_insert_942 = 0
    mark_p_d = ""
    flag = 0

    try:
        for i in sen:
            df_word = df.loc[df["word"] == "000" + i].values
            if (i in YP_uncut_words):
                mark_start = sen.index(i)
                flag = 1
                mark_p_d = "1 010111 000000 000000 000000 000000"
                break
            elif ((len(df.loc[df["word"] == "000" + i].index) != 0) and (
                    df_word[0][1][2:8] in ["110000", "010111"] or df_word[0][1][9:15] in ["110000", "010111"] or df_word[0][1][16:22] in ["110000", "010111"]or df_word[0][1][
                                                                                                  23:29] in ["110000", "010111"] or
                    df_word[0][1][30:36] in ["110000", "010111"])):
                mark_start = sen.index(i)
                flag = 1
                mark_p_d = "1 110000 000000 000000 000000 000000"
                break
            else:
                continue
            break

        if flag > 0:
            new_list = sen[mark_start + 1::]
            index_insert_941 = mark_start

    except Exception:
        pass

    flag = 0
    #print("94new_list", new_list)

    try:
        for i in new_list:
            index_i_mid = sen.index(i)
            df_word = df.loc[df["word"] == "000" + i].values
            if (len(df.loc[df["word"] == "000" + i].index) != 0) and (
                    df_word[0][1][2:8] == "000001" or df_word[0][1][9:15] == "000001" or df_word[0][1][16:22] == "000001" or df_word[0][1][
                                                                                                  23:29] == "000001" or
                    df_word[0][1][30:36] == "000001") and (df_word[0][1][2:8] != "110001" and df_word[0][1][9:15] != "110001" and df_word[0][1][16:22] != "110001" and df_word[0][1][
                                                                                                  23:29] != "110001" and
                                                           df_word[0][1][30:36] != "110001"):
                mark_mid_end = sen.index(i) - 1
                new_list = sen[index_i_mid + 1::]
                for k in new_list:
                    df_word_1 = df.loc[df["word"] == "000" + k].values
                    if (len(df.loc[df["word"] == "000" + k].index) != 0) and (df_word[0][1][2:8] == "110000" or df_word[0][1][9:15] == "110000" or df_word[0][1][
                                                                                             16:22] == "110000" or df_word[0][1][23:29] == "110000" or df_word[0][1][30:36] == "110000"):
                        mark_mid_start = sen.index(k)
                        index_insert_942 = mark_mid_start - 1
                        new_list = sen[mark_mid_start::]
                        break
                    else:
                        continue
                    break
                for k in new_list:
                    df_word_2 = df.loc[df["word"] == "000" + k].values
                    if (len(df.loc[df["word"] == "000" + k].index) != 0) and (
                            df_word_2[0][1][2:8] in ["110000", "000010"] or df_word_2[0][1][9:15] in ["110000", "000010"] or df_word_2[0][1][
                                                                                                       16:22] in [
                                "110000", "000010"] or
                            df_word_2[0][1][23:29] in ["110000", "000010"] or df_word_2[0][1][30:36] in ["110000", "000010"]):
                        mark_end = sen.index(k)
                    elif (len(df.loc[df["word"] == "000" + k].index) != 0) and (
                            df_word_2[1][2:8] not in ["110000", "000010"] and df_word_2[1][9:15] not in ["110000", "000010"] and
                            df_word_2[1][16:22] not in ["110000", "000010"] and df_word_2[1][23:29] not in ["110000", "000010"] and df_word_2[1][30:36] not in ["110000", "000010"]):
                        break

                    else:
                        continue
                    break

    except Exception:
        pass

    try:
        if mark_mid_end != 0 and mark_mid_end > mark_start:
            for i in sen[mark_start:mark_mid_end + 1]:
                df_word = df.loc[df["word"] == "000" + i].values
                if (len(df.loc[df["word"] == "000" + i].index) != 0) and (df_word[0][1][2:8] in ["110000", "000010"] or df_word[0][1][9:15] in ["110000", "000010"] or df_word[0][1][16:22] in [
                                    "110000", "000010"] or df_word[0][1][23:29] in ["110000", "000010"] or df_word[0][1][30:36] in ["110000", "000010"]):
                    pass
                elif (len(df.loc[df["word"] == "000" + i].index) != 0) and (df_word[0][1][2:8] not in ["110000", "000010"] or df_word[0][1][9:15] not in ["110000", "000010"] or df_word[0][1][16:22] not in [
                                    "110000", "000010"] or df_word[0][1][23:29] not in ["110000", "000010"] or df_word[0][1][30:36] not in ["110000", "000010"]):
                    mark_mid_end = 0

        if mark_mid_end != 0 and mark_mid_end > mark_start:
            joint_content = "".join(sen[mark_start:mark_mid_end + 1])
            joint_list.append(joint_content)
            for i in range(mark_start, mark_mid_end + 1):
                sen_remove_list_1.append(sen[i])

        if mark_mid_start != 0 and mark_end != 0 and mark_mid_start < mark_end:
            for i in sen[mark_mid_start:mark_end + 1]:
                df_word = df.loc[df["word"] == "000" + i].values
                if (len(df.loc[df["word"] == "000" + i].index) != 0) and (df_word[0][1][2:8] in ["110000", "000010"] or df_word[0][1][9:15] in ["110000", "000010"] or df_word[0][1][16:22] in [
                                    "110000", "000010"] or df_word[0][1][23:29] in ["110000", "000010"] or df_word[0][1][30:36] in ["110000", "000010"]):
                    pass
                elif (len(df.loc[df["word"] == "000" + i].index) != 0) and (df_word[0][1][2:8] not in ["110000", "000010"] and df_word[0][1][9:15] not in ["110000", "000010"] and df_word[0][1][16:22] not in [
                                    "110000", "000010"] and df_word[0][1][23:29] not in ["110000", "000010"] and df_word[0][1][30:36] not in ["110000", "000010"]):
                    mark_end = 0
        if mark_mid_start != 0 and mark_end != 0 and mark_mid_start < mark_end:
            joint_content = "".join(sen[mark_mid_start:mark_end + 1])
            joint_list.append(joint_content)
            for i in range(mark_mid_start, mark_end + 1):
                sen_remove_list_2.append(sen[i])

        for i in sen_remove_list_1:
            sen.remove(i)

        for i in sen_remove_list_2:
            sen.remove(i)

        sen.insert(index_insert_941, joint_list[0])
        m_941 = 1
        if m_03 == 1 and index_insert_03 > index_insert_941:
            index_insert_03 -= (len(joint_list[1])-1)
        if m_1 == 1 and index_insert_1 > index_insert_941:
            index_insert_1 -= (len(joint_list[1])-1)
        if m_91 == 1 and index_insert_91 > index_insert_941:
            index_insert_91 -= (len(joint_list[1])-1)
        if m_92 == 1 and index_insert_92 > index_insert_941:
            index_insert_92 -= (len(joint_list[1])-1)
        if m_93 == 1 and index_insert_93 > index_insert_941:
            index_insert_93 -= (len(joint_list[1])-1)

        sen.insert(index_insert_942, joint_list[1])
        m_942 = 1
        if m_03 == 1 and index_insert_03 > index_insert_942:
            index_insert_03 -= (len(joint_list[1])-1)
        if m_1 == 1 and index_insert_1 > index_insert_942:
            index_insert_1 -= (len(joint_list[1])-1)
        if m_91 == 1 and index_insert_91 > index_insert_942:
            index_insert_91 -= (len(joint_list[1])-1)
        if m_92 == 1 and index_insert_92 > index_insert_942:
            index_insert_92 -= (len(joint_list[1])-1)
        if m_93 == 1 and index_insert_93 > index_insert_942:
            index_insert_93 -= (len(joint_list[1])-1)


        if mark_mid_end == 0 or mark_mid_start == 0 or mark_end == 0:
            joint_content = ""
            joint_list = []

    except Exception:
        pass

    new_list = []

    #print("sen_after94", sen)

    # 9.5 单重地点词合并
    mark_start = 0
    mark_end = 0
    new_list = []
    joint_content = ""
    joint_list = []
    sen_remove_list = []
    m_95 = 0
    index_i_tp = 0
    index_insert_95 = 0
    mark_p = ""
    flag = 0

    try:
        for i in sen:
            df_word = df.loc[df["word"] == "000" + i].values
            if (i in YP_uncut_words):
                mark_start = sen.index(i)
                flag = 1
                mark_p = "1 010111 000000 000000 000000 000000"
                break
            elif ((len(df.loc[df["word"] == "000" + i].index) != 0) and (df_word[0][1][2:8] == "110000" or df_word[0][1][9:15] == "110000" or df_word[0][1][16:22] == "110000" or df_word[0][1][23:29] == "110000" or df_word[0][1][30:36] == "110000")):
                mark_start = sen.index(i)
                flag = 1
                mark_p = "1 110000 000000 000000 000000 000000"
                break
            else:
                continue
            break

        #print("mark_start", mark_start)

        if flag != 0:
            new_list = sen[mark_start+1::]
            index_insert_95 = mark_start

    except Exception:
        pass

    flag = 0

    #print("95new_list", new_list)

    try:
        for i in new_list:
            index_i_tp = sen.index(i)
            df_word = df.loc[df["word"] == "000" + i].values
            df_word_after = df.loc[df["word"] == "000" + new_list[index_i_tp+1]].values
            if (len(df.loc[df["word"] == "000" + i].index) != 0) and (
                    df_word[0][1][2:8] in ["110000", "000010"] or df_word[0][1][9:15] in ["110000", "000010"] or df_word[0][1][16:22] in ["110000", "000010"] or df_word[0][1][23:29] in ["110000", "000010"] or df_word[0][1][30:36] in ["110000", "000010"]) and df_word[0][0][3::] not in ["个", "千", "万", "亿", "兆", "对", "双", "两"] and (
                    df_word_after[0][1][2:8] not in ["000001", "000101"] and df_word_after[0][1][9:15] not in ["000001", "000101"] and df_word_after[0][1][16:22] not in ["000001", "000101"] and df_word_after[0][1][23:29] not in ["000001", "000101"] and df_word_after[0][1][30:36] not in ["000001", "000101"]):
                mark_end = sen.index(i)
            elif (len(df.loc[df["word"] == "000" + i].index) != 0) and (
                    df_word[0][1][2:8] not in ["110000", "000010"] and df_word[0][1][9:15] not in ["110000", "000010"] and df_word[0][1][16:22] not in [
                "110000", "000010"] and df_word[0][1][23:29] not in ["110000", "000010"] and df_word[0][1][30:36] not in ["110000", "000010"]):
                break
            else:
                continue
            break
    except Exception:
        pass

    try:
        if mark_end > mark_start:
            joint_content = "".join(sen[mark_start:mark_end + 1])
            joint_list.append(joint_content)

            for i in range(mark_start, mark_end +1):
                sen_remove_list.append(sen[i])

            for i in sen_remove_list:
                sen.remove(i)

            if len(joint_list) > 0:
                for j in joint_list:
                    sen.insert(index_insert_95, j)
                    m_95 = 1
                    if m_03 == 1 and index_insert_03 > index_insert_95:
                        index_insert_03 -= (len(j) - 1)
                    if m_1 == 1 and index_insert_1 > index_insert_95:
                        index_insert_1 -= (len(j) - 1)
                    if m_91 == 1 and index_insert_91 > index_insert_95:
                        index_insert_91 -= (len(j)-1)
                    if m_92 == 1 and index_insert_92 > index_insert_95:
                        index_insert_92 -= (len(j)-1)
                    if m_93 == 1 and index_insert_93 > index_insert_95:
                        index_insert_93 -= (len(j)-1)
                    if m_941 == 1 and index_insert_941 > index_insert_95:
                        index_insert_941 -= (len(j)-1)
                    if m_942 == 1 and index_insert_942 > index_insert_95:
                        index_insert_942 -= (len(j)-1)

        if mark_end == mark_start:
            joint_content = ""
            joint_list = []

    except Exception:
        pass

    new_list = []

    #print("sen_after95", sen)

    # 9.6 多重时间词合并
    mark_start = 0
    mark_mid_end = 0
    mark_mid_start = 0
    mark_end = 0
    new_list = []
    joint_content = ""
    joint_list = []
    sen_remove_list_1 = []
    sen_remove_list_2 = []
    m_961 = 0
    m_962 = 0
    index_i_mid = 0
    index_insert_961 = 0
    index_insert_962 = 0
    mark_t_d = ""
    flag = 0

    try:
        for i in sen:
            df_word = df.loc[df["word"] == "000" + i].values
            if (i in YP_uncut_words):
                mark_start = sen.index(i)
                # print("i", i)
                flag = 1
                break
                mark_t_d = "1 010111 000000 000000 000000 000000"
            elif ((len(df.loc[df["word"] == "000" + i].index) != 0) and (
                    df_word[0][1][2:8] in ["111011", "010111"] or df_word[0][1][9:15] in ["111011", "010111"] or df_word[0][1][16:22] in ["111011", "010111"] or df_word[0][1][23:29] in ["111011", "010111"] or
                    df_word[0][1][30:36] in ["111011", "010111"])):
                mark_start = sen.index(i)
                #print("i", i)
                flag = 1
                mark_t_d = "1 111011 000000 000000 000000 000000"
                break
            else:
                continue
            break

        if flag == 1:
            new_list = sen[mark_start + 1::]
            index_insert_961 = mark_start

    except Exception:
        pass

    #print("96new_list", new_list)
    flag = 0

    try:
        for i in new_list:
            index_i_mid = sen.index(i)
            df_word = df.loc[df["word"] == "000" + i].values
            if (len(df.loc[df["word"] == "000" + i].index) != 0) and (
                    df_word[0][1][2:8] == "000001" or df_word[0][1][9:15] == "000001" or df_word[0][1][16:22] == "000001" or df_word[0][1][
                                                                                                  23:29] == "000001" or
                    df_word[0][1][30:36] == "000001") and (
                    df_word[0][1][2:8] != "110001" and df_word[0][1][9:15] != "110001" and df_word[0][1][16:22] != "110001" and df_word[0][1][
                                                                                                     23:29] != "110001" and
                    df_word[0][1][30:36] != "110001"):
                mark_mid_end = sen.index(i) - 1
                new_list = sen[index_i_mid + 1::]
                for k in new_list:
                    df_word = df.loc[df["word"] == "000" + k].values
                    if (len(df.loc[df["word"] == "000" + k].index) != 0) and (df_word[0][1][2:8] == "110000" or df_word[0][1][9:15] == "110000" or df_word[0][1][
                                                                                              16:22] == "110000" or df_word[0][1][23:29] == "110000" or df_word[0][1][30:36] == "110000"):
                        mark_mid_start = sen.index(k)
                        index_insert_962 = mark_mid_start - 1
                        new_list = sen[mark_mid_start::]
                        break
                    else:
                        continue
                    break
                for k in new_list:
                    df_word = df.loc[df["word"] == "000" + k].values
                    if (len(df.loc[df["word"] == "000" + k].index) != 0) and (
                            df_word[0][1][2:8] in ["110000", "000010"] or df_word[0][1][9:15] in ["110000", "000010"] or df_word[0][1][16:22] in [
                                "110000", "000010"] or
                            df_word[0][1][23:29] in ["110000", "000010"] or df_word[0][1][30:36] in ["110000", "000010"]):
                        mark_end = sen.index(k)
                    elif (len(df.loc[df["word"] == "000" + k].index) != 0) and (df_word[0][1][2:8] not in ["110000", "000010"] and df_word[0][1][9:15] not in ["110000", "000010"] and df_word[0][1][16:22] not in [
                                "110000", "000010"] and df_word[0][1][23:29] not in ["110000", "000010"] and df_word[0][1][30:36] not in ["110000", "000010"]):
                        break

                else:
                    continue
                break

    except Exception:
        pass

    try:
        if mark_mid_end != 0 and mark_mid_end > mark_start:
            for i in sen[mark_start:mark_mid_end + 1]:
                df_word = df.loc[df["word"] == "000" + i].values
                if (len(df.loc[df["word"] == "000" + i].index) != 0) and (df_word[0][1][2:8] in ["110000", "000010"] or df_word[0][1][9:15] in ["110000", "000010"] or df_word[0][1][16:22] in ["110000", "000010"] or df_word[0][1][23:29] in ["110000", "000010"] or df_word[0][1][30:36] in ["110000", "000010"]):
                    pass
                elif (len(df.loc[df["word"] == "000" + i].index) != 0) and (
                        df_word[0][1][2:8] not in ["110000", "000010"] or df_word[0][1][9:15] not in ["110000", "000010"] or df_word[0][1][16:22] not in ["110000", "000010"] or df_word[0][1][23:29] not in ["110000", "000010"] or df_word[0][1][30:36] not in ["110000", "000010"]):
                    mark_mid_end = 0

        if mark_mid_end != 0 and mark_mid_end > mark_start:
            joint_content = "".join(sen[mark_start:mark_mid_end + 1])
            joint_list.append(joint_content)
            for i in range(mark_start, mark_mid_end + 1):
                sen_remove_list_1.append(sen[i])

        if mark_mid_start != 0 and mark_end != 0 and mark_mid_start < mark_end:
            for i in sen[mark_mid_start:mark_end + 1]:
                for j in database_marks:
                    if (i == j[0][3::]) and (
                            j[1][2:8] in ["110000", "000010"] or j[1][9:15] in ["110000", "000010"] or j[1][16:22] in ["110000", "000010"] or j[1][23:29] in ["110000", "000010"] or j[1][30:36] in ["110000","000010"]):
                        pass
                    elif (i == j[0][3::]) and (j[1][2:8] not in ["110000", "000010"] or j[1][9:15] not in ["110000", "000010"] or j[1][16:22] not in ["110000", "000010"] or j[1][23:29] not in ["110000", "000010"] or j[1][30:36] not in ["110000", "000010"]):
                        mark_end = 0

        if mark_mid_start != 0 and mark_end != 0 and mark_mid_start < mark_end:
            joint_content = "".join(sen[mark_mid_start:mark_end + 1])
            joint_list.append(joint_content)
            for i in range(mark_mid_start, mark_end + 1):
                sen_remove_list_2.append(sen[i])

        for i in sen_remove_list_1:
            sen.remove(i)

        for i in sen_remove_list_2:
            sen.remove(i)

        sen.insert(index_insert_961, joint_list[0])
        m_961 = 1
        if m_03 == 1 and index_insert_03 > index_insert_961:
            index_insert_03 -= (len(j)-1)
        if m_1 == 1 and index_insert_1 > index_insert_961:
            index_insert_1 -= (len(j)-1)
        if m_91 == 1 and index_insert_91 > index_insert_961:
            index_insert_91 -= (len(j)-1)
        if m_92 == 1 and index_insert_92 > index_insert_961:
            index_insert_92 -= (len(j)-1)
        if m_93 == 1 and index_insert_93 > index_insert_961:
            index_insert_93 -= (len(j)-1)
        if m_941 == 1 and index_insert_941 > index_insert_961:
            index_insert_941 -= (len(j)-1)
        if m_942 == 1 and index_insert_942 > index_insert_961:
            index_insert_942 -= (len(j)-1)
        if m_95 == 1 and index_insert_95 > index_insert_961:
            index_insert_95 -= (len(j)-1)

        sen.insert(index_insert_962, joint_list[1])
        m_962 = 1
        if m_03 == 1 and index_insert_03 > index_insert_962:
            index_insert_03 -= (len(j)-1)
        if m_1 == 1 and index_insert_1 > index_insert_962:
            index_insert_1 -= (len(j)-1)
        if m_91 == 1 and index_insert_91 > index_insert_962:
            index_insert_91 -= (len(j)-1)
        if m_92 == 1 and index_insert_92 > index_insert_962:
            index_insert_92 -= (len(j)-1)
        if m_93 == 1 and index_insert_93 > index_insert_962:
            index_insert_93 -= (len(j)-1)
        if m_941 == 1 and index_insert_941 > index_insert_962:
            index_insert_941 -= (len(j)-1)
        if m_942 == 1 and index_insert_942 > index_insert_962:
            index_insert_942 -= (len(j)-1)
        if m_95 == 1 and index_insert_95 > index_insert_962:
            index_insert_95 -= (len(j)-1)

        if mark_mid_end == 0 or mark_mid_start == 0 or mark_end == 0:
            joint_content = ""
            joint_list = []

    except Exception:
        pass

    new_list = []
    flag = 0

    #print("sen_after96", sen)

    # 9.7.1 单重时间词合并
    mark_start = 0
    mark_end = 0
    new_list = []
    joint_content = ""
    joint_list = []
    sen_remove_list = []
    index_tp = 0
    m_971 = 0
    index_i_tp = 0
    index_insert_9711 = 0
    mark_t = ""
    flag = 0

    try:
        for i in sen:
            index_tp = sen.index(i)
            df_word = df.loc[df["word"] == "000" + i].values
            df_word_before = df.loc[df["word"] == "000" + sen[index_tp-1]].values
            # if (i in YP_uncut_words):
            #     mark_start = sen.index(i)
            #     flag = 1
            #     mark_t = "1 010111 000000 000000 000000 000000"
            if ((len(df.loc[df["word"] == "000" + i].index) != 0) and (df_word[0][1][2:8] in ["111011"] or df_word[0][1][9:15] in ["111011"] or df_word[0][1][16:22] in ["111011"] or df_word[0][1][23:29] in ["111011"] or
                    df_word[0][1][30:36] in ["111011"])) and (df_word_before[0][1][2:8] not in ["000010"] and df_word_before[0][1][9:15] not in ["000010"] and df_word_before[0][1][16:22] not in ["000010"] and df_word_before[0][1][23:29] not in ["000010"] and df_word_before[0][1][30:36] not in ["000010"]) and (sen[index_tp+1] not in ["按", "按照","照", "依", "依照", "依着", "本着", "据", "根据", "依据", "以", "凭", "凭着", "为", "为了", "因", "因为", "由于", "对", "对于", "跟", "关于", "除", "除了", "除去", "除非", "除开", "作为", "比", "便于", "关乎", "有关", "由"]):
                mark_start = sen.index(i)
                flag = 1
                mark_t = "1 111011 000000 000000 000000 000000"

        if flag == 1:
            new_list = sen[mark_start + 1::]
            index_insert_971 = mark_start

    except Exception:
        pass

    #print("97new_list", new_list)
    flag = 0

    try:
        for i in new_list:
            index_i_end = sen.index(i)
            if i in ["的", "之"]:
                mark_end = sen.index(i) - 1
    except Exception:
        pass

    try:
        for i in new_list:
            index_i_tp = sen.index(i)
            df_word = df.loc[df["word"] == "000" + i].values
            if (len(df.loc[df["word"] == "000" + i].index) != 0) and (
                    df_word[0][1][2:8] in ["000001", ] or df_word[0][1][9:15] in ["000001", ] or
                    df_word[0][1][16:22] in ["000001", ] or df_word[0][1][23:29] in ["000001", ] or df_word[0][1][30:36] in ["000001", ]):
                mark_end = 0
                #print("1", i)
                break
            elif (len(df.loc[df["word"] == "000" + i].index) != 0) and (
                    df_word[0][1][2:8] in ["111011", "000111"] or df_word[0][1][9:15] in ["111011", "000111"] or
                    df_word[0][1][16:22] in ["111011", "000111"] or df_word[0][1][23:29] in ["111011", "000111"] or df_word[0][1][30:36] in [
                        "111011", "000111"]):
                mark_end = sen.index(i)
                #print("2", i)
            elif (len(df.loc[df["word"] == "000" + i].index) != 0) and (
                    df_word[0][1][2:8] in ["111011"] or df_word[0][1][9:15] in ["111011"] or df_word[0][1][
                                                                                                         16:22] in [
                        "111011"] or df_word[0][1][23:29] in ["111011"] or df_word[0][1][30:36] in [
                        "111011"]):
                mark_end = sen.index(i)-1
                #print("3", i)
    except Exception:
        pass

    try:
        if mark_end > mark_start:
            joint_content = "".join(sen[mark_start:mark_end + 1])
            joint_list.append(joint_content)

            for i in range(mark_start, mark_end + 1):
                sen_remove_list.append(sen[i])

            for i in sen_remove_list:
                sen.remove(i)
            if len(joint_list) > 0:
                for j in joint_list:
                    sen.insert(index_insert_971, j)
                    m_971 = 1
                    if m_03 == 1 and index_insert_03 > index_insert_971:
                        index_insert_03 -= (len(j) - 1)
                    if m_1 == 1 and index_insert_1 > index_insert_971:
                        index_insert_1 -= (len(j) - 1)
                    if m_91 == 1 and index_insert_91 > index_insert_971:
                        index_insert_91 -= (len(j)-1)
                    if m_92 == 1 and index_insert_92 > index_insert_971:
                        index_insert_92 -= (len(j)-1)
                    if m_93 == 1 and index_insert_93 > index_insert_971:
                        index_insert_93 -= (len(j)-1)
                    if m_941 == 1 and index_insert_941 > index_insert_971:
                        index_insert_941 -= (len(j)-1)
                    if m_942 == 1 and index_insert_942 > index_insert_971:
                        index_insert_942 -= (len(j)-1)
                    if m_95 == 1 and index_insert_95 > index_insert_971:
                        index_insert_95 -= (len(j)-1)
                    if m_961 == 1 and index_insert_961 > index_insert_971:
                        index_insert_961 -= (len(j)-1)
                    if m_962 == 1 and index_insert_962 > index_insert_971:
                        index_insert_962 -= (len(j)-1)

        if mark_end == mark_start:
            joint_content = ""
            joint_list = []

    except Exception:
        pass

    new_list = []

    #print("sen_after971", sen)

    # 9.7.2 顺序词（第xx届/第XX位/第XX张）合并
    mark_start = 0
    mark_end = 0
    new_list = []
    joint_content = ""
    joint_list = []
    sen_remove_list = []
    m_972 = 0
    index_no = 0
    index_insert_972 = 0
    mark_no = ""
    flag = 0

    try:
        for i in sen:
            df_word = df.loc[df["word"] == "000" + i].values
            if (i not in YP_uncut_words and i[1:-1] not in YP_uncut_words) and (len(df.loc[df["word"] == "000" + i].index) != 0 and df_word[0][0][3::] == "第") and (
                    df_word[0][1][2:8] == "000110" or df_word[0][1][9:15] == "000110" or df_word[0][1][16:22] == "000110" or df_word[0][1][
                                                                                                  23:29] == "000110" or
                    df_word[0][1][30:36] == "000110"):
                mark_start = sen.index(i)
                flag = 1

        if flag == 1:
            new_list = sen[mark_start::]
            index_insert_972 = mark_start

    except Exception:
        pass

    # print("new_list", new_list)
    flag = 0

    try:
        for i in new_list:
            index_no = sen.index(i)
            df_word = df.loc[df["word"] == "000" + i].values
            if (len(df.loc[df["word"] == "000" + i].index) != 0) and (
                    df_word[0][1][2:8] in ["111011", ] or df_word[0][1][9:15] in ["111011", ] or
                    df_word[0][1][16:22] in ["111011", ] or df_word[0][1][23:29] in ["111011", ] or df_word[0][1][30:36] in ["111011", ]):
                mark_end = sen.index(i)
                mark_no = "1 111011 000000 000000 000000 000000"
                break
            elif (len(df.loc[df["word"] == "000" + i].index) != 0) and (
                    df_word[0][1][2:8] in ["110000", ] or df_word[0][1][9:15] in ["110000", ] or
                    df_word[0][1][16:22] in ["110000", ] or df_word[0][1][23:29] in ["110000", ] or df_word[0][1][30:36] in ["110000", ]):
                mark_end = sen.index(i)
                mark_no = "1 110000 000000 000000 000000 000000"
                break
            elif (len(df.loc[df["word"] == "000" + i].index) != 0) and (
                    df_word[0][1][2:8] in ["000011", ] or df_word[0][1][9:15] in ["000011", ] or
                    df_word[0][1][16:22] in ["000011", ] or df_word[0][1][23:29] in ["000011", ] or df_word[0][1][30:36] in ["000011", ]):
                mark_end = sen.index(i)
                mark_no = "1 010000 000000 000000 000000 000000"
    except Exception:
        pass

    try:
        if mark_end > mark_start:
            joint_content = "".join(sen[mark_start:mark_end + 1])
            joint_list.append(joint_content)

            for i in range(mark_start, mark_end + 1):
                sen_remove_list.append(sen[i])

            for i in sen_remove_list:
                sen.remove(i)

            if len(joint_list) > 0:
                for j in joint_list:
                    sen.insert(index_insert_972, j)
                    m_972 += 1
                    if m_03 == 1 and index_insert_03 > index_insert_972:
                        index_insert_03 -= (len(j) - 1)
                    if m_1 == 1 and index_insert_1 > index_insert_972:
                        index_insert_1 -= (len(j) - 1)
                    if m_91 == 1 and index_insert_91 > index_insert_972:
                        index_insert_91 -= (len(j)-1)
                    if m_92 == 1 and index_insert_92 > index_insert_972:
                        index_insert_92 -= (len(j)-1)
                    if m_93 == 1 and index_insert_93 > index_insert_972:
                        index_insert_93 -= (len(j)-1)
                    if m_941 == 1 and index_insert_941 > index_insert_972:
                        index_insert_941 -= (len(j)-1)
                    if m_942 == 1 and index_insert_942 > index_insert_972:
                        index_insert_942 -= (len(j)-1)
                    if m_95 == 1 and index_insert_95 > index_insert_972:
                        index_insert_95 -= (len(j)-1)
                    if m_961 == 1 and index_insert_961 > index_insert_972:
                        index_insert_961 -= (len(j)-1)
                    if m_962 == 1 and index_insert_962 > index_insert_972:
                        index_insert_962 -= (len(j)-1)
                    if m_971 == 1 and index_insert_971 > index_insert_972:
                        index_insert_971 -= (len(j)-1)

        if mark_end == mark_start:
            joint_content = ""
            joint_list = []

    except Exception:
        pass

    new_list = []

    #print("sen_after972", sen)

    # 9.7.3 xx年xx月xx日至xx年xx月xx日合并
    mark_start = 0
    mark_end = 0
    new_list = []
    joint_content = ""
    joint_list = []
    sen_remove_list = []
    m_973 = 0
    index_connect_number = 0
    index_insert_973 = 0
    mark_connect_number = ""
    flag = 0

    try:
        for i in sen:
            df_word = df.loc[df["word"] == "000" + i].values
            df_word_1 = df.loc[df["word"] == "000" + i[0]].values
            df_word_after_1 = df.loc[df["word"] == "000" + i[1]].values
            if (i not in YP_uncut_words and i[1:-1] not in YP_uncut_words) and (len(df.loc[df["word"] == "000" + i].index) != 0) and (
                    df_word[0][1][2:8] == "000010" or df_word[0][1][9:15] == "000010" or df_word[0][1][16:22] == "000010" or df_word[0][1][
                                                                                                  23:29] == "000010" or
                    df_word[0][1][30:36] == "000010"):
                index_connect_number = sen.index(i)
                mark_start = index_connect_number
                flag = 1
                if sen[index_connect_number - 1] in ["从", "自"]:
                    mark_start = index_connect_number - 1
                break
            elif (i not in YP_uncut_words and i[1:-1] not in YP_uncut_words) and (len(df.loc[df["word"] == "000" + i[0]].index) != 0) and (
                    df_word_1[0][1][2:8] == "000010" or df_word_1[0][1][9:15] == "000010" or df_word_1[0][1][16:22] == "000010" or df_word_1[0][1][
                                                                                                  23:29] == "000010" or
                    df_word_1[0][1][30:36] == "000010") and df_word_after_1[0][1][2:8] != "000011" and df_word_after_1[0][1][9:15] != "000011" and df_word_after_1[0][1][16:22] != "000011" and df_word_after_1[0][1][23:29] != "000011" and df_word_after_1[0][1][30:36] != "000011":
                index_connect_number = sen.index(i)
                mark_start = index_connect_number
                flag = 1
                if sen[index_connect_number - 1] in ["从", "自"]:
                    mark_start = index_connect_number - 1

        if flag == 1:
            new_list = sen[mark_start::]
            index_insert_973 = mark_start

    except Exception:
        pass

    #print("index_insert_973", index_insert_973)
    flag = 0
    #print("new", new_list)

    try:
        for i in new_list:
            index_connect_number = new_list.index(i)
            df_word = df.loc[df["word"] == "000" + i].values
            if (i not in YP_uncut_words and i[1:-1] not in YP_uncut_words) and (len(df.loc[df["word"] == "000" + i].index) != 0) and (df_word[0][1][2:8] in ["000001", "000110", "110101"] or df_word[0][1][9:15] in ["000001", "000110", "110101"] or df_word[0][1][16:22] in ["000001", "000110", "110101"] or df_word[0][1][23:29] in ["000001", "000110", "110101"] or df_word[0][1][30:36] in ["000001", "000110", "110101"]) and (df_word[0][0][3::] not in ["起", "止"]):
                if new_list[index_connect_number - 1][-1] in ["日", "月", "年", "时", "分", "秒"]:
                    mark_end = sen.index(i) - 1
                    break
            elif i in ["起", "止"]:
                if new_list[index_connect_number - 1][-1] in ["日", "月", "年", "时", "分", "秒"]:
                    mark_end = sen.index(i)
                    break
            else:
                continue
            break

    except Exception:
        pass

    try:
        if mark_end > mark_start:
            joint_content = "".join(sen[mark_start:mark_end + 1])
            joint_list.append(joint_content)

            for i in range(mark_start, mark_end + 1):
                sen_remove_list.append(sen[i])

            for i in sen_remove_list:
                sen.remove(i)

            if len(joint_list) > 0:
                for j in joint_list:
                    sen.insert(index_insert_973, j)
                    m_973 = 1
                    if m_03 == 1 and index_insert_03 > index_insert_973:
                        index_insert_03 -= (len(j) - 1)
                    if m_1 == 1 and index_insert_1 > index_insert_973:
                        index_insert_1 -= (len(j) - 1)
                    if m_91 == 1 and index_insert_91 > index_insert_973:
                        index_insert_91 -= (len(j)-1)
                    if m_92 == 1 and index_insert_92 > index_insert_973:
                        index_insert_92 -= (len(j)-1)
                    if m_93 == 1 and index_insert_93 > index_insert_973:
                        index_insert_93 -= (len(j)-1)
                    if m_941 == 1 and index_insert_941 > index_insert_973:
                        index_insert_941 -= (len(j)-1)
                    if m_942 == 1 and index_insert_942 > index_insert_973:
                        index_insert_942 -= (len(j)-1)
                    if m_95 == 1 and index_insert_95 > index_insert_973:
                        index_insert_95 -= (len(j)-1)
                    if m_961 == 1 and index_insert_961 > index_insert_973:
                        index_insert_961 -= (len(j)-1)
                    if m_962 == 1 and index_insert_962 > index_insert_973:
                        index_insert_962 -= (len(j)-1)
                    if m_971 == 1 and index_insert_971 > index_insert_973:
                        index_insert_971 -= (len(j)-1)
                    if m_972 == 1 and index_insert_972 > index_insert_973:
                        index_insert_972 -= (len(j)-1)

        if mark_end == mark_start:
            joint_content = ""
            joint_list = []

    except Exception:
        pass

    mark_connect_number = "1 111011 000000 000000 000000 000000"

    new_list = []

    #print("sen_after973", sen)

    # 10. 书名号内的内容标注
    mark_start = 0
    mark_end = 0
    x = 0
    mark_start_list = []
    mark_end_list = []
    mark_list = []
    joint_content = ""
    joint_list = []
    sen_remove_list = []
    insert = []
    insert_n = []
    m_10 = 0
    index_insert_10 = 0
    sen_1 = copy.deepcopy(sen)
    mark_book_quote = "1 000111 000000 000000 000000 000000"
    target = ""

    target = "《"
    for index, nums in enumerate(sen):
        if nums == target:
            mark_start_list.append(index)
    target = "》"
    for index, nums in enumerate(sen):
        if nums == target:
            mark_end_list.append(index)
    for i in range(0, len(mark_start_list)):
        mark_list.append([mark_start_list[i], mark_end_list[i]])

    target = "“"
    for index, nums in enumerate(sen):
        if nums == target:
            mark_start_list.append(index)
    target = "”"
    for index, nums in enumerate(sen):
        if nums == target:
            mark_end_list.append(index)
    for i in range(0, len(mark_start_list)):
        mark_list.append([mark_start_list[i], mark_end_list[i]])

    target = "‘"
    for index, nums in enumerate(sen):
        if nums == target:
            mark_start_list.append(index)
    target = "’"
    for index, nums in enumerate(sen):
        if nums == target:
            mark_end_list.append(index)
    for i in range(0, len(mark_start_list)):
        mark_list.append([mark_start_list[i], mark_end_list[i]])

    target = '"'
    for index, nums in enumerate(sen):
        if nums == target:
            mark_start_list.append(index)
    target = '"'
    for index, nums in enumerate(sen):
        if nums == target:
            mark_end_list.append(index)
    for i in range(0, len(mark_start_list)):
        mark_list.append([mark_start_list[i], mark_end_list[i]])

    try:
        for i in mark_list:
            joint_content = "".join(sen[i[0]:i[1] +1])
            joint_list.append(joint_content)

        if mark_end > mark_start:
            for j in joint_list:
                for i in sen:
                    if i[0] == j[1]:
                        mark_start = sen.index(i) - 1
                    if i[-1] == j[-2]:
                        mark_end = sen.index(i) + 1
                        break
                for i in range(mark_start, mark_end +1):
                    sen_remove_list.append(sen[i])
                insert.append(sen[mark_start - 1])

        for i in sen_remove_list:
            sen.remove(i)

        for i in insert:
            for index, nums in enumerate(sen):
                if nums == i:
                    insert_n.append(index)

        if len(joint_list) > 0:
            for j in joint_list:
                index_j = joint_list.index(j)
                sen.insert(insert_n[index_j] +1 + x, j)
                x = x + 1
                m_10 = 1
                index_insert_10 = insert_n[index_j] +1 + x
                if m_03 == 1 and index_insert_03 > index_insert_10:
                    index_insert_03 -= (len(j) - 1)
                if m_1 == 1 and index_insert_1 > index_insert_10:
                    index_insert_1 -= (len(j) - 1)
                if m_91 == 1 and index_insert_91 > index_insert_10:
                    index_insert_91 -= (len(j)-1)
                if m_92 == 1 and index_insert_92 > index_insert_10:
                    index_insert_92 -= (len(j)-1)
                if m_93 == 1 and index_insert_93 > index_insert_10:
                    index_insert_93 -= (len(j)-1)
                if m_941 == 1 and index_insert_941 > index_insert_10:
                    index_insert_941 -= (len(j)-1)
                if m_942 == 1 and index_insert_942 > index_insert_10:
                    index_insert_942 -= (len(j)-1)
                if m_95 == 1 and index_insert_95 > index_insert_10:
                    index_insert_95 -= (len(j)-1)
                if m_961 == 1 and index_insert_961 > index_insert_10:
                    index_insert_961 -= (len(j)-1)
                if m_962 == 1 and index_insert_962 > index_insert_10:
                    index_insert_962 -= (len(j)-1)
                if m_971 == 1 and index_insert_971 > index_insert_10:
                    index_insert_971 -= (len(j)-1)
                if m_972 == 1 and index_insert_972 > index_insert_10:
                    index_insert_972 -= (len(j)-1)
                if m_973 == 1 and index_insert_973 > index_insert_10:
                    index_insert_973 -= (len(j)-1)

    except Exception:
        pass

    joint_content = []
    joint_list = []
    sen_remove_list = []
    mark_start = 0
    mark_end = 0
    x = 0
    mark_start_list = []
    mark_end_list = []
    mark_list = []
    insert = []
    insert_n = []

    #print("sen_after10", sen)

    # 11. 顿号的处理
    x = 0
    joint_words = []
    joint_list = []
    joint_content = ""
    mark_pause = ""
    target_begin = ""
    target_end = ""
    index_list = []
    m_11 = 0
    index_target = 0
    index_insert_11 = 0
    flag = 0

    try:
        for i in sen:
            index_list.append([i, sen_index[x]])
            x += 1
    except Exception:
        pass

    try:
        for i in sen:
            if i == "、":
                for j in index_list:
                    if i == j[0]:
                        index_i = j[1]
                        index_list.remove(j)
                        if sen[index_i - 1] not in joint_content:
                            joint_words = sen[index_i - 1:index_i +2]
                            joint_content =  "".join(joint_words)
                            if sen[index_i + 2] in ["等", "等等"]:
                                joint_words = sen[index_i - 1:index_i + 3]
                                joint_content = "".join(joint_words)
                                #print("joint_content_1", joint_content)
                            if sen[index_i + 2] in ["、", "和", "与", "同", "及", "以及"]:
                                joint_words = sen[index_i - 1:index_i +4]
                                joint_content = "".join(joint_words)
                                if sen[index_i + 4] in ["等", "等等"]:
                                    joint_words = sen[index_i - 1:index_i + 5]
                                    joint_content = "".join(joint_words)
                                    #print("joint_content_2", joint_content)
                                if sen[index_i + 4] in ["、", "和", "与", "同", "及", "以及"]:
                                    joint_words = sen[index_i - 1:index_i + 6]
                                    joint_content = "".join(joint_words)
                                    if sen[index_i + 6] in ["等", "等等"]:
                                        joint_words = sen[index_i - 1:index_i + 7]
                                        joint_content = "".join(joint_words)
                                        #print("joint_content_3", joint_content)
                                    if sen[index_i + 6] in ["、", "和", "与", "同", "及", "以及"]:
                                        joint_words = sen[index_i - 1:index_i + 8]
                                        joint_content = "".join(joint_words)
                                        #print("joint_content_4", joint_content)
                                        if sen[index_i + 8] in ["等", "等等"]:
                                            joint_words = sen[index_i - 1:index_i + 9]
                                            joint_content = "".join(joint_words)
                                        if sen[index_i + 8] in ["、", "和", "与", "同", "及", "以及"]:
                                            joint_words = sen[index_i - 1:index_i + 10]
                                            joint_content = "".join(joint_words)
                                            # print("joint_content_4", joint_content)
                                            if sen[index_i + 10] in ["等", "等等"]:
                                                joint_words = sen[index_i - 1:index_i + 11]
                                                joint_content = "".join(joint_words)
                        #print("joint_words", joint_words)
                        #print("joint_content", joint_content)
                        #print("chinese_names", chinese_names)
                        #print(" sen[index_i - 1]",  sen[index_i - 1])
                        df_word = df.loc[df["word"] == "000" + sen[index_i - 1]].values
                        df_word_1 = df.loc[df["word"] == "000" + sen[index_i - 1][1:-1]].values
                        df_word_2 = df.loc[df["word"] == "000" + sen[index_i - 1][1:-1]].values
                        if joint_content[-1] == "者":
                            mark_pause = "1 000111 000000 000000 000000 000000"
                            #print("ok0")
                        elif (len(df.loc[df["word"] == "000" + sen[index_i - 1]].index) != 0) and (
                                df_word[0][1][2:8] == "010111" or df_word[0][1][9:15] == "010111" or df_word[0][1][16:22] == "010111" or df_word[0][1][
                                                                                                              23:29] == "010111" or
                                df_word[0][1][30:36] == "010111"):
                            mark_pause = "1 010111 000000 000000 000000 000000"
                            #print("ok0.5")
                        elif (len(df.loc[df["word"] == "000" + sen[index_i - 1]].index) != 0) and (
                                df_word[0][1][2:8] == "000001" or df_word[0][1][9:15] == "000001" or df_word[0][1][16:22] == "000001" or df_word[0][1][
                                                                                                              23:29] == "000001" or
                                df_word[0][1][30:36] == "000001"):
                            mark_pause = "1 000001 000000 000000 000000 000000"
                            #print("ok1")
                            break
                        elif (len(df.loc[df["word"] == "000" + sen[index_i - 1]].index) != 0) and (
                                df_word[0][1][2:8] == "000111" or df_word[0][1][9:15] == "000111" or df_word[0][1][16:22] == "000111" or df_word[0][1][
                                                                                                              23:29] == "000111" or
                                df_word[0][1][30:36] == "000111"):
                            mark_pause = "1 000111 000000 000000 000000 000000"
                            #print("ok2")
                            break
                        elif (len(df.loc[df["word"] == "000" + sen[index_i - 1]].index) != 0) and (
                                df_word[0][1][2:8] == "000101" or df_word[0][1][9:15] == "000101" or df_word[0][1][16:22] == "000101" or df_word[0][1][
                                                                                                              23:29] == "000101" or
                                df_word[0][1][30:36] == "000101"):
                            mark_pause = "1 000101 000000 000000 000000 000000"
                            #print("ok3")
                            break
                        elif (len(df.loc[df["word"] == "000" + sen[index_i - 1][1:-1]].index) != 0) and (
                                df_word_1[0][1][2:8] == "000001" or df_word_1[0][1][9:15] == "000001" or df_word_1[0][1][16:22] == "000001" or df_word_1[0][1][
                                                                                                              23:29] == "000001" or
                                df_word_1[0][1][30:36] == "000001"):
                            mark_pause = "1 000001 000000 000000 000000 000000"
                            #print("ok4")
                            break
                        elif (len(df.loc[df["word"] == "000" + sen[index_i - 1][1:-1]].index) != 0) and (
                                df_word_1[0][1][2:8] == "000111" or df_word_1[0][1][9:15] == "000111" or df_word_1[0][1][16:22] == "000111" or df_word_1[0][1][
                                                                                                              23:29] == "000111" or
                                df_word_1[0][1][30:36] == "000111"):
                            mark_pause = "1 000111 000000 000000 000000 000000"
                            #print("ok5")
                            break
                        elif (len(df.loc[df["word"] == "000" + sen[index_i - 1][1:-1]].index) != 0) and (
                                df_word_1[0][1][2:8] == "000101" or df_word_1[0][1][9:15] == "000101" or df_word_1[0][1][16:22] == "000101" or df_word_1[0][1][
                                                                                                              23:29] == "000101" or
                                df_word_1[0][1][30:36] == "000101"):
                            mark_pause = "1 000101 000000 000000 000000 000000"
                            #print("ok6")
                            break
                        elif (len(df.loc[df["word"] == "000" + sen[index_i - 1][1:-1]].index) != 0) and (
                                df_word_1[0][1][2:8] == "111011" or df_word_1[0][1][9:15] == "111011" or df_word_1[0][1][16:22] == "111011" or df_word_1[0][1][
                                                                                                              23:29] == "111011" or
                                df_word_1[0][1][30:36] == "111011"):
                            mark_pause = "1 111011 000000 000000 000000 000000"
                            #print("ok7")
                            break
                        elif (len(df.loc[df["word"] == "000" + sen[index_i - 1][1:-1]].index) != 0) and (
                                df_word_1[0][1][2:8] == "110000" or df_word_1[0][1][9:15] == "110000" or df_word_1[0][1][16:22] == "110000" or df_word_1[0][1][
                                                                                                              23:29] == "110000" or
                                df_word_1[0][1][30:36] == "110000"):
                            mark_pause = "1 110000 000000 000000 000000 000000"
                            #print("ok8")
                            break
                        elif (len(df.loc[df["word"] == "000" + sen[index_i - 1][1:-1]].index) != 0) and (
                                df_word_1[0][1][2:8] == "010111" or df_word_1[0][1][9:15] == "010111" or df_word_1[0][1][16:22] == "010111" or df_word_1[0][1][
                                                                                                              23:29] == "010111" or
                                df_word_1[0][1][30:36] == "010111"):
                            mark_pause = "1 010111 000000 000000 000000 000000"
                            #print("ok9")
                            break
                        elif sen[index_i - 1] in s:
                            mark_pause = "1 010111 000000 000000 000000 000000"
                            #print("ok10")
                            break
                        elif sen[index_i - 1][1:-1] in chinese_names:
                            mark_pause = "1 010111 000000 000000 000000 000000"
                            #print("ok11")
                            break
    except Exception:
        pass

    joint_list.append(joint_content)
    #print("joint_list", joint_list)

    try:
        for i in joint_content:
            if i == "、":
                index_target = joint_content.index(i)
                target_begin = joint_content[0:index_target]
                break
        for i in joint_content:
            if i in ["、", "和",  "与", "同", "及", "以及"]:
                index_target = joint_content.index(i)
                target_end = joint_content[index_target+1::]
            elif i in ["等", "等等"]:
                index_target = joint_content.index(i)
                target_end = joint_content[index_target]
    except Exception:
        pass

    mark_start_list = []
    mark_end_list = []

    try:
        for index, nums in enumerate(sen):
            if nums == target_begin:
                mark_start_list.append(index)

        for index, nums in enumerate(sen):
            if nums == target_end:
                mark_end_list.append(index)

        mark_list=[mark_start_list[0], mark_end_list[-1]]

        #print("mark_list", mark_list)

        if mark_list[0] != mark_list[1]:
            for i in range(mark_list[0],mark_list[1] + 1):
                sen_remove_list.append(sen[i])

        index_insert_11 = mark_list[0]
        flag += 1

        for i in sen_remove_list:
            sen.remove(i)

    except Exception:
        pass
    #print("index_insert_11 ", index_insert_11)

    if len(joint_list) != 0 and flag != 0:
        for j in joint_list:
            sen.insert(index_insert_11, j)
            m_11 = 1
            if m_03 == 1 and index_insert_03 > index_insert_11:
                index_insert_03 -= (len(j) - 1)
            if m_1 == 1 and index_insert_1 > index_insert_11:
                index_insert_1 -= (len(j) - 1)
            if m_91 == 1 and index_insert_91 > index_insert_11:
                index_insert_91 -= (len(j)-1)
            if m_92 == 1 and index_insert_92 > index_insert_11:
                index_insert_92 -= (len(j)-1)
            if m_93 == 1 and index_insert_93 > index_insert_11:
                index_insert_93 -= (len(j)-1)
            if m_941 == 1 and index_insert_941 > index_insert_11:
                index_insert_941 -= (len(j)-1)
            if m_942 == 1 and index_insert_942 > index_insert_11:
                index_insert_942 -= (len(j)-1)
            if m_95 == 1 and index_insert_95 > index_insert_11:
                index_insert_95 -= (len(j)-1)
            if m_961 == 1 and index_insert_961 > index_insert_11:
                index_insert_961 -= (len(j)-1)
            if m_962 == 1 and index_insert_962 > index_insert_11:
                index_insert_962 -= (len(j)-1)
            if m_971 == 1 and index_insert_971 > index_insert_11:
                index_insert_971 -= (len(j)-1)
            if m_972 == 1 and index_insert_972 > index_insert_11:
                index_insert_972 -= (len(j)-1)
            if m_973 == 1 and index_insert_973 > index_insert_11:
                index_insert_973 -= (len(j)-1)
            if m_10 == 1 and index_insert_10 > index_insert_11:
                index_insert_10 -= (len(j)-1)

    if m_11 == 0:
        joint_list = []

    #print("mark_pause", mark_pause)

    #print("sen_after11", sen)

    #12."-"连接数词
    m_12 = 0
    index_insert_12 = 0

    try:
        for i in sen:
            index_i = sen.index(i)
            df_word = df.loc[df["word"] == "000" + sen[index_i-1][0]].values
            df_word_1 = df.loc[df["word"] == "000" + sen[index_i - 2][0]].values
            df_word_2 = df.loc[df["word"] == "000" + sen[index_i - 3][0]].values
            df_word_3 = df.loc[df["word"] == "000" + sen[index_i + 2][0]].values
            df_word_4 = df.loc[df["word"] == "000" + sen[index_i + 3][0]].values
            if (i in ["-", "—", '－']) and (len(df.loc[df["word"] == "000" + sen[index_i-1][0]].index) != 0 and df_word[0][1][2:8] in ["110000", "000010"] or df_word[0][1][9:15] in ["110000", "000010"] or df_word[0][1][16:22] in ["110000", "000010"] or df_word[0][1][23:29] in ["110000", "000010"] or df_word[0][1][30:36] in ["110000", "000010"]):
                joint_content = "".join(sen[index_i-1:index_i + 2])
                if (len(df.loc[df["word"] == "000" + sen[index_i-2][0]].index) != 0 and df_word_1[0][1][2:8]  in ["110000", "000010"] or df_word_1[0][1][9:15] in ["110000", "000010"] or df_word_1[0][1][16:22] in ["110000", "000010"] or df_word_1[0][1][23:29] in ["110000", "000010"] or df_word_1[0][1][30:36] in ["110000", "000010"]) and (len(df.loc[df["word"] == "000" + sen[index_i+2][0]].index) != 0 and df_word_3[0][1][2:8]  not in ["110000", "000010"] and df_word_3[0][1][9:15] not in ["110000", "000010"] and df_word_3[0][1][16:22] not in ["110000", "000010"] and df_word_3[0][1][23:29] not in ["110000", "000010"] and df_word_3[0][1][30:36] not in ["110000", "000010"]):
                    joint_content = "".join(sen[index_i - 2:index_i + 2])
                elif (len(df.loc[df["word"] == "000" + sen[index_i-2][0]].index) != 0 and df_word_1[0][1][2:8] in ["110000", "000010"] or df_word_1[0][1][9:15] in ["110000", "000010"] or df_word_1[0][1][16:22] in ["110000", "000010"] or df_word_1[0][1][23:29] in ["110000", "000010"] or df_word_1[0][1][30:36] in ["110000", "000010"]) and (len(df.loc[df["word"] == "000" + sen[index_i+2][0]].index) != 0 and df_word_3[0][1][2:8] in ["110000", "000010"] or df_word_3[0][1][9:15] in ["110000", "000010"] or df_word_3[0][1][16:22] in ["110000", "000010"] or df_word_3[0][1][23:29] in ["110000", "000010"] or df_word_3[0][1][30:36] in ["110000", "000010"]):
                    joint_content = "".join(sen[index_i - 2:index_i + 3])
                    if (len(df.loc[df["word"] == "000" + sen[index_i-3][0]].index) != 0 and df_word_2[0][1][2:8] in ["110000", "000010"] or df_word_2[0][1][9:15] in ["110000", "000010"] or df_word_2[0][1][16:22] in ["110000", "000010"] or df_word_2[0][1][23:29] in ["110000","000010"] or df_word_2[0][1][30:36] in ["110000", "000010"]) and (len(df.loc[df["word"] == "000" + sen[index_i+3][0]].index) != 0 and df_word_4[0][1][2:8] not in ["110000", "000010"] and df_word_4[0][1][9:15] not in ["110000", "000010"] and df_word_4[0][1][16:22] not in ["110000", "000010"] and df_word_4[0][1][23:29] not in ["110000", "000010"] and df_word_4[0][1][30:36] not in ["110000", "000010"]) or word in punct_list:
                        joint_content = "".join(sen[index_i - 2:index_i + 3])
                    elif (len(df.loc[df["word"] == "000" + sen[index_i-3][0]].index) != 0 and key[1][2:8] in ["110000", "000010"] or key[1][9:15] in ["110000", "000010"] or key[1][16:22] in ["110000", "000010"] or key[1][23:29] in ["110000","000010"] or key[1][30:36] in ["110000", "000010"]) and (len(df.loc[df["word"] == "000" + sen[index_i+3][0]].index) != 0 and df_word_4[0][1][2:8] in ["110000", "000010"] or df_word_4[0][1][9:15] in ["110000", "000010"] or df_word_4[0][1][16:22] in ["110000", "000010"] or df_word_4[0][1][23:29] in ["110000","000010"] or df_word_4[0][1][30:36] in ["110000", "000010"]):
                        joint_content = "".join(sen[index_i - 2:index_i + 4])
        joint_list.append(joint_content)

    except Exception:
        pass

    mark_start = 0
    mark_end = 0
    sen_remove_list = []

    try:
        target = joint_list[0][0]
        for index, nums in enumerate(sen):
            if nums[0] == target:
                mark_start = index
                index_insert_12 = mark_start
        target = joint_list[0][-1]
        for index, nums in enumerate(sen):
            if nums[-1] == target:
                mark_end = index
    except Exception:
        pass

    try:
        if mark_end > mark_start:
            for i in range(mark_start, mark_end + 1):
                sen_remove_list.append(sen[i])
            for i in sen_remove_list:
                sen.remove(i)
            if len(joint_list) != 0:
                for j in joint_list:
                    sen.insert(index_insert_12, j)
                    m_12 = 1
                    if m_03 == 1 and index_insert_03 > index_insert_12:
                        index_insert_03 -= (len(j) - 1)
                    if m_1 == 1 and index_insert_1 > index_insert_12:
                        index_insert_1 -= (len(j) - 1)
                    if m_91 == 1 and index_insert_91 > index_insert_12:
                        index_insert_91 -= (len(j)-1)
                    if m_92 == 1 and index_insert_92 > index_insert_12:
                        index_insert_92 -= (len(j)-1)
                    if m_93 == 1 and index_insert_93 > index_insert_12:
                        index_insert_93 -= (len(j)-1)
                    if m_941 == 1 and index_insert_941 > index_insert_12:
                        index_insert_941 -= (len(j)-1)
                    if m_942 == 1 and index_insert_942 > index_insert_12:
                        index_insert_942 -= (len(j)-1)
                    if m_95 == 1 and index_insert_95 > index_insert_12:
                        index_insert_95 -= (len(j)-1)
                    if m_961 == 1 and index_insert_961 > index_insert_12:
                        index_insert_961 -= (len(j)-1)
                    if m_962 == 1 and index_insert_962 > index_insert_12:
                        index_insert_962 -= (len(j)-1)
                    if m_971 == 1 and index_insert_971 > index_insert_12:
                        index_insert_971 -= (len(j)-1)
                    if m_972 == 1 and index_insert_972 > index_insert_12:
                        index_insert_972 -= (len(j)-1)
                    if m_973 == 1 and index_insert_973 > index_insert_12:
                        index_insert_973 -= (len(j)-1)
                    if m_10 == 1 and index_insert_10 > index_insert_12:
                        index_insert_10 -= (len(j)-1)
                    if m_11 == 1 and index_insert_11 > index_insert_12:
                        index_insert_11 -= (len(j)-1)

    except Exception:
        pass

    mark_num_connect = "1 110000 000000 000000 000000 000000"

    joint_content = ""
    joint_list = []
    mark_start = 0
    mark_end = 0
    sen_remove_list = []

    #print("sen_after12", sen)

    # 13.1.1 破折号在称谓中的处理
    m_13_1_1 = 0
    index_i = 0
    index_insert_13_1_1 = 0
    index_list = []
    new_list = []
    new_list_imit = []
    new_imit = ""
    mark_imit_1 = ""

    target = "——"
    for index, nums in enumerate(sen):
        if nums == target:
            index_list.append(index)

    try:
        if sen[index_list[0]-1] in baijia_list or sen[index_list[0]-1][-1] in baijia_list:
                new_list = sen[index_list[0]-1:index_list[-1]+1]
                joint_content = "".join(new_list)
                joint_list.append(joint_content)
                mark_imit_1 = "1 011000 000000 000000 000000 000000"

        if len(joint_list) != 0 and index_list[0]-1 != index_list[-1]:
            for i in range(index_list[0]-1, index_list[-1]+1):
                sen_remove_list.append(sen[i])

            for i in sen_remove_list:
                sen.remove(i)

            if len(joint_list) != 0:
                for j in joint_list:
                    sen.insert(index_list[0], j)
                    m_13_1_1 = 1
                    index_insert_13_1_1 = index_list[0]
                    if m_03 == 1 and index_insert_03 > index_insert_13_1_1:
                        index_insert_03 -= (len(j) - 1)
                    if m_1 == 1 and index_insert_1 > index_insert_13_1_1:
                        index_insert_1 -= (len(j) - 1)
                    if m_91 == 1 and index_insert_91 > index_insert_13_1_1:
                        index_insert_91 -= (len(j)-1)
                    if m_92 == 1 and index_insert_92 > index_insert_13_1_1:
                        index_insert_92 -= (len(j)-1)
                    if m_93 == 1 and index_insert_93 > index_insert_13_1_1:
                        index_insert_93 -= (len(j)-1)
                    if m_941 == 1 and index_insert_941 > index_insert_13_1_1:
                        index_insert_941 -= (len(j)-1)
                    if m_942 == 1 and index_insert_942 > index_insert_13_1_1:
                        index_insert_942 -= (len(j)-1)
                    if m_95 == 1 and index_insert_95 > index_insert_13_1_1:
                        index_insert_95 -= (len(j)-1)
                    if m_961 == 1 and index_insert_961 > index_insert_13_1_1:
                        index_insert_961 -= (len(j)-1)
                    if m_962 == 1 and index_insert_962 > index_insert_13_1_1:
                        index_insert_962 -= (len(j)-1)
                    if m_971 == 1 and index_insert_971 > index_insert_13_1_1:
                        index_insert_971 -= (len(j)-1)
                    if m_972 == 1 and index_insert_972 > index_insert_13_1_1:
                        index_insert_972 -= (len(j)-1)
                    if m_973 == 1 and index_insert_973 > index_insert_13_1_1:
                        index_insert_973 -= (len(j)-1)
                    if m_10 == 1 and index_insert_10 > index_insert_13_1_1:
                        index_insert_10 -= (len(j)-1)
                    if m_11 == 1 and index_insert_11 > index_insert_13_1_1:
                        index_insert_11 -= (len(j)-1)
                    if m_12 == 1 and index_insert_12> index_insert_13_1_1:
                        index_insert_12 -= (len(j)-1)
    except Exception:
        pass

    joint_content = ""
    joint_list = []
    new_list = []
    sen_remove_list = []

    #print("sen_after13.1.1", sen)

    #13.1.2 处理破折号和拟声词
    m_13_1_2 = 0
    index_insert_13_1_2 = 0
    mark_imit_2 = ""

    try:
        new_list_imit = [sen[index_list[0] - 1], sen[index_list[0] + 1]]
        new_imit = "".join(new_list_imit)
    except Exception:
        pass

    try:
        df_word = df.loc[df["word"] == "000" + new_imit].values
        df_word_1 = df.loc[df["word"] == "000" + new_imit[0]].values
        if (len(df.loc[df["word"] == "000" + new_imit].index) != 0) and (df_word[0][1][2:8] == "011000" or df_word[0][1][9:15] == "011000" or df_word[0][1][16:22] == "011000" or df_word[0][1][23:29] == "011000" or df_word[0][1][30:36] == "011000"):
            new_list = sen[index_list[0] - 1:index_list[-1] + 2]
            joint_content = "".join(new_list)
            joint_list.append(joint_content)
            mark_imit_2 = "1 011000 000000 000000 000000 000000"
        elif len(df.loc[df["word"] == "000" + new_imit[0]].index) != 0 and df_word_1[0][1][2:8] == "011000" or df_word_1[0][1][9:15] == "011000" or df_word_1[0][1][16:22] == "011000" or df_word_1[0][1][23:29] == "011000" or df_word_1[0][1][30:36] == "011000":
            new_list = sen[index_list[0] - 1:index_list[-1] + 2]
            joint_content = "".join(new_list)
            joint_list.append(joint_content)
            mark_imit_2 = "1 011000 000000 000000 000000 000000"
    except Exception:
        pass

    if len(joint_list) != 0 and index_list[0]-1 != index_list[-1]:
        for i in range(index_list[0]-1, index_list[-1]+2):
            sen_remove_list.append(sen[i])

        for i in sen_remove_list:
            sen.remove(i)

        if len(joint_list) != 0:
            for j in joint_list:
                sen.insert(index_list[0]-1, j)
                m_13_1_2 = 1
                index_insert_13_1_2 = index_list[0]-1
                if m_03 == 1 and index_insert_03 > index_insert_13_1_2:
                    index_insert_03 -= (len(j) - 1)
                if m_1 == 1 and index_insert_1 > index_insert_13_1_2:
                    index_insert_1 -= (len(j) - 1)
                if m_91 == 1 and index_insert_91 > index_insert_13_1_2:
                    index_insert_91 -= (len(j)-1)
                if m_92 == 1 and index_insert_92 > index_insert_13_1_2:
                    index_insert_92 -= (len(j)-1)
                if m_93 == 1 and index_insert_93 > index_insert_13_1_2:
                    index_insert_93 -= (len(j)-1)
                if m_941 == 1 and index_insert_941 > index_insert_13_1_2:
                    index_insert_941 -= (len(j)-1)
                if m_942 == 1 and index_insert_942 > index_insert_13_1_2:
                    index_insert_942 -= (len(j)-1)
                if m_95 == 1 and index_insert_95 > index_insert_13_1_2:
                    index_insert_95 -= (len(j)-1)
                if m_961 == 1 and index_insert_961 > index_insert_13_1_2:
                    index_insert_961 -= (len(j)-1)
                if m_962 == 1 and index_insert_962 > index_insert_13_1_2:
                    index_insert_962 -= (len(j)-1)
                if m_971 == 1 and index_insert_971 > index_insert_13_1_2:
                    index_insert_971 -= (len(j)-1)
                if m_972 == 1 and index_insert_972 > index_insert_13_1_2:
                    index_insert_972 -= (len(j)-1)
                if m_973 == 1 and index_insert_973 > index_insert_13_1_2:
                    index_insert_973 -= (len(j)-1)
                if m_10 == 1 and index_insert_10 > index_insert_13_1_2:
                    index_insert_10 -= (len(j)-1)
                if m_11 == 1 and index_insert_11 > index_insert_13_1_2:
                    index_insert_11 -= (len(j)-1)
                if m_12 == 1 and index_insert_12 > index_insert_13_1_2:
                    index_insert_12 -= (len(j)-1)
                if m_13_1_1 == 1 and index_insert_13_1_1 > index_insert_13_1_2:
                    index_insert_13_1_1 -= (len(j)-1)

    joint_content = ""
    joint_list = []
    new_list = []
    sen_remove_list = []

    #print("sen_after13.1.2", sen)

    # 13.2. 两边破折号的处理
    m_13_2 = 0
    index_start = 0
    index_end = 0
    index_insert_13_2 = 0
    mark_dash_1 = ""
    try:
        for i in sen:
            index_start = sen.index(i)
            if i == "——":
                new_list = sen[index_start + 1::]
                break

        for i in new_list:
            index_end = new_list.index(i)
            if i == "——":
                new_list = new_list[0:index_end + 1]
                new_list.insert(0, i)
                joint_content = "".join(new_list)
                joint_list.append(joint_content)

        if len(joint_content) == 0:
            new_list = []

    except Exception:
        pass

    for i in new_list:
        for j in sen:
            if i == j:
                sen.remove(j)
    if len(joint_list) != 0:
        for j in joint_list:
            sen.insert(index_start, j)
            m_13_2 = 1
            index_insert_13_2 = index_start
            if m_03 == 1 and index_insert_03 > index_insert_13_2:
                index_insert_03 -= (len(j) - 1)
            if m_1 == 1 and index_insert_1 > index_insert_13_2:
                index_insert_1 -= (len(j) - 1)
            if m_91 == 1 and index_insert_91 > index_insert_13_2:
                index_insert_91 -= (len(j)-1)
            if m_92 == 1 and index_insert_92 > index_insert_13_2:
                index_insert_92 -= (len(j)-1)
            if m_93 == 1 and index_insert_93 > index_insert_13_2:
                index_insert_93 -= (len(j)-1)
            if m_941 == 1 and index_insert_941 > index_insert_13_2:
                index_insert_941 -= (len(j)-1)
            if m_942 == 1 and index_insert_942 > index_insert_13_2:
                index_insert_942 -= (len(j)-1)
            if m_95 == 1 and index_insert_95 > index_insert_13_2:
                index_insert_95 -= (len(j)-1)
            if m_961 == 1 and index_insert_961 > index_insert_13_2:
                index_insert_961 -= (len(j)-1)
            if m_962 == 1 and index_insert_962 > index_insert_13_2:
                index_insert_962 -= (len(j)-1)
            if m_971 == 1 and index_insert_971 > index_insert_13_2:
                index_insert_971 -= (len(j)-1)
            if m_972 == 1 and index_insert_972 > index_insert_13_2:
                index_insert_972 -= (len(j)-1)
            if m_973 == 1 and index_insert_973 > index_insert_13_2:
                index_insert_973 -= (len(j)-1)
            if m_10 == 1 and index_insert_10 > index_insert_13_2:
                index_insert_10 -= (len(j)-1)
            if m_11 == 1 and index_insert_11 > index_insert_13_2:
                index_insert_11 -= (len(j)-1)
            if m_12 == 1 and index_insert_12 > index_insert_13_2:
                index_insert_12 -= (len(j)-1)
            if m_13_1_1 == 1 and index_insert_13_1_1 > index_insert_13_2:
                index_insert_13_1_1 -= (len(j)-1)
            if m_13_1_2 == 1 and index_insert_13_1_2 > index_insert_13_2:
                index_insert_13_1_2 -= (len(j)-1)

    mark_dash = "1 001010 000000 000000 000000 000000"

    joint_content = ""
    joint_list = []
    index_start = 0
    index_end = 0
    new_list = []

    #print("sen_after13.2", sen)

    # 13.3. 破折号左或右有动词的处理
    index_left = 0
    index_right = 0
    m_13_3 = 0
    left_list = []
    middle_list = []
    right_list = []
    mark_dash_2 = ""
    try:
        for i in sen:
            index_left = sen.index(i)
            if i == "——" and index_left != len(sen) - 1:
                left_list = sen[0:index_left + 1]
                middle_list = sen[index_left]
                right_list = sen[index_left + 1::]
                break

        for i in right_list:
            df_word = df.loc[df["word"] == "000" + i].values
            index_verb = right_list.index(i)
            if i == "——":
                left_list = []
                middle_list = []
                right_list = []
            elif (len(df.loc[df["word"] == "000" + i].index) != 0) and df_word[0][1][2:8] in ["000101", "000001"] or df_word[0][1][9:15] in ["000101", "000001"] or df_word[0][1][
                                                                                                               16:22] in [
                "000101", "000001"] or df_word[0][1][23:29] in ["000101", "000001"] or df_word[0][1][30:36] in ["000101", "000001"]:
                middle_list = [middle_list] + right_list[0:index_verb - 1]
                left_list = []
                joint_content = "".join(middle_list)
                joint_list.append(joint_content)

        for i in left_list:
            df_word = df.loc[df["word"] == "000" + i].values
            index_verb = left_list.index(i)
            if (len(df.loc[df["word"] == "000" + i].index) != 0) and df_word[0][1][2:8] in ["000101", "000001"] or df_word[0][1][9:15] in ["000101", "000001"] or df_word[0][1][
                                                                                                             16:22] in [
                "000101", "000001"] or df_word[0][1][23:29] in ["000101", "000001"] or df_word[0][1][30:36] in ["000101", "000001"]:
                middle_list = middle_list + right_list
                joint_content = "".join(middle_list)
                joint_list.append(joint_content)
                left_list = []
                break
    except Exception:
        pass

    for i in middle_list:
        for j in sen:
            if i == j:
                sen.remove(j)
    if len(joint_list) != 0:
        for j in joint_list:
            sen.insert(index_left, j)
            m_13_3 = 1
            index_insert_13_3 = index_left
            if m_03 == 1 and index_insert_03 > index_insert_13_3:
                index_insert_03 -= (len(j) - 1)
            if m_1 == 1 and index_insert_1 > index_insert_13_3:
                index_insert_1 -= (len(j) - 1)
            if m_91 == 1 and index_insert_91 > index_insert_13_3:
                index_insert_91 -= (len(j)-1)
            if m_92 == 1 and index_insert_92 > index_insert_13_3:
                index_insert_92 -= (len(j)-1)
            if m_93 == 1 and index_insert_93 > index_insert_13_3:
                index_insert_93 -= (len(j)-1)
            if m_941 == 1 and index_insert_941 > index_insert_13_3:
                index_insert_941 -= (len(j)-1)
            if m_942 == 1 and index_insert_942 > index_insert_13_3:
                index_insert_942 -= (len(j)-1)
            if m_95 == 1 and index_insert_95 > index_insert_13_3:
                index_insert_95 -= (len(j)-1)
            if m_961 == 1 and index_insert_961 > index_insert_13_3:
                index_insert_961 -= (len(j)-1)
            if m_962 == 1 and index_insert_962 > index_insert_13_3:
                index_insert_962 -= (len(j)-1)
            if m_971 == 1 and index_insert_971 > index_insert_13_3:
                index_insert_971 -= (len(j)-1)
            if m_972 == 1 and index_insert_972 > index_insert_13_3:
                index_insert_972 -= (len(j)-1)
            if m_973 == 1 and index_insert_973 > index_insert_13_3:
                index_insert_973 -= (len(j)-1)
            if m_10 == 1 and index_insert_10 > index_insert_13_3:
                index_insert_10 -= (len(j)-1)
            if m_11 == 1 and index_insert_11 > index_insert_13_3:
                index_insert_11 -= (len(j)-1)
            if m_12 == 1 and index_insert_12 > index_insert_13_3:
                index_insert_12 -= (len(j)-1)
            if m_13_1_1 == 1 and index_insert_13_1_1 > index_insert_13_3:
                index_insert_13_1_1 -= (len(j)-1)
            if m_13_1_2 == 1 and index_insert_13_1_2 > index_insert_13_3:
                index_insert_13_1_2 -= (len(j)-1)
            if m_13_2 == 1 and index_insert_13_2 > index_insert_13_3:
                index_insert_13_2 -= (len(j)-1)

    mark_dash = "1 001010 000000 000000 000000 000000"

    joint_content = ""
    joint_list = []
    index_left = 0
    index_right = 0
    left_list = []
    middle_list = []
    right_list = []

    #print("sen_after13.3", sen)

    # 14. 括号内的内容
    mark_start = 0
    mark_end = 0
    index_i = 0
    m_14 = 0
    index_insert_14 = 0
    mark_bracket = ""

    try:
        for i in sen:
            index_i = sen.index(i)
            if i in ["（", "("]:
                mark_start = index_i
            elif i in ["）", ")"] and sen[index_i + 1] not in ["、", "."]:
                mark_end = index_i
            elif i in ["）", ")"] and sen[index_i + 1] in ["、", "."]:
                mark_end = index_i + 1
        if mark_start != mark_end:
            joint_content = "".join(sen[mark_start:mark_end + 1])
            joint_list.append(joint_content)
    except Exception:
        pass

    mark_start = 0
    mark_end = 0
    sen_remove_list = []

    try:
        for j in joint_list:
            for i in sen:
                if i[0] == j[0]:
                    mark_start = sen.index(i)
                if i[-1] == j[-1]:
                    mark_end = sen.index(i)
                    break
            if mark_end > mark_start:
                for i in range(mark_start, mark_end + 1):
                    sen_remove_list.append(sen[i])
            for i in sen_remove_list:
                sen.remove(i)
            if len(joint_list) != 0:
                for j in joint_list:
                    sen.insert(mark_start, j)
                    m_14 = 1
                    index_insert_14 = mark_start
                    if m_03 == 1 and index_insert_03 > index_insert_14:
                        index_insert_03 -= (len(j) - 1)
                    if m_1 == 1 and index_insert_1 > index_insert_14:
                        index_insert_1 -= (len(j) - 1)
                    if m_91 == 1 and index_insert_91 > index_insert_14:
                        index_insert_91 -= (len(j)-1)
                    if m_92 == 1 and index_insert_92 > index_insert_14:
                        index_insert_92 -= (len(j)-1)
                    if m_93 == 1 and index_insert_93 > index_insert_14:
                        index_insert_93 -= (len(j)-1)
                    if m_941 == 1 and index_insert_941 > index_insert_14:
                        index_insert_941 -= (len(j)-1)
                    if m_942 == 1 and index_insert_942 > index_insert_14:
                        index_insert_942 -= (len(j)-1)
                    if m_95 == 1 and index_insert_95 > index_insert_14:
                        index_insert_95 -= (len(j)-1)
                    if m_961 == 1 and index_insert_961 > index_insert_14:
                        index_insert_961 -= (len(j)-1)
                    if m_962 == 1 and index_insert_962 > index_insert_14:
                        index_insert_962 -= (len(j)-1)
                    if m_971 == 1 and index_insert_971 > index_insert_14:
                        index_insert_971 -= (len(j)-1)
                    if m_972 == 1 and index_insert_972 > index_insert_14:
                        index_insert_972 -= (len(j)-1)
                    if m_973 == 1 and index_insert_973 > index_insert_14:
                        index_insert_973 -= (len(j)-1)
                    if m_10 == 1 and index_insert_10 > index_insert_14:
                        index_insert_10 -= (len(j)-1)
                    if m_11 == 1 and index_insert_11 > index_insert_14:
                        index_insert_11 -= (len(j)-1)
                    if m_12 == 1 and index_insert_12 > index_insert_14:
                        index_insert_12 -= (len(j)-1)
                    if m_13_1_1 == 1 and index_insert_13_1_1 > index_insert_14:
                        index_insert_13_1_1 -= (len(j)-1)
                    if m_13_1_2 == 1 and index_insert_13_1_2 > index_insert_14:
                        index_insert_13_1_2 -= (len(j)-1)
                    if m_13_2 == 1 and index_insert_13_2 > index_insert_14:
                        index_insert_13_2 -= (len(j)-1)
                    if m_13_3 == 1 and index_insert_13_3 > index_insert_14:
                        index_insert_13_3 -= (len(j)-1)
    except Exception:
        pass

    mark_bracket = "1 001010 000000 000000 000000 000000"

    # print("joint_content", joint_content)
    joint_content = ""
    joint_list = []
    index_i = 0
    mark_start = 0
    mark_end = 0
    index_i = 0
    sen_remove_list = []

    #print("sen_after14", sen)

    #15.冒号后的内容
    m_15 = 0
    new_list = []
    index_insert_15 = 0
    mark_colon = ""
    try:
        for i in sen:
            index_i = sen.index(i)
            if i in ["：",":"] and sen[index_i+1] != "“" and sen[-1] in punct_list:
                new_list = sen[index_i:-1]
                joint_content = "".join(new_list)
                joint_list.append(joint_content)
                break
            elif i in ["：",":"] and sen[index_i+1] != "“" and sen[-1] not in punct_list:
                new_list = sen[index_i::]
                joint_content = "".join(new_list)
                joint_list.append(joint_content)
                break

    except Exception:
        pass

    if index_i != len(sen)-1:
        for i in range(index_i,len(sen)):
            sen_remove_list.append(sen[i])

    for i in sen_remove_list:
        sen.remove(i)

    if len(joint_list) != 0:
        for j in joint_list:
            sen.insert(index_i, j)
            m_15 = 1
            index_insert_15 = index_i
            if m_03 == 1 and index_insert_03 > index_insert_15:
                index_insert_03 -= (len(j) - 1)
            if m_1 == 1 and index_insert_1 > index_insert_15:
                index_insert_1 -= (len(j) - 1)
            if m_91 == 1 and index_insert_91 > index_insert_15:
                index_insert_91 -= (len(j)-1)
            if m_92 == 1 and index_insert_92 > index_insert_15:
                index_insert_92 -= (len(j)-1)
            if m_93 == 1 and index_insert_93 > index_insert_15:
                index_insert_93 -= (len(j)-1)
            if m_941 == 1 and index_insert_941 > index_insert_15:
                index_insert_941 -= (len(j)-1)
            if m_942 == 1 and index_insert_942 > index_insert_15:
                index_insert_942 -= (len(j)-1)
            if m_95 == 1 and index_insert_95 > index_insert_15:
                index_insert_95 -= (len(j)-1)
            if m_961 == 1 and index_insert_961 > index_insert_15:
                index_insert_961 -= (len(j)-1)
            if m_962 == 1 and index_insert_962 > index_insert_15:
                index_insert_962 -= (len(j)-1)
            if m_971 == 1 and index_insert_971 > index_insert_15:
                index_insert_971 -= (len(j)-1)
            if m_972 == 1 and index_insert_972 > index_insert_15:
                index_insert_972 -= (len(j)-1)
            if m_973 == 1 and index_insert_973 > index_insert_15:
                index_insert_973 -= (len(j)-1)
            if m_10 == 1 and index_insert_10 > index_insert_15:
                index_insert_10 -= (len(j)-1)
            if m_11 == 1 and index_insert_11 > index_insert_15:
                index_insert_11 -= (len(j)-1)
            if m_12 == 1 and index_insert_12 > index_insert_15:
                index_insert_12 -= (len(j)-1)
            if m_13_1_1 == 1 and index_insert_13_1_1 > index_insert_15:
                index_insert_13_1_1 -= (len(j)-1)
            if m_13_1_2 == 1 and index_insert_13_1_2 > index_insert_15:
                index_insert_13_1_2 -= (len(j)-1)
            if m_13_2 == 1 and index_insert_13_2 > index_insert_15:
                index_insert_13_2 -= (len(j)-1)
            if m_13_3 == 1 and index_insert_13_3 > index_insert_15:
                index_insert_13_3 -= (len(j)-1)
            if m_14 == 1 and index_insert_14 > index_insert_15:
                index_insert_14 -= (len(j)-1)

    mark_colon = "1 001010 000000 000000 000000 000000"

    joint_content = ""
    joint_list = []
    new_list = []
    sen_remove_list = []

    #print("sen_after15", sen)

    # 15.5 把专有名词表中有的词选出标注
    list_temp = copy.deepcopy(sen)
    m_155 = 0
    index_1 = 0
    mark_yp = ""
    word_temp = ""

    #print("YP_uncut_word", YP_uncut_words)

    try:
        for i in list_temp:
            index_i = list_temp.index(i)
            for j in YP_uncut_words:
                if i == j:
                    index_yp = list_temp.index(i)
                    YP_words.append(i)
                    m_155 = 1
                    index_insert_155 = copy.deepcopy(index_i)
                    df_word = df.loc[df["word"] == "000" + j].values
                    if len(df.loc[df["word"] == "000" + j].index) != 0:
                        mark_yp = df_word[0][1]
                        break
                    else:
                        mark_yp = "1 010111 000000 000000 000000 000000"
                        break
    except Exception:
        pass

    try:
        for i in list_temp:
            index_1 = list_temp.index(i)
            if i not in database_words and list_temp[index_1+1] not in database_words:
                mark_word = i
                word_temp = i[-1] + list_temp[index_1+1][0]
                word_before = i[0:-1]
                word_after = list_temp[index_1+1][1::]
                break
    except Exception:
        pass

    try:
        if word_temp in database_words:
            index_word_temp = list_temp.index(mark_word)
            sen[index_word_temp] = word_before
            sen[index_word_temp+1] = word_temp
            sen.insert(index_word_temp+2, word_after)
    except Exception:
        pass

    #print("YP_words", YP_words)
    #print("mark_yp", mark_yp)

    #print("sen_after_155", sen)

    #print("mark_yp", mark_yp)

    # 16 把专有名词表中有的词合并
    index_yp = 0
    index_yp_end = 0
    index_insert_16 = 0
    index_insert_161 = 0
    m_16 = 0
    m_161 = 0
    index_cut_yp = 0
    mark_sequence = ""
    g_combine = ""
    residue_content = ""
    mark_word_flag = ""
    mark_word = ""
    mark_cut_yp = ""
    mark_dataword_combine = ""
    list_yp_0 = []
    list_yp = []
    yp = []
    residue = []
    remove_list = []
    remove_list2 = []
    joint_list = []
    word_j = []

    list_temp = copy.deepcopy(sen)

    for i in list_temp:
        if i in dot_dict:
            list_temp.remove(i)

    try:
        for i in list_temp:
            for j in YP_uncut_words:
                if (j[0:4] == i) and (i not in YP_words) and (len(j) > len(i)):
                    index_yp = list_temp.index(i)
                    list_yp_0.append(list_temp[index_yp::])
                    #print("1ok")
                if (j[0:3] == i) and (i not in YP_words) and (len(j) > len(i)):
                    index_yp = list_temp.index(i)
                    list_yp_0.append(list_temp[index_yp::])
                    #print("2ok")
                if (j[0:2] == i) and (i not in YP_words) and (len(j) > len(i)):
                    index_yp = list_temp.index(i)
                    list_yp_0.append(list_temp[index_yp::])
                    #print("3ok")
                elif (j[0] == i) and (i not in YP_words) and (len(j) > len(i)):
                    index_yp = list_temp.index(i)
                    list_yp_0.append(list_temp[index_yp::])
                    #print("4ok", i, j)
                elif (j[-1] == i) and (i not in YP_words) and (len(j) > len(i)):
                    index_yp = list_temp.index(i)
                    list_yp_0.append(list_temp[index_yp::])
                    #print("5ok")
    except Exception:
        pass

    #print("list_yp_0", list_yp_0)

    try:
        for i in list_yp_0:
            for g in i:
                if i[index_g+1]:
                    list_yp = i[index_g]+i[index_g+1]
                    g_combine = "".join(i[index_g]+i[index_g+1])
                #len_g = Count_str(g)
                for j in YP_uncut_words:
                    #print("j", j)
                    #len_j = Count_str(j)
                    if g_combine == j:
                        index_insert_16 = sen.index(g)
                        sen.insert(index_insert_16, g_combine)
                        #print("index_insert_16", index_insert_16)
                        for i in list_yp:
                            if i in sen:
                                sen.remove(i)
                        df_word = df.loc[df["word"] == "000" + g_combine].values
                        if len(df.loc[df["word"] == "000" + g_combine].index) != 0:
                            mark_cut_yp = "1 010111 000000 000000 000000 000000"
                        m_16 = 1
                        if g_combine not in joint_list:
                            joint_list.append(g_combine)
                        if m_03 == 1 and index_insert_03 > index_insert_16:
                            index_insert_03 -= (len(j) - 1)
                        if m_1 == 1 and index_insert_1 > index_insert_16:
                            index_insert_1 -= (len(j) - 1)
                        if m_91 == 1 and index_insert_91 > index_insert_16:
                            index_insert_91 -= (len(list_yp) - 1)
                        if m_92 == 1 and index_insert_92 > index_insert_16:
                            index_insert_92 -= (len(list_yp) - 1)
                        if m_93 == 1 and index_insert_93 > index_insert_16:
                            index_insert_93 -= (len(list_yp) - 1)
                        if m_941 == 1 and index_insert_941 > index_insert_16:
                            index_insert_941 -= (len(list_yp) - 1)
                        if m_942 == 1 and index_insert_942 > index_insert_16:
                            index_insert_942 -= (len(list_yp) - 1)
                        if m_95 == 1 and index_insert_95 > index_insert_16:
                            index_insert_95 -= (len(list_yp) - 1)
                        if m_961 == 1 and index_insert_961 > index_insert_16:
                            index_insert_961 -= (len(list_yp) - 1)
                        if m_962 == 1 and index_insert_962 > index_insert_16:
                            index_insert_962 -= (len(list_yp) - 1)
                        if m_971 == 1 and index_insert_971 > index_insert_16:
                            index_insert_971 -= (len(list_yp) - 1)
                        if m_972 == 1 and index_insert_972 > index_insert_16:
                            index_insert_972 -= (len(list_yp) - 1)
                        if m_973 == 1 and index_insert_973 > index_insert_16:
                            index_insert_973 -= (len(list_yp) - 1)
                        if m_10 == 1 and index_insert_10 > index_insert_16:
                            index_insert_10 -= (len(list_yp) - 1)
                        if m_11 == 1 and index_insert_11 > index_insert_16:
                            index_insert_11 -= (len(list_yp) - 1)
                        if m_12 == 1 and index_insert_12 > index_insert_16:
                            index_insert_12 -= (len(list_yp) - 1)
                        if m_13_1_1 == 1 and index_insert_13_1_1 > index_insert_16:
                            index_insert_13_1_1 -= (len(list_yp) - 1)
                        if m_13_1_2 == 1 and index_insert_13_1_2 > index_insert_16:
                            index_insert_13_1_2 -= (len(list_yp) - 1)
                        if m_13_2 == 1 and index_insert_13_2 > index_insert_16:
                            index_insert_13_2 -= (len(list_yp) - 1)
                        if m_13_3 == 1 and index_insert_13_3 > index_insert_16:
                            index_insert_13_3 -= (len(list_yp) - 1)
                        if m_14 == 1 and index_insert_14 > index_insert_16:
                            index_insert_14 -= (len(list_yp) - 1)
                        if m_15 == 1 and index_insert_15 > index_insert_16:
                            index_insert_15 -= (len(list_yp) - 1)
    except Exception:
        pass

    #print("YP_words", YP_words)

    for i in joint_list:
        if i not in YP_words:
            YP_words.append(i)

    #print("YP_words", YP_words)

    list_yp_0 = []

    try:
        for i in list_temp:
            for j in database_words:
                if (j[0:4] == i) and (len(j) > len(i)):
                    index_yp = list_temp.index(i)
                    if list_temp[index_yp::] not in list_yp_0:
                        list_yp_0.append(list_temp[index_yp::])
                    word_j.append(j)
                    #print("1", j)
                if (j[0:3] == i) and (len(j) > len(i)):
                    index_yp = list_temp.index(i)
                    if list_temp[index_yp::] not in list_yp_0:
                        list_yp_0.append(list_temp[index_yp::])
                    word_j.append(j)
                    #print("2", j)
                if (j[0:2] == i) and (len(j) > len(i)):
                    index_yp = list_temp.index(i)
                    if list_temp[index_yp::] not in list_yp_0:
                        list_yp_0.append(list_temp[index_yp::])
                    word_j.append(j)
                    #print("3", j)
                elif (j[0] == i) and (len(j) > len(i)):
                    index_yp = list_temp.index(i)
                    if list_temp[index_yp::] not in list_yp_0:
                        list_yp_0.append(list_temp[index_yp::])
                    word_j.append(j)
                    #print("4", j)
                elif (j[-1] == i) and (len(j) > len(i)):
                    index_yp = list_temp.index(i)
                    if list_temp[index_yp::] not in list_yp_0:
                        list_yp_0.append(list_temp[index_yp::])
                    word_j.append(j)
                    #print("5", j)
    except Exception:
        pass

    #print("list_yp_0", list_yp_0)

    g_combine = ""
    g_combine_1 = ""
    g_combine_2 = ""
    list_remove = []

    # （1）2位的词对2位的词，直接合并，或者切分错误
    try:
        for i in list_yp_0:
            for g in i:
                index_g = i.index(g)
                if i[index_g+1]:
                    list_remove = i[index_g:index_g+2]
                    list_yp = i[index_g]+i[index_g+1]
                    list_yp_1 = i[index_g][-1]+i[index_g+1]
                    list_yp_2 = i[index_g]+i[index_g+1][0]
                    g_combine = "".join(list_yp)
                    g_combine_1 = "".join(list_yp_1)
                    g_combine_2 = "".join(list_yp_2)
                    #print("g_combine", g_combine)
                    #print("g_combine_1", g_combine_1)
                    #print("g_combine_2", g_combine_2)
                #len_g = Count_str(g)
                for j in word_j:
                    #print("j", j)
                    #len_j = Count_str(j)
                    if g_combine == j:
                        index_insert_161 = sen.index(g)
                        sen.insert(index_insert_161, g_combine)
                        #", index_insert_161)
                        for i in list_remove:
                            if i in sen:
                                sen.remove(i)
                        df_word = df.loc[df["word"] == "000" + g_combine].values
                        if len(df.loc[df["word"] == "000" + g_combine].index) != 0:
                            mark_dataword_combine = df_word[0][1]
                        m_161 = 1
                        #print("mark_dataword_combine", mark_dataword_combine)
                        if m_03 == 1 and index_insert_03 > index_insert_161:
                            index_insert_03 -= (len(list_yp)  - 1)
                        if m_1 == 1 and index_insert_1 > index_insert_161:
                            index_insert_1 -= (len(list_yp) - 1)
                        if m_91 == 1 and index_insert_91 > index_insert_161:
                            index_insert_91 -= (len(list_yp) - 1)
                        if m_92 == 1 and index_insert_92 > index_insert_161:
                            index_insert_92 -= (len(list_yp) - 1)
                        if m_93 == 1 and index_insert_93 > index_insert_161:
                            index_insert_93 -= (len(list_yp) - 1)
                        if m_941 == 1 and index_insert_941 > index_insert_161:
                            index_insert_941 -= (len(list_yp) - 1)
                        if m_942 == 1 and index_insert_942 > index_insert_161:
                            index_insert_942 -= (len(list_yp) - 1)
                        if m_95 == 1 and index_insert_95 > index_insert_161:
                            index_insert_95 -= (len(list_yp) - 1)
                        if m_961 == 1 and index_insert_961 > index_insert_161:
                            index_insert_961 -= (len(list_yp) - 1)
                        if m_962 == 1 and index_insert_962 > index_insert_161:
                            index_insert_962 -= (len(list_yp) - 1)
                        if m_971 == 1 and index_insert_971 > index_insert_161:
                            index_insert_971 -= (len(list_yp) - 1)
                        if m_972 == 1 and index_insert_972 > index_insert_161:
                            index_insert_972 -= (len(list_yp) - 1)
                        if m_973 == 1 and index_insert_973 > index_insert_161:
                            index_insert_973 -= (len(list_yp) - 1)
                        if m_10 == 1 and index_insert_10 > index_insert_161:
                            index_insert_10 -= (len(list_yp) - 1)
                        if m_11 == 1 and index_insert_11 > index_insert_161:
                            index_insert_11 -= (len(list_yp) - 1)
                        if m_12 == 1 and index_insert_12 > index_insert_161:
                            index_insert_12 -= (len(list_yp) - 1)
                        if m_13_1_1 == 1 and index_insert_13_1_1 > index_insert_161:
                            index_insert_13_1_1 -= (len(list_yp) - 1)
                        if m_13_1_2 == 1 and index_insert_13_1_2 > index_insert_161:
                            index_insert_13_1_2 -= (len(list_yp) - 1)
                        if m_13_2 == 1 and index_insert_13_2 > index_insert_161:
                            index_insert_13_2 -= (len(list_yp) - 1)
                        if m_13_3 == 1 and index_insert_13_3 > index_insert_161:
                            index_insert_13_3 -= (len(list_yp) - 1)
                        if m_14 == 1 and index_insert_14 > index_insert_161:
                            index_insert_14 -= (len(list_yp) - 1)
                        if m_15 == 1 and index_insert_15 > index_insert_161:
                            index_insert_15 -= (len(list_yp) - 1)
                        if m_16 == 1 and index_insert_16 > index_insert_161:
                            index_insert_16 -= (len(list_yp) - 1)
                        break
                    elif g_combine_1 == j:
                        index_insert_161 = sen.index(g)
                        sen.insert(index_insert_161, i[index_g][0])
                        sen.insert(index_insert_161, g_combine_1)
                        for i in list_remove:
                            if i in sen:
                                sen.remove(i)
                        df_word = df.loc[df["word"] == "000" + g_combine_1].values
                        if len(df.loc[df["word"] == "000" + g_combine_1].index) != 0:
                            mark_dataword_combine = df_word[0][1]
                        m_161 = 1
                        if m_03 == 1 and index_insert_03 > index_insert_161:
                            index_insert_03 -= (len(list_yp)  - 1)
                        if m_1 == 1 and index_insert_1 > index_insert_161:
                            index_insert_1 -= (len(list_yp) - 1)
                        if m_91 == 1 and index_insert_91 > index_insert_161:
                            index_insert_91 -= (len(list_yp) - 1)
                        if m_92 == 1 and index_insert_92 > index_insert_161:
                            index_insert_92 -= (len(list_yp) - 1)
                        if m_93 == 1 and index_insert_93 > index_insert_161:
                            index_insert_93 -= (len(list_yp) - 1)
                        if m_941 == 1 and index_insert_941 > index_insert_161:
                            index_insert_941 -= (len(list_yp) - 1)
                        if m_942 == 1 and index_insert_942 > index_insert_161:
                            index_insert_942 -= (len(list_yp) - 1)
                        if m_95 == 1 and index_insert_95 > index_insert_161:
                            index_insert_95 -= (len(list_yp) - 1)
                        if m_961 == 1 and index_insert_961 > index_insert_161:
                            index_insert_961 -= (len(list_yp) - 1)
                        if m_962 == 1 and index_insert_962 > index_insert_161:
                            index_insert_962 -= (len(list_yp) - 1)
                        if m_971 == 1 and index_insert_971 > index_insert_161:
                            index_insert_971 -= (len(list_yp) - 1)
                        if m_972 == 1 and index_insert_972 > index_insert_161:
                            index_insert_972 -= (len(list_yp) - 1)
                        if m_973 == 1 and index_insert_973 > index_insert_161:
                            index_insert_973 -= (len(list_yp) - 1)
                        if m_10 == 1 and index_insert_10 > index_insert_161:
                            index_insert_10 -= (len(list_yp) - 1)
                        if m_11 == 1 and index_insert_11 > index_insert_161:
                            index_insert_11 -= (len(list_yp) - 1)
                        if m_12 == 1 and index_insert_12 > index_insert_161:
                            index_insert_12 -= (len(list_yp) - 1)
                        if m_13_1_1 == 1 and index_insert_13_1_1 > index_insert_161:
                            index_insert_13_1_1 -= (len(list_yp) - 1)
                        if m_13_1_2 == 1 and index_insert_13_1_2 > index_insert_161:
                            index_insert_13_1_2 -= (len(list_yp) - 1)
                        if m_13_2 == 1 and index_insert_13_2 > index_insert_161:
                            index_insert_13_2 -= (len(list_yp) - 1)
                        if m_13_3 == 1 and index_insert_13_3 > index_insert_161:
                            index_insert_13_3 -= (len(list_yp) - 1)
                        if m_14 == 1 and index_insert_14 > index_insert_161:
                            index_insert_14 -= (len(list_yp) - 1)
                        if m_15 == 1 and index_insert_15 > index_insert_161:
                            index_insert_15 -= (len(list_yp) - 1)
                        if m_16 == 1 and index_insert_16 > index_insert_161:
                            index_insert_16 -= (len(list_yp) - 1)
                        break
                    elif g_combine_2 == j:
                        index_insert_161 = sen.index(g)
                        sen.insert(index_insert_161, g_combine_2)
                        sen.insert(index_insert_161+1, i[index_g+1][-1])
                        for i in list_remove:
                            if i in sen:
                                sen.remove(i)
                        df_word = df.loc[df["word"] == "000" + g_combine_2].values
                        if len(df.loc[df["word"] == "000" + g_combine_2].index) != 0:
                            mark_dataword_combine = df_word[0][1]
                        m_161 = 1
                        if m_03 == 1 and index_insert_03 > index_insert_161:
                            index_insert_03 -= (len(list_yp) - 1)
                        if m_1 == 1 and index_insert_1 > index_insert_161:
                            index_insert_1 -= (len(list_yp) - 1)
                        if m_91 == 1 and index_insert_91 > index_insert_161:
                            index_insert_91 -= (len(list_yp) - 1)
                        if m_92 == 1 and index_insert_92 > index_insert_161:
                            index_insert_92 -= (len(list_yp) - 1)
                        if m_93 == 1 and index_insert_93 > index_insert_161:
                            index_insert_93 -= (len(list_yp) - 1)
                        if m_941 == 1 and index_insert_941 > index_insert_161:
                            index_insert_941 -= (len(list_yp) - 1)
                        if m_942 == 1 and index_insert_942 > index_insert_161:
                            index_insert_942 -= (len(list_yp) - 1)
                        if m_95 == 1 and index_insert_95 > index_insert_161:
                            index_insert_95 -= (len(list_yp) - 1)
                        if m_961 == 1 and index_insert_961 > index_insert_161:
                            index_insert_961 -= (len(list_yp) - 1)
                        if m_962 == 1 and index_insert_962 > index_insert_161:
                            index_insert_962 -= (len(list_yp) - 1)
                        if m_971 == 1 and index_insert_971 > index_insert_161:
                            index_insert_971 -= (len(list_yp) - 1)
                        if m_972 == 1 and index_insert_972 > index_insert_161:
                            index_insert_972 -= (len(list_yp) - 1)
                        if m_973 == 1 and index_insert_973 > index_insert_161:
                            index_insert_973 -= (len(list_yp) - 1)
                        if m_10 == 1 and index_insert_10 > index_insert_161:
                            index_insert_10 -= (len(list_yp) - 1)
                        if m_11 == 1 and index_insert_11 > index_insert_161:
                            index_insert_11 -= (len(list_yp) - 1)
                        if m_12 == 1 and index_insert_12 > index_insert_161:
                            index_insert_12 -= (len(list_yp) - 1)
                        if m_13_1_1 == 1 and index_insert_13_1_1 > index_insert_161:
                            index_insert_13_1_1 -= (len(list_yp) - 1)
                        if m_13_1_2 == 1 and index_insert_13_1_2 > index_insert_161:
                            index_insert_13_1_2 -= (len(list_yp) - 1)
                        if m_13_2 == 1 and index_insert_13_2 > index_insert_161:
                            index_insert_13_2 -= (len(list_yp) - 1)
                        if m_13_3 == 1 and index_insert_13_3 > index_insert_161:
                            index_insert_13_3 -= (len(list_yp) - 1)
                        if m_14 == 1 and index_insert_14 > index_insert_161:
                            index_insert_14 -= (len(list_yp) - 1)
                        if m_15 == 1 and index_insert_15 > index_insert_161:
                            index_insert_15 -= (len(list_yp) - 1)
                        if m_16 == 1 and index_insert_16 > index_insert_161:
                            index_insert_16 -= (len(list_yp) - 1)
                        break
    except Exception:
        pass

    #print("sen_after_16", sen)
    #print("YP_words", YP_words)

    # 17.XXX年的合并
    index_sen = 0
    index_year_start = 0
    index_year_end = 0
    index_insert_17 = 0
    m_17 = 0
    if_number = 0
    joint_content = ""
    mark_year = ""
    joint_list = []
    sen_remove_list = []

    try:
        for i in sen:
            if_number = Is_number(i)
            index_sen = sen.index(i)
            #print("if_number", if_number)
            if (if_number == 0 or if_number == 1) and (sen[index_sen+1] == "年") and (sen[index_sen - 1] not in ["公元前", "公元后", "公元"]):
                joint_content = "".join(sen[index_sen:index_sen+2])
                for j in sen[index_sen:index_sen+2]:
                    sen_remove_list.append(j)
                if sen[index_sen+3] == "月":
                    joint_content = "".join(sen[index_sen:index_sen + 4])
                    for j in sen[index_sen+2:index_sen + 4]:
                        sen_remove_list.append(j)
                    if sen[index_sen + 5] == "日":
                        joint_content = "".join(sen[index_sen:index_sen + 6])
                        for j in sen[index_sen+4:index_sen + 6]:
                            sen_remove_list.append(j)
                index_insert_17 = index_sen
                joint_list.append(joint_content)
                print("1")
            elif (if_number == 0 or if_number == 1) and (sen[index_sen+1] == "年") and (sen[index_sen - 1] in ["公元前", "公元后", "公元"]):
                joint_content = "".join(sen[index_sen-1:index_sen+2])
                for j in sen[index_sen-1:index_sen+2]:
                    sen_remove_list.append(j)
                if sen[index_sen+3] == "月":
                    joint_content = "".join(sen[index_sen:index_sen + 4])
                    for j in sen[index_sen+2:index_sen + 4]:
                        sen_remove_list.append(j)
                    if sen[index_sen + 5] == "日":
                        joint_content = "".join(sen[index_sen:index_sen + 6])
                        for j in sen[index_sen+4:index_sen + 6]:
                            sen_remove_list.append(j)
                index_insert_17 = index_sen - 1
                joint_list.append(joint_content)
                #print("2")
            elif (if_number == 0 or if_number == 1) and (sen[index_sen+1] == "年") and (sen[index_sen - 1] == sen[0]):
                joint_content = "".join(sen[index_sen:index_sen+2])
                for j in sen[index_sen:index_sen+2]:
                    sen_remove_list.append(j)
                if sen[index_sen+3] == "月":
                    joint_content = "".join(sen[index_sen:index_sen + 4])
                    for j in sen[index_sen+2:index_sen + 4]:
                        sen_remove_list.append(j)
                    if sen[index_sen + 5] == "日":
                        joint_content = "".join(sen[index_sen:index_sen + 6])
                        for j in sen[index_sen+4:index_sen + 6]:
                            sen_remove_list.append(j)
                index_insert_17 = index_sen
                joint_list.append(joint_content)
                #print("3")
            elif (if_number == 0 or if_number == 1) and (sen[index_sen+1] == "个") and (sen[index_sen+2] in ["月", "年头", "日夜"]):
                joint_content = "".join(sen[index_sen:index_sen+3])
                for j in sen[index_sen:index_sen+3]:
                    sen_remove_list.append(j)
                index_insert_17 = index_sen
                joint_list.append(joint_content)
                #print("4")
    except Exception:
        pass

    for i in sen_remove_list:
        sen.remove(i)

    if len(joint_list) != 0:
        for j in joint_list:
            sen.insert(index_insert_17, j)
            m_17 = 1
            if m_03 == 1 and index_insert_03 > index_insert_17:
                index_insert_03 -= (len(j) - 1)
            if m_1 == 1 and index_insert_1 > index_insert_17:
                index_insert_1 -= (len(j) - 1)
            if m_91 == 1 and index_insert_91 > index_insert_17:
                index_insert_91 -= (len(j) - 1)
            if m_92 == 1 and index_insert_92 > index_insert_17:
                index_insert_92 -= (len(j) - 1)
            if m_93 == 1 and index_insert_93 > index_insert_17:
                index_insert_93 -= (len(j) - 1)
            if m_941 == 1 and index_insert_941 > index_insert_17:
                index_insert_941 -= (len(j) - 1)
            if m_942 == 1 and index_insert_942 > index_insert_17:
                index_insert_942 -= (len(j) - 1)
            if m_95 == 1 and index_insert_95 > index_insert_17:
                index_insert_95 -= (len(j) - 1)
            if m_961 == 1 and index_insert_961 > index_insert_17:
                index_insert_961 -= (len(j) - 1)
            if m_962 == 1 and index_insert_962 > index_insert_17:
                index_insert_962 -= (len(j) - 1)
            if m_971 == 1 and index_insert_971 > index_insert_17:
                index_insert_971 -= (len(j) - 1)
            if m_972 == 1 and index_insert_972 > index_insert_17:
                index_insert_972 -= (len(j) - 1)
            if m_973 == 1 and index_insert_973 > index_insert_17:
                index_insert_973 -= (len(j) - 1)
            if m_10 == 1 and index_insert_10 > index_insert_17:
                index_insert_10 -= (len(j) - 1)
            if m_11 == 1 and index_insert_11 > index_insert_17:
                index_insert_11 -= (len(j) - 1)
            if m_12 == 1 and index_insert_12 > index_insert_17:
                index_insert_12 -= (len(j) - 1)
            if m_13_1_1 == 1 and index_insert_13_1_1 > index_insert_17:
                index_insert_13_1_1 -= (len(j) - 1)
            if m_13_1_2 == 1 and index_insert_13_1_2 > index_insert_17:
                index_insert_13_1_2 -= (len(j) - 1)
            if m_13_2 == 1 and index_insert_13_2 > index_insert_17:
                index_insert_13_2 -= (len(j) - 1)
            if m_13_3 == 1 and index_insert_13_3 > index_insert_17:
                index_insert_13_3 -= (len(j) - 1)
            if m_14 == 1 and index_insert_14 > index_insert_17:
                index_insert_14 -= (len(j) - 1)
            if m_15 == 1 and index_insert_15 > index_insert_17:
                index_insert_15 -= (len(j) - 1)
            if m_16 == 1 and index_insert_16 > index_insert_17:
                index_insert_16 -= (len(j) - 1)
            break

    mark_year = "1 111011 000000 000000 000000 000000"

    #print("sen_after_17", sen)

    # 18. 正常标注词性
    list = copy.deepcopy(sen)
    list1 = copy.deepcopy(list)
    index = 0
    mark_dict_pre = []

    for index, element in enumerate(list1):
        mark_dict_pre.append([element, index])

    #print("mark_dict", mark_dict)

    #print("chinese_names", chinese_names)

    #print("sen[index_insert_cn_name]", sen[index_insert_cn_name])
    #print("mark_cn_name", mark_cn_name)

    try:
        for word in list1:
            if m_cn_name == 1:
                if word == sen[index_insert_cn_name]:
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_cn_name])
    except Exception:
        pass

    #print("mark_dicta0", mark_dict)

    try:
        for word in list1:
            if m_alpha == 1:
                for j in index_insert_alpha:
                    if word == sen[j]:
                        list1.remove(word)
                        word = "000" + word
                        mark_dict.append([word, mark_alpha])
    except Exception:
        pass

    #print("mark_dicta1", mark_dict)

    try:
        for word in list1:
            if m_03 == 1:
                if word == sen[index_insert_03]:
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_n_combine])
    except Exception:
        pass

    #print("mark_dict0.3", mark_dict)

    try:
        for word in list1:
            if m_1 == 1:
                if word == sen[index_insert_1]:
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_1])
    except Exception:
        pass

    #print("mark_dicta2", mark_dict)

    try:
        for word in list1:
            index_word = sen.index(word)
            if m_155 == 1:
                if (index_insert_155 == sen[index_word]) and (word in list1):
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_yp])
    except Exception:
        pass

    #print("mark_dicta3", mark_dict)

    try:
        for word in list1:
            index_word = list1.index(word)
            if m_16 == 1:
                if (word == sen[index_insert_16]) and (word in list1):
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_cut_yp])
                elif (word[1:-1] in YP_words) or (word in YP_words):
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_cut_yp])
                # elif (word[1:-1] in database_words) or (word in database_words):
                #     list1.remove(word)
                #     word = "000" + word
                #     mark_dict.append([word, mark_cut_yp])
    except Exception:
        pass

    #print("mark_dicta4", mark_dict)

    try:
        for word in list1:
            index_word = list1.index(word)
            if m_66 == 1:
                if (word == sen[index_word]) and (word in list1):
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_se])
    except Exception:
        pass

    #print("mark_dicta5", mark_dict)

    try:
        for word in list1:
            index_word = list1.index(word)
            if m_91 == 1:
                if (word == sen[index_insert_91]) and (word in list1):
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_p_p])
    except Exception:
        pass

    #print("mark_dicta6", mark_dict)

    try:
        for word in list1:
            index_word = list1.index(word)
            if m_92 == 1:
                if (word == sen[index_insert_92]) and (word in list1):
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_p_p])
    except Exception:
        pass

    #print("mark_dicta7", mark_dict)

    try:
        for word in list1:
            index_word = list1.index(word)
            if m_93 == 1:
                if (word in list1) and (word == sen[index_insert_93]):
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, mark_se])
    except Exception:
        pass

    #print("mark_dicta8", mark_dict)

    try:
        for word in list1:
            index_word = list1.index(word)
            for key in database_marks:
                if m_941 == 1:
                    if (word in list1) and (word == sen[index_insert_941]):
                        list1.remove(word)
                        word = "000" + word
                        mark_dict.append([word, mark_p_d])
    except Exception:
        pass

    #print("mark_dicta9", mark_dict)

    try:
        for word in list1:
            index_word = list1.index(word)
            if m_942 == 1:
                if (word in list1) and (word == sen[index_insert_942]):
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_p_d])
    except Exception:
        pass

    #print("mark_dicta10", mark_dict)

    try:
        for word in list1:
            index_word = list1.index(word)
            if m_95 == 1:
                if (word in list1) and (word == sen[index_insert_95]):
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_p])

    except Exception:
        pass

    #print("mark_dicta11", mark_dict)

    try:
        for word in list1:
            index_word = list1.index(word)
            if m_961 == 1:
                if (word in list1) and (word == sen[index_insert_961]):
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_t_d])
    except Exception:
        pass

    #print("mark_dicta12", mark_dict)

    try:
        for word in list1:
            index_word = list1.index(word)
            if m_962 == 1:
                if (word in list1) and (word == sen[index_insert_962]):
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_t_d])
    except Exception:
        pass

    #print("mark_dicta13", mark_dict)

    try:
        for word in list1:
            index_word = list1.index(word)
            if m_971 == 1:
                if (word in list1) and (word == sen[index_insert_971]):
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_t])
    except Exception:
        pass

    #print("mark_dicta14", mark_dict)

    try:
        for word in list1:
            index_word = list1.index(word)
            if m_972 == 1:
                if (word in list1) and (word == sen[index_insert_972]):
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_no])
    except Exception:
        pass

    #print("mark_dicta15", mark_dict)

    try:
        for word in list1:
            index_word = list1.index(word)
            if m_973 == 1:
                if (word in list1) and (word == sen[index_insert_973]):
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_connect_number])
    except Exception:
        pass

    #print("mark_dicta16", mark_dict)

    try:
        for word in list1:
            index_word = list1.index(word)
            if m_10 == 1:
                if (word in list1) and (word == sen[index_insert_10]):
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_book_quote])
    except Exception:
        pass

    #print("mark_dicta17", mark_dict)

    try:
        for word in list1:
            index_word = list1.index(word)
            if m_11 == 1:
                if (word in list1) and (word == sen[index_insert_11]):
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_pause])
    except Exception:
        pass

    #print("mark_dicta18", mark_dict)

    try:
        for word in list1:
            index_word = list1.index(word)
            if m_12 == 1:
                if (word in list1) and (word == sen[index_insert_12]):
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_num_connect])
    except Exception:
        pass

    #print("mark_dicta19", mark_dict)

    try:
        for word in list1:
            index_word = list1.index(word)
            if m_13_1_1 == 1:
                if (word in list1) and (word == sen[index_insert_13_1_1]):
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_imit_1])
    except Exception:
        pass

    #print("mark_dicta20", mark_dict)

    try:
        for word in list1:
            index_word = list1.index(word)
            if m_13_1_2 == 1:
                if (word in list1) and (word == sen[index_insert_13_1_2]):
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_imit_2])
    except Exception:
        pass

    #print("mark_dicta21", mark_dict)

    try:
        for word in list1:
            index_word = list1.index(word)
            if m_13_2 == 1:
                if (word in list1) and (word == sen[index_insert_13_2]):
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_dash_1])
    except Exception:
        pass

    #print("mark_dicta22", mark_dict)

    try:
        for word in list1:
            index_word = list1.index(word)
            if m_13_3 == 1:
                if (word in list1) and (word == sen[index_insert_13_2]):
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_dash_2])
    except Exception:
        pass

    #print("mark_dicta23", mark_dict)

    try:
        for word in list1:
            index_word = list1.index(word)
            if m_14 == 1:
                if (word in list1) and (word == sen[index_insert_14]):
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_bracket])
    except Exception:
        pass

    #print("mark_dicta24", mark_dict)

    #print("m_15", m_15)
    #print("m_155", m_155)

    try:
        for word in list1:
            index_word = list1.index(word)
            if m_15 == 1:
                if (word in list1) and (word == sen[index_insert_15]):
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_colon])
    except Exception:
        pass

    #print("mark_dicta25", mark_dict)

    try:
        for word in list1:
            index_word = list1.index(word)
            if m_155 == 1:
                if (word in list1) and (word == sen[index_insert_155]):
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_yp])

    except Exception:
        pass

    #print("mark_dicta26", mark_dict)

    try:
        for word in list1:
            index_word = list1.index(word)
            if m_16 == 1:
                if (word in list1) and (word == sen[index_insert_16]):
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_cut_yp])
    except Exception:
        pass

    #print("mark_dicta265", mark_dict)

    try:
        for word in list1:
            index_word = list1.index(word)
            if m_16 == 1:
                if (word in list1) and (word == sen[index_insert_16]):
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_cut_yp])

    except Exception:
        pass

    try:
        for word in list1:
            index_word = list1.index(word)
            if m_161 == 1:
                if (word in list1) and (word == sen[index_insert_161]):
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_dataword_combine])

    except Exception:
        pass

    #print("mark_dicta266", mark_dict)

    try:
        for word in list1:
            index_word = list1.index(word)
            if m_17 == 1:
                if (word in list1) and (word == sen[index_insert_17]):
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_year])
    except Exception:
        pass

    #print("mark_dicta27", mark_dict)

    try:
        for word in list1:
            index_word = list1.index(word)
            if word in dot_dict:
                list1.remove(word)
                word = "000" + word
                mark_dict.append([word, '1 000000 000000 000000 000000 000000'])
    except Exception:
        pass

    #print("mark_dicta28", mark_dict)

    try:
        for word in list1:
            num = Isnub(word)
            if num == "True" and len(df.loc[df["word"] == "000" + word].index) == 0:
                list1.remove(word)
                word = "000" + word
                mark_dict.append([word, '1 000010 000000 000000 000000 000000'])
            elif num == "True" and len(df.loc[df["word"] == "100" + word].index) == 0:
                list1.remove(word)
                word = "100" + word
                mark_dict.append([word, '1 000010 000000 000000 000000 000000'])
            if num == "True" and len(df.loc[df["word"] == "001" + word].index) == 0:
                list1.remove(word)
                word = "001" + word
                mark_dict.append([word, '1 000010 000000 000000 000000 000000'])
            elif num == "False":
                pass
    except Exception:
        pass

    try:
        for word in list1:
            index_word = list1.index(word)
            if m_171 == 1:
                if (word in list1) and (word == sen[index_insert_171]):
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_se_171])
    except Exception:
        pass

    #print("mark_dicta28", mark_dict)

    try:
        for word in list1:
            index_word = list1.index(word)
            if m_172 == 1:
                if (word in list1) and (word == sen[index_insert_172]):
                    list1.remove(word)
                    word = "000" + word
                    mark_dict.append([word, mark_se_172])
    except Exception:
        pass

    #print("mark_dicta29", mark_dict)

    list2 = copy.deepcopy(list1)

    df_word = []
    df_word_1 = []

    try:
        for word in list2:
            #print("word", word)
            df_word = df.loc[df["word"] == "000" + word].values
            df_word_2 = df.loc[df["word"] == "001" + word].values
            df_word_3 = df.loc[df["word"] == "010" + word].values
            df_word_4 = df.loc[df["word"] == "011" + word].values
            df_word_5 = df.loc[df["word"] == "100" + word].values
            df_word_a = df.loc[df["word"] == "000" + word[-1]].values #量词/时间词/空间词1位
            df_word_a2 = df.loc[df["word"] == "001" + word[-1]].values
            df_word_a3 = df.loc[df["word"] == "010" + word[-1]].values
            df_word_a4 = df.loc[df["word"] == "011" + word[-1]].values
            df_word_a5 = df.loc[df["word"] == "100" + word[-1]].values
            df_word_b = df.loc[df["word"] == "000" + word[-2:-1]].values #量词/时间词/空间词2位
            df_word_b2 = df.loc[df["word"] == "001" + word[-2:-1]].values
            df_word_b3 = df.loc[df["word"] == "010" + word[-2:-1]].values
            df_word_b4 = df.loc[df["word"] == "011" + word[-2:-1]].values
            df_word_b5 = df.loc[df["word"] == "100" + word[-2:-1]].values
            if (len(df.loc[df["word"] == "000" + word].index) != 0) and (word not in YP_uncut_words and word[1:-1] not in YP_uncut_words):
                mark_dict.append([df_word[0][0],df_word[0][1]])
                #print("0", word)
                if (len(df.loc[df["word"] == "001" + word].index) != 0) and (
                            word not in YP_uncut_words and word[1:-1] not in YP_uncut_words):
                    mark_dict.append([df_word_2[0][0], df_word_2[0][1]])
                    #print("1")
                elif (len(df.loc[df["word"] == "010" + word].index) != 0) and (
                        word not in YP_uncut_words and word[1:-1] not in YP_uncut_words):
                    mark_dict.append([df_word_3[0][0], df_word_3[0][1]])
                    #print("2")
                elif (len(df.loc[df["word"] == "011" + word].index) != 0) and (
                        word not in YP_uncut_words and word[1:-1] not in YP_uncut_words):
                    mark_dict.append([df_word_4[0][0], df_word_4[0][1]])
                    #print("3")
                elif (len(df.loc[df["word"] == "100" + word].index) != 0) and (
                        word not in YP_uncut_words and word[1:-1] not in YP_uncut_words):
                    mark_dict.append([df_word_5[0][0], df_word_5[0][1]])
                    #print("4")
                if word in list1:
                    list1.remove(word)
            elif (len(df.loc[df["word"] == "001" + word].index) != 0) and (
                    word not in YP_uncut_words and word[1:-1] not in YP_uncut_words):
                mark_dict.append([df_word_2[0][0], df_word_2[0][1]])
                #print("5")
                if (len(df.loc[df["word"] == "010" + word].index) != 0) and (
                        word not in YP_uncut_words and word[1:-1] not in YP_uncut_words):
                    mark_dict.append([df_word_3[0][0], df_word_3[0][1]])
                    #print("6")
                elif (len(df.loc[df["word"] == "011" + word].index) != 0) and (
                        word not in YP_uncut_words and word[1:-1] not in YP_uncut_words):
                    mark_dict.append([df_word_4[0][0], df_word_4[0][1]])
                    #print("7")
                elif (len(df.loc[df["word"] == "100" + word].index) != 0) and (
                        word not in YP_uncut_words and word[1:-1] not in YP_uncut_words):
                    mark_dict.append([df_word_5[0][0], df_word_5[0][1]])
                    #print("8")
                if word in list1:
                    list1.remove(word)
            elif (len(df.loc[df["word"] == "010" + word].index) != 0) and (
                    word not in YP_uncut_words and word[1:-1] not in YP_uncut_words):
                mark_dict.append([df_word_3[0][0], df_word_3[0][1]])
                #print("9")
                if (len(df.loc[df["word"] == "011" + word].index) != 0) and (
                        word not in YP_uncut_words and word[1:-1] not in YP_uncut_words):
                    mark_dict.append([df_word_4[0][0], df_word_4[0][1]])
                    #print("10")
                elif (len(df.loc[df["word"] == "100" + word].index) != 0) and (
                        word not in YP_uncut_words and word[1:-1] not in YP_uncut_words):
                    mark_dict.append([df_word_5[0][0], df_word_5[0][1]])
                    #print("11")
                if word in list1:
                    list1.remove(word)
            elif (len(df.loc[df["word"] == "011" + word].index) != 0) and (
                    word not in YP_uncut_words and word[1:-1] not in YP_uncut_words):
                mark_dict.append([df_word_4[0][0], df_word_4[0][1]])
                #print("12")
                if (len(df.loc[df["word"] == "100" + word].index) != 0) and (
                        word not in YP_uncut_words and word[1:-1] not in YP_uncut_words):
                    mark_dict.append([df_word_5[0][0], df_word_5[0][1]])
                    #print("13")
                if word in list1:
                    list1.remove(word)
            elif (len(df.loc[df["word"] == "100" + word].index) != 0) and (
                    word not in YP_uncut_words and word[1:-1] not in YP_uncut_words):
                mark_dict.append([df_word_5[0][0], df_word_5[0][1]])
                #print("14")
                if word in list1:
                    list1.remove(word)
                #print("1", word)
            elif word in chinese_names:
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 010111 000000 000000 000000 000000"])#如果是中文名字，标注为名词
                #print("1.5", word)
            elif word in num_list:
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 000010 000000 000000 000000 000000"])
                #print("2", word)
            elif word[0] == "《":
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 000111 000000 000000 000000 000000"])
                #print("3", word)
            elif word[0] in ["（", "("]:
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, mark_bracket])
                #print("4", word)
            elif word[0] == "：":
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, mark_colon])
                #print("5", word)
            elif word[0:2] == "——":
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, mark_dash])
                #print("6", word)
            elif (len(df.loc[df["word"] == "000" + word].index) != 0) and (df_word[0][1][2:8] in ["000010", "110000"] or df_word[0][1][3:9] in ["000010", "110000"] or df_word[0][1][9:15] in ["000010", "110000"] or df_word[0][1][16:22] in ["000010", "110000"] or df_word[0][1][23:29] in ["000010", "110000"] or df_word[0][1][30:36] in ["000010", "110000"]) and m_12 ==1:
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, mark_num_connect])
            elif (len(df.loc[df["word"] == "100" + word].index) != 0) and (
                        df_word_5[0][1][2:8] in ["000010", "110000"] or df_word_5[0][1][3:9] in ["000010", "110000"] or
                        df_word_5[0][1][9:15] in ["000010", "110000"] or df_word_5[0][1][16:22] in ["000010",
                                                                                                "110000"] or
                        df_word_5[0][1][23:29] in ["000010", "110000"] or df_word_5[0][1][30:36] in ["000010",
                                                                                                     "110000"]) and m_12 == 1:
                if word in list1:
                    list1.remove(word)
                word = "100" + word
                mark_dict.append([word, mark_num_connect])
            elif (len(df.loc[df["word"] == "001" + word].index) != 0) and (
                        df_word_2[0][1][2:8] in ["000010", "110000"] or df_word_2[0][1][3:9] in ["000010", "110000"] or
                        df_word_2[0][1][9:15] in ["000010", "110000"] or df_word_2[0][1][16:22] in ["000010",
                                                                                                "110000"] or
                        df_word_2[0][1][23:29] in ["000010", "110000"] or df_word_2[0][1][30:36] in ["000010",
                                                                                                     "110000"]) and m_12 == 1:
                if word in list1:
                    list1.remove(word)
                word = "001" + word
                mark_dict.append([word, mark_num_connect])
                #print("7", word)
            elif word[0] in baijia_list or word[0:2] in baijia_list:
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, mark_imit])
                #print("8", word)
            elif (len(df.loc[df["word"] == "000" + word].index) != 0) and (df_word[0][1][2:8] == "011000" or df_word[0][1][9:15] == "011000" or df_word[0][1][16:22] == "011000" or df_word[0][1][23:29] == "011000" or df_word[0][1][30:36] == "011000"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, mark_imit])
            elif (len(df.loc[df["word"] == "001" + word].index) != 0) and (
                        df_word_2[0][1][2:8] == "011000" or df_word_2[0][1][9:15] == "011000" or df_word_2[0][1][
                                                                                             16:22] == "011000" or
                        df_word_2[0][1][23:29] == "011000" or df_word_2[0][1][30:36] == "011000"):
                if word in list1:
                    list1.remove(word)
                word = "001" + word
                mark_dict.append([word, mark_imit])
            elif (len(df.loc[df["word"] == "010" + word].index) != 0) and (
                        df_word_3[0][1][2:8] == "011000" or df_word_3[0][1][9:15] == "011000" or df_word_3[0][1][
                                                                                             16:22] == "011000" or
                        df_word_3[0][1][23:29] == "011000" or df_word_3[0][1][30:36] == "011000"):
                if word in list1:
                    list1.remove(word)
                word = "010" + word
                mark_dict.append([word, mark_imit])
            elif (len(df.loc[df["word"] == "011" + word].index) != 0) and (
                    df_word_4[0][1][2:8] == "011000" or df_word_4[0][1][9:15] == "011000" or df_word_4[0][1][
                                                                                         16:22] == "011000" or
                    df_word_4[0][1][23:29] == "011000" or df_word_4[0][1][30:36] == "011000"):
                if word in list1:
                    list1.remove(word)
                word = "011" + word
                mark_dict.append([word, mark_imit])
            elif (len(df.loc[df["word"] == "100" + word].index) != 0) and (
                    df_word_5[0][1][2:8] == "011000" or df_word_5[0][1][9:15] == "011000" or df_word_5[0][1][
                                                                                         16:22] == "011000" or
                    df_word_5[0][1][23:29] == "011000" or df_word_5[0][1][30:36] == "011000"):
                if word in list1:
                    list1.remove(word)
                word = "100" + word
                mark_dict.append([word, mark_imit])
                #print("9", word)
            elif (word[0] == "第") and (df_word_a != []) and (df_word_a[0][1][2:8] == "000011" or df_word_a[0][1][9:15] == "000011" or df_word_a[0][1][16:22] == "000011" or df_word_a[0][1][23:29] == "000011" or df_word_a[0][1][30:36] == "000011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 010000 000000 000000 000000 000000"])
            elif (word[0] == "第") and (df_word_a2 != []) and (
                        df_word_a2[0][1][2:8] == "000011" or df_word_a2[0][1][9:15] == "000011" or df_word_a2[0][1][
                                                                                             16:22] == "000011" or
                        df_word_a2[0][1][23:29] == "000011" or df_word_a2[0][1][30:36] == "000011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 010000 000000 000000 000000 000000"])
            elif (word[0] == "第") and (df_word_a3 != []) and (
                    df_word_a3[0][1][2:8] == "000011" or df_word_a3[0][1][9:15] == "000011" or df_word_a3[0][1][
                                                                                               16:22] == "000011" or
                    df_word_a3[0][1][23:29] == "000011" or df_word_a3[0][1][30:36] == "000011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 010000 000000 000000 000000 000000"])
            elif (word[0] == "第") and (df_word_a4 != []) and (
                    df_word_a4[0][1][2:8] == "000011" or df_word_a4[0][1][9:15] == "000011" or df_word_a4[0][1][
                                                                                               16:22] == "000011" or
                    df_word_a4[0][1][23:29] == "000011" or df_word_a4[0][1][30:36] == "000011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 010000 000000 000000 000000 000000"])
            elif (word[0] == "第") and (df_word_a5 != []) and (
                    df_word_a5[0][1][2:8] == "000011" or df_word_a5[0][1][9:15] == "000011" or df_word_a5[0][1][
                                                                                               16:22] == "000011" or
                    df_word_a5[0][1][23:29] == "000011" or df_word_a5[0][1][30:36] == "000011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 010000 000000 000000 000000 000000"])
            elif (word[0] == "第") and (df_word_b != []) and (
                        df_word_b[0][1][2:8] == "000011" or df_word_b[0][1][9:15] == "000011" or df_word_b[0][1][
                                                                                                 16:22] == "000011" or
                        df_word_b[0][1][23:29] == "000011" or df_word_b[0][1][30:36] == "000011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 010000 000000 000000 000000 000000"])
            elif (word[0] == "第") and (df_word_b2 != []) and (
                    df_word_b2[0][1][2:8] == "000011" or df_word_b2[0][1][9:15] == "000011" or df_word_b2[0][1][
                                                                                               16:22] == "000011" or
                    df_word_b2[0][1][23:29] == "000011" or df_word_b2[0][1][30:36] == "000011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 010000 000000 000000 000000 000000"])
            elif (word[0] == "第") and (df_word_b3 != []) and (
                    df_word_b3[0][1][2:8] == "000011" or df_word_b3[0][1][9:15] == "000011" or df_word_b3[0][1][
                                                                                               16:22] == "000011" or
                    df_word_b3[0][1][23:29] == "000011" or df_word_b3[0][1][30:36] == "000011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 010000 000000 000000 000000 000000"])
            elif (word[0] == "第") and (df_word_b4 != []) and (
                    df_word_b4[0][1][2:8] == "000011" or df_word_b4[0][1][9:15] == "000011" or df_word_b4[0][1][
                                                                                               16:22] == "000011" or
                    df_word_b4[0][1][23:29] == "000011" or df_word_b4[0][1][30:36] == "000011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 010000 000000 000000 000000 000000"])
            elif (word[0] == "第") and (df_word_b5 != []) and (
                    df_word_b5[0][1][2:8] == "000011" or df_word_b5[0][1][9:15] == "000011" or df_word_b5[0][1][
                                                                                               16:22] == "000011" or
                    df_word_b5[0][1][23:29] == "000011" or df_word_b5[0][1][30:36] == "000011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 010000 000000 000000 000000 000000"])
                #print("10", word)
            elif (word[0] == "第") and (len(df.loc[df["word"] == "000" + word[-1]].index) != 0) and (df_word_a[0][1][2:8] == "110000" or df_word_a[0][1][9:15] == "110000" or df_word_a[0][1][16:22] == "110000" or df_word_a[0][1][23:29] == "110000" or df_word_a[0][1][30:36] == "110000"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 110000 000000 000000 000000 000000"])
            elif (word[0] == "第") and (len(df.loc[df["word"] == "001" + word[-1]].index) != 0) and (
                        df_word_a2[0][1][2:8] == "110000" or df_word_a2[0][1][9:15] == "110000" or df_word_a2[0][1][
                                                                                                 16:22] == "110000" or
                        df_word_a2[0][1][23:29] == "110000" or df_word_a2[0][1][30:36] == "110000"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 110000 000000 000000 000000 000000"])
            elif (word[0] == "第") and (len(df.loc[df["word"] == "010" + word[-1]].index) != 0) and (
                        df_word_a3[0][1][2:8] == "110000" or df_word_a3[0][1][9:15] == "110000" or df_word_a3[0][1][
                                                                                                 16:22] == "110000" or
                        df_word_a3[0][1][23:29] == "110000" or df_word_a3[0][1][30:36] == "110000"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 110000 000000 000000 000000 000000"])
            elif (word[0] == "第") and (len(df.loc[df["word"] == "011" + word[-1]].index) != 0) and (
                        df_word_a4[0][1][2:8] == "110000" or df_word_a4[0][1][9:15] == "110000" or df_word_a4[0][1][
                                                                                                 16:22] == "110000" or
                        df_word_a4[0][1][23:29] == "110000" or df_word_a4[0][1][30:36] == "110000"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 110000 000000 000000 000000 000000"])
            elif (word[0] == "第") and (len(df.loc[df["word"] == "100" + word[-1]].index) != 0) and (
                        df_word_a5[0][1][2:8] == "110000" or df_word_a5[0][1][9:15] == "110000" or df_word_a5[0][1][
                                                                                                 16:22] == "110000" or
                        df_word_a5[0][1][23:29] == "110000" or df_word_a5[0][1][30:36] == "110000"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 110000 000000 000000 000000 000000"])
            elif (word[0] == "第") and (len(df.loc[df["word"] == "000" + word[-2:-1]].index) != 0) and (
                            df_word_b[0][1][2:8] == "110000" or df_word_b[0][1][9:15] == "110000" or df_word_b[0][1][
                                                                                                     16:22] == "110000" or
                            df_word_b[0][1][23:29] == "110000" or df_word_b[0][1][30:36] == "110000"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 110000 000000 000000 000000 000000"])
            elif (word[0] == "第") and (len(df.loc[df["word"] == "001" + word[-2:-1]].index) != 0) and (
                    df_word_b2[0][1][2:8] == "110000" or df_word_b2[0][1][9:15] == "110000" or df_word_b2[0][1][
                                                                                               16:22] == "110000" or
                    df_word_b2[0][1][23:29] == "110000" or df_word_b2[0][1][30:36] == "110000"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 110000 000000 000000 000000 000000"])
            elif (word[0] == "第") and (len(df.loc[df["word"] == "010" + word[-2:-1]].index) != 0) and (
                    df_word_b3[0][1][2:8] == "110000" or df_word_b3[0][1][9:15] == "110000" or df_word_b3[0][1][
                                                                                               16:22] == "110000" or
                    df_word_b3[0][1][23:29] == "110000" or df_word_b3[0][1][30:36] == "110000"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 110000 000000 000000 000000 000000"])
            elif (word[0] == "第") and (len(df.loc[df["word"] == "011" + word[-2:-1]].index) != 0) and (
                    df_word_b4[0][1][2:8] == "110000" or df_word_b4[0][1][9:15] == "110000" or df_word_b4[0][1][
                                                                                               16:22] == "110000" or
                    df_word_b4[0][1][23:29] == "110000" or df_word_b4[0][1][30:36] == "110000"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 110000 000000 000000 000000 000000"])
            elif (word[0] == "第") and (len(df.loc[df["word"] == "100" + word[-2:-1]].index) != 0) and (
                    df_word_b5[0][1][2:8] == "110000" or df_word_b5[0][1][9:15] == "110000" or df_word_b5[0][1][
                                                                                               16:22] == "110000" or
                    df_word_b5[0][1][23:29] == "110000" or df_word_b5[0][1][30:36] == "110000"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 110000 000000 000000 000000 000000"])
                #print("11", word)
            elif (word[0] == "第") and (len(df.loc[df["word"] == "000" + word[-1]].index) != 0) and (df_word_a[0][1][2:8] == "111011" or df_word_a[0][1][9:15] == "111011" or df_word_a[0][1][16:22] == "111011" or df_word_a[0][1][23:29] == "111011" or df_word_a[0][1][30:36] == "111011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 111011 000000 000000 000000 000000"])
            elif (word[0] == "第") and (len(df.loc[df["word"] == "001" + word[-1]].index) != 0) and (
                        df_word_a2[0][1][2:8] == "111011" or df_word_a2[0][1][9:15] == "111011" or df_word_a2[0][1][
                                                                                             16:22] == "111011" or
                        df_word_a2[0][1][23:29] == "111011" or df_word_a2[0][1][30:36] == "111011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 111011 000000 000000 000000 000000"])
            elif (word[0] == "第") and (len(df.loc[df["word"] == "010" + word[-1]].index) != 0) and (
                        df_word_a3[0][1][2:8] == "111011" or df_word_a3[0][1][9:15] == "111011" or df_word_a3[0][1][
                                                                                             16:22] == "111011" or
                        df_word_a3[0][1][23:29] == "111011" or df_word_a3[0][1][30:36] == "111011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 111011 000000 000000 000000 000000"])
            elif (word[0] == "第") and (len(df.loc[df["word"] == "011" + word[-1]].index) != 0) and (
                        df_word_a4[0][1][2:8] == "111011" or df_word_a4[0][1][9:15] == "111011" or df_word_a4[0][1][
                                                                                             16:22] == "111011" or
                        df_word_a4[0][1][23:29] == "111011" or df_word_a4[0][1][30:36] == "111011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 111011 000000 000000 000000 000000"])
            elif (word[0] == "第") and (len(df.loc[df["word"] == "100" + word[-1]].index) != 0) and (
                        df_word_a5[0][1][2:8] == "111011" or df_word_a5[0][1][9:15] == "111011" or df_word_a5[0][1][
                                                                                             16:22] == "111011" or
                        df_word_a5[0][1][23:29] == "111011" or df_word_a5[0][1][30:36] == "111011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 111011 000000 000000 000000 000000"])
            elif (word[0] == "第") and (len(df.loc[df["word"] == "000" + word[-2:-1]].index) != 0) and (
                        df_word_b[0][1][2:8] == "111011" or df_word_b[0][1][9:15] == "111011" or df_word_b[0][1][
                                                                                                 16:22] == "111011" or
                        df_word_b[0][1][23:29] == "111011" or df_word_b[0][1][30:36] == "111011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 111011 000000 000000 000000 000000"])
            elif (word[0] == "第") and (len(df.loc[df["word"] == "001" + word[-2:-1]].index) != 0) and (
                    df_word_b2[0][1][2:8] == "111011" or df_word_b2[0][1][9:15] == "111011" or df_word_b2[0][1][
                                                                                               16:22] == "111011" or
                    df_word_b2[0][1][23:29] == "111011" or df_word_b2[0][1][30:36] == "111011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 111011 000000 000000 000000 000000"])
            elif (word[0] == "第") and (len(df.loc[df["word"] == "010" + word[-2:-1]].index) != 0) and (
                    df_word_b3[0][1][2:8] == "111011" or df_word_b3[0][1][9:15] == "111011" or df_word_b3[0][1][
                                                                                               16:22] == "111011" or
                    df_word_b3[0][1][23:29] == "111011" or df_word_b3[0][1][30:36] == "111011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 111011 000000 000000 000000 000000"])
            elif (word[0] == "第") and (len(df.loc[df["word"] == "011" + word[-2:-1]].index) != 0) and (
                    df_word_b4[0][1][2:8] == "111011" or df_word_b4[0][1][9:15] == "111011" or df_word_b4[0][1][
                                                                                               16:22] == "111011" or
                    df_word_b4[0][1][23:29] == "111011" or df_word_b4[0][1][30:36] == "111011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 111011 000000 000000 000000 000000"])
            elif (word[0] == "第") and (len(df.loc[df["word"] == "100" + word[-2:-1]].index) != 0) and (
                    df_word_b5[0][1][2:8] == "111011" or df_word_b5[0][1][9:15] == "111011" or df_word_b5[0][1][
                                                                                               16:22] == "111011" or
                    df_word_b5[0][1][23:29] == "111011" or df_word_b5[0][1][30:36] == "111011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 111011 000000 000000 000000 000000"])
                #print("12", word)
            elif (len(word) == 2 and word[0] == "首") and (len(df.loc[df["word"] == "000" + word[-1]].index) != 0) and (df_word_a[0][1][2:8] == "000011" or df_word_a[0][1][9:15] == "000011" or df_word_a[0][1][16:22] == "000011" or df_word_a[0][1][23:29] == "000011" or df_word_a[0][1][30:36] == "000011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 010000 000000 000000 000000 000000"])
            elif (len(word) == 2 and word[0] == "首") and (
                        len(df.loc[df["word"] == "001" + word[-1]].index) != 0) and (
                             df_word_a2[0][1][2:8] == "000011" or df_word_a2[0][1][9:15] == "000011" or df_word_a2[0][1][
                                                                                                  16:22] == "000011" or
                             df_word_a2[0][1][23:29] == "000011" or df_word_a2[0][1][30:36] == "000011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 010000 000000 000000 000000 000000"])
            elif (len(word) == 2 and word[0] == "首") and (
                    len(df.loc[df["word"] == "010" + word[-1]].index) != 0) and (
                         df_word_a3[0][1][2:8] == "000011" or df_word_a3[0][1][9:15] == "000011" or df_word_a3[0][
                                                                                                        1][
                                                                                                    16:22] == "000011" or
                         df_word_a3[0][1][23:29] == "000011" or df_word_a3[0][1][30:36] == "000011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 010000 000000 000000 000000 000000"])
            elif (len(word) == 2 and word[0] == "首") and (
                    len(df.loc[df["word"] == "011" + word[-1]].index) != 0) and (
                         df_word_a4[0][1][2:8] == "000011" or df_word_a4[0][1][9:15] == "000011" or df_word_a4[0][
                                                                                                        1][
                                                                                                    16:22] == "000011" or
                         df_word_a4[0][1][23:29] == "000011" or df_word_a4[0][1][30:36] == "000011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 010000 000000 000000 000000 000000"])
            elif (len(word) == 2 and word[0] == "首") and (
                    len(df.loc[df["word"] == "100" + word[-1]].index) != 0) and (
                         df_word_a5[0][1][2:8] == "000011" or df_word_a5[0][1][9:15] == "000011" or df_word_a5[0][
                                                                                                        1][
                                                                                                    16:22] == "000011" or
                         df_word_a5[0][1][23:29] == "000011" or df_word_a5[0][1][30:36] == "000011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 010000 000000 000000 000000 000000"])
            elif (len(word) == 2 and word[0] == "首") and (
                        len(df.loc[df["word"] == "000" + word[-2:-1]].index) != 0) and (
                             df_word_b[0][1][2:8] == "000011" or df_word_b[0][1][9:15] == "000011" or df_word_b[0][
                                                                                                          1][
                                                                                                      16:22] == "000011" or
                             df_word_b[0][1][23:29] == "000011" or df_word_b[0][1][30:36] == "000011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 010000 000000 000000 000000 000000"])
            elif (len(word) == 2 and word[0] == "首") and (
                    len(df.loc[df["word"] == "001" + word[-2:-1]].index) != 0) and (
                    df_word_b2[0][1][2:8] == "000011" or df_word_b2[0][1][9:15] == "000011" or df_word_b2[0][1][
                                                                                               16:22] == "000011" or
                    df_word_b2[0][1][23:29] == "000011" or df_word_b2[0][1][30:36] == "000011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 010000 000000 000000 000000 000000"])
            elif (len(word) == 2 and word[0] == "首") and (
                    len(df.loc[df["word"] == "010" + word[-2:-1]].index) != 0) and (
                    df_word_b3[0][1][2:8] == "000011" or df_word_b3[0][1][9:15] == "000011" or df_word_b3[0][
                                                                                                   1][
                                                                                               16:22] == "000011" or
                    df_word_b3[0][1][23:29] == "000011" or df_word_b3[0][1][30:36] == "000011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 010000 000000 000000 000000 000000"])
            elif (len(word) == 2 and word[0] == "首") and (
                    len(df.loc[df["word"] == "011" + word[-2:-1]].index) != 0) and (
                    df_word_b4[0][1][2:8] == "000011" or df_word_b4[0][1][9:15] == "000011" or df_word_b4[0][
                                                                                                   1][
                                                                                               16:22] == "000011" or
                    df_word_b4[0][1][23:29] == "000011" or df_word_b4[0][1][30:36] == "000011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 010000 000000 000000 000000 000000"])
            elif (len(word) == 2 and word[0] == "首") and (
                    len(df.loc[df["word"] == "100" + word[-2:-1]].index) != 0) and (
                    df_word_b5[0][1][2:8] == "000011" or df_word_b5[0][1][9:15] == "000011" or df_word_b5[0][
                                                                                                   1][
                                                                                               16:22] == "000011" or
                    df_word_b5[0][1][23:29] == "000011" or df_word_b5[0][1][30:36] == "000011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 010000 000000 000000 000000 000000"])
                #print("13", word)
            elif (len(word) == 2 and word[0] == "首") and (len(df.loc[df["word"] == "000" + word[-1]].index) != 0) and (df_word_a[0][1][2:8] == "110000" or df_word_a[0][1][9:15] == "110000" or df_word_a[0][1][16:22] == "110000" or df_word_a[0][1][23:29] == "110000" or df_word_a[0][1][30:36] == "110000"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 110000 000000 000000 000000 000000"])
            elif (len(word) == 2 and word[0] == "首") and (
                        len(df.loc[df["word"] == "001" + word[-1]].index) != 0) and (
                             df_word_a2[0][1][2:8] == "110000" or df_word_a2[0][1][9:15] == "110000" or df_word_a2[0][1][
                                                                                                  16:22] == "110000" or
                             df_word_a2[0][1][23:29] == "110000" or df_word_a2[0][1][30:36] == "110000"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 110000 000000 000000 000000 000000"])
            elif (len(word) == 2 and word[0] == "首") and (
                        len(df.loc[df["word"] == "010" + word[-1]].index) != 0) and (
                             df_word_a3[0][1][2:8] == "110000" or df_word_a3[0][1][9:15] == "110000" or df_word_a3[0][1][
                                                                                                  16:22] == "110000" or
                             df_word_a3[0][1][23:29] == "110000" or df_word_a3[0][1][30:36] == "110000"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 110000 000000 000000 000000 000000"])
            elif (len(word) == 2 and word[0] == "首") and (
                        len(df.loc[df["word"] == "011" + word[-1]].index) != 0) and (
                             df_word_a4[0][1][2:8] == "110000" or df_word_a4[0][1][9:15] == "110000" or df_word_a4[0][1][
                                                                                                  16:22] == "110000" or
                             df_word_a4[0][1][23:29] == "110000" or df_word_a4[0][1][30:36] == "110000"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 110000 000000 000000 000000 000000"])
            elif (len(word) == 2 and word[0] == "首") and (
                    len(df.loc[df["word"] == "100" + word[-1]].index) != 0) and (
                         df_word_a5[0][1][2:8] == "110000" or df_word_a5[0][1][9:15] == "110000" or df_word_a5[0][
                                                                                                        1][
                                                                                                    16:22] == "110000" or
                         df_word_a5[0][1][23:29] == "110000" or df_word_a5[0][1][30:36] == "110000"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 110000 000000 000000 000000 000000"])
            elif (len(word) == 2 and word[0] == "首") and (
                    len(df.loc[df["word"] == "000" + word[-2:-1]].index) != 0) and (
                         df_word_b[0][1][2:8] == "110000" or df_word_b[0][1][9:15] == "110000" or df_word_b[0][1][
                                                                                                  16:22] == "110000" or
                         df_word_b[0][1][23:29] == "110000" or df_word_b[0][1][30:36] == "110000"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 110000 000000 000000 000000 000000"])
            elif (len(word) == 2 and word[0] == "首") and (
                    len(df.loc[df["word"] == "001" + word[-2:-1]].index) != 0) and (
                    df_word_b2[0][1][2:8] == "110000" or df_word_b2[0][1][9:15] == "110000" or df_word_b2[0][1][
                                                                                               16:22] == "110000" or
                    df_word_b2[0][1][23:29] == "110000" or df_word_b2[0][1][30:36] == "110000"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 110000 000000 000000 000000 000000"])
            elif (len(word) == 2 and word[0] == "首") and (
                    len(df.loc[df["word"] == "010" + word[-2:-1]].index) != 0) and (
                    df_word_b3[0][1][2:8] == "110000" or df_word_b3[0][1][9:15] == "110000" or df_word_b3[0][1][
                                                                                               16:22] == "110000" or
                    df_word_b3[0][1][23:29] == "110000" or df_word_b3[0][1][30:36] == "110000"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 110000 000000 000000 000000 000000"])
            elif (len(word) == 2 and word[0] == "首") and (
                    len(df.loc[df["word"] == "011" + word[-2:-1]].index) != 0) and (
                    df_word_b4[0][1][2:8] == "110000" or df_word_b4[0][1][9:15] == "110000" or df_word_b4[0][1][
                                                                                               16:22] == "110000" or
                    df_word_b4[0][1][23:29] == "110000" or df_word_b4[0][1][30:36] == "110000"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 110000 000000 000000 000000 000000"])
            elif (len(word) == 2 and word[0] == "首") and (
                    len(df.loc[df["word"] == "100" + word[-2:-1]].index) != 0) and (
                    df_word_b5[0][1][2:8] == "110000" or df_word_b5[0][1][9:15] == "110000" or df_word_b5[0][
                                                                                                   1][
                                                                                               16:22] == "110000" or
                    df_word_b5[0][1][23:29] == "110000" or df_word_b5[0][1][30:36] == "110000"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 110000 000000 000000 000000 000000"])
                #print("14", word)
            elif (len(word) == 2 and word[0] == "首") and (len(df.loc[df["word"] == "000" + word[-1]].index) != 0) and (df_word_a[0][1][2:8] == "111011" or df_word_a[0][1][9:15] == "111011" or df_word_a[0][1][16:22] == "111011" or df_word_a[0][1][23:29] == "111011" or df_word_a[0][1][30:36] == "111011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 111011 000000 000000 000000 000000"])
            elif (len(word) == 2 and word[0] == "首") and (
                        len(df.loc[df["word"] == "001" + word[-1]].index) != 0) and (
                             df_word_a2[0][1][2:8] == "111011" or df_word_a2[0][1][9:15] == "111011" or df_word_a2[0][1][
                                                                                                  16:22] == "111011" or
                             df_word_a2[0][1][23:29] == "111011" or df_word_a2[0][1][30:36] == "111011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 111011 000000 000000 000000 000000"])
            elif (len(word) == 2 and word[0] == "首") and (
                        len(df.loc[df["word"] == "010" + word[-1]].index) != 0) and (
                             df_word_a3[0][1][2:8] == "111011" or df_word_a3[0][1][9:15] == "111011" or df_word_a3[0][1][
                                                                                                  16:22] == "111011" or
                             df_word_a3[0][1][23:29] == "111011" or df_word_a3[0][1][30:36] == "111011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 111011 000000 000000 000000 000000"])
            elif (len(word) == 2 and word[0] == "首") and (
                        len(df.loc[df["word"] == "011" + word[-1]].index) != 0) and (
                             df_word_a4[0][1][2:8] == "111011" or df_word_a4[0][1][9:15] == "111011" or df_word_a4[0][1][
                                                                                                  16:22] == "111011" or
                             df_word_a4[0][1][23:29] == "111011" or df_word_a4[0][1][30:36] == "111011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 111011 000000 000000 000000 000000"])
            elif (len(word) == 2 and word[0] == "首") and (
                        len(df.loc[df["word"] == "100" + word[-1]].index) != 0) and (
                             df_word_a5[0][1][2:8] == "111011" or df_word_a5[0][1][9:15] == "111011" or df_word_a5[0][1][
                                                                                                  16:22] == "111011" or
                             df_word_a5[0][1][23:29] == "111011" or df_word_a5[0][1][30:36] == "111011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 111011 000000 000000 000000 000000"])
            elif (len(word) == 2 and word[0] == "首") and (
                        len(df.loc[df["word"] == "000" + word[-2:-1]].index) != 0) and (
                             df_word_b[0][1][2:8] == "111011" or df_word_b[0][1][9:15] == "111011" or df_word_b[0][
                                                                                                          1][
                                                                                                      16:22] == "111011" or
                             df_word_b[0][1][23:29] == "111011" or df_word_b[0][1][30:36] == "111011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 111011 000000 000000 000000 000000"])
            elif (len(word) == 2 and word[0] == "首") and (
                    len(df.loc[df["word"] == "001" + word[-2:-1]].index) != 0) and (
                    df_word_b2[0][1][2:8] == "111011" or df_word_b2[0][1][9:15] == "111011" or df_word_b2[0][1][
                                                                                               16:22] == "111011" or
                    df_word_b2[0][1][23:29] == "111011" or df_word_b2[0][1][30:36] == "111011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 111011 000000 000000 000000 000000"])
            elif (len(word) == 2 and word[0] == "首") and (
                    len(df.loc[df["word"] == "010" + word[-2:-1]].index) != 0) and (
                    df_word_b3[0][1][2:8] == "111011" or df_word_b3[0][1][9:15] == "111011" or df_word_b3[0][1][
                                                                                               16:22] == "111011" or
                    df_word_b3[0][1][23:29] == "111011" or df_word_b3[0][1][30:36] == "111011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 111011 000000 000000 000000 000000"])
            elif (len(word) == 2 and word[0] == "首") and (
                    len(df.loc[df["word"] == "011" + word[-2:-1]].index) != 0) and (
                    df_word_b4[0][1][2:8] == "111011" or df_word_b4[0][1][9:15] == "111011" or df_word_b4[0][1][
                                                                                               16:22] == "111011" or
                    df_word_b4[0][1][23:29] == "111011" or df_word_b4[0][1][30:36] == "111011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 111011 000000 000000 000000 000000"])
            elif (len(word) == 2 and word[0] == "首") and (
                    len(df.loc[df["word"] == "100" + word[-2:-1]].index) != 0) and (
                    df_word_b5[0][1][2:8] == "111011" or df_word_b5[0][1][9:15] == "111011" or df_word_b5[0][1][
                                                                                               16:22] == "111011" or
                    df_word_b5[0][1][23:29] == "111011" or df_word_b5[0][1][30:36] == "111011"):
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, "1 111011 000000 000000 000000 000000"])
                #print("15", word)
            elif word in YP_words:
                if word in list1:
                    list1.remove(word)
                word = "000" + word
                mark_dict.append([word, mark_yp])
                #print("16", word)
                #print("[word, mark_yp]", word, mark_yp)
    except Exception:
        pass

    #print("mark_dict_t0", mark_dict)

    # 查找未标记词，从结巴找词性，追加到database_nw和database_nmw
    mark_flag = ""
    mark_mood = ""
    flag_word = ""
    flag = 0

    #print("mark_dict_t1", mark_dict)

    try:
        for word in list1:
            if (len(df.loc[df["word"] == "000" + word].index) == 0) and ([word, "NotMark"] not in mark_dict) and (word not in chinese_names) and (word not in num_list) and (word not in dot_dict):
                flag_word = word

        for j in cutwords_flag:
            if flag_word == j[0]:
                if j[1] == "Ag":
                    mark_flag = "1 000101 000000 000000 000000 000000"
                elif j[1] == "a":
                    mark_flag = "1 000101 000000 000000 000000 000000"
                elif j[1] == "ad":
                    mark_flag = "1 000110 000000 000000 000000 000000"
                elif j[1] == "an":
                    mark_flag = "1 000111 000000 000000 000000 000000"
                elif j[1] == "c":
                    mark_flag = "1 010101 000000 000000 000000 000000"
                elif j[1] == "dg":
                    mark_flag = "1 000110 000000 000000 000000 000000"
                elif j[1] == "d":
                    mark_flag = "1 000110 000000 000000 000000 000000"
                elif j[1] == "e":
                    mark_flag = "1 001110 000000 000000 000000 000000"
                elif j[1] == "f":
                    mark_flag = "1 110000 000000 000000 000000 000000"
                elif j[1] == "m":
                    mark_flag = "1 000010 000000 000000 000000 000000"
                elif j[1] == "Ng":
                    mark_flag = "1 000111 000000 000000 000000 000000"
                elif j[1] == "n":
                    mark_flag = "1 000111 000000 000000 000000 000000"
                elif j[1] == "nr":
                    mark_flag = "1 010111 000000 000000 000000 000000 010111 111000 000000 000000 000000"
                elif j[1] == "ns":
                    mark_flag = "1 010111 000000 000000 000000 000000 010000 000000 000000 000000 000000"
                elif j[1] == "nt":
                    mark_flag = "1 010111 000000 000000 000000 000000 010000 000000 000000 000000 000000"
                elif j[1] == "nz":
                    mark_flag = "1 010111 000000 000000 000000 000000"
                elif j[1] == "o":
                    mark_flag = "1 011000 000000 000000 000000 000000"
                elif j[1] == "p":
                    mark_flag = "1 110011 000000 000000 000000 000000"
                elif j[1] == "q":
                    mark_flag = "1 000011 000000 000000 000000 000000"
                elif j[1] == "r":
                    mark_flag = "1 000100 000000 000000 000000 000000"
                elif j[1] == "s":
                    mark_flag = "1 110000 000000 000000 000000 000000"
                elif j[1] == "tg":
                    mark_flag = "1 111011 000000 000000 000000 000000"
                elif j[1] == "t":
                    mark_flag = "1 111011 000000 000000 000000 000000"
                elif j[1] == "u":
                    mark_flag = "1 110101 000000 000000 000000 000000"
                elif j[1] == "vg":
                    mark_flag = "1 000001 000000 000000 000000 000000"
                elif j[1] == "v":
                    mark_flag = "1 000001 000000 000000 000000 000000"
                elif j[1] == "vd":
                    mark_flag = "1 000011 000000 000000 000000 000000"
                elif j[1] == "vn":
                    mark_flag = "1 000111 000000 000000 000000 000000"
                elif j[1] == "x":
                    mark_flag = "1 000000 000000 000000 000000 000000"
                elif j[1] == "y":
                    mark_flag = "1 001110 000000 000000 000000 000000"
                elif j[1] == "z":
                    mark_flag = "1 000011 000000 000000 000000 000000"
                else:
                    mark_flag = "Notmark"
        flag_word = "000" + flag_word
        mark_dict.append([flag_word, mark_flag])
    except Exception:
        pass

    #print("mark_dict_t2", mark_dict)

    if flag_word != "Notmark" and flag_word != "000":
        with open("./database_marks_nw.csv", "w", newline='', encoding='UTF-8') as d:
            content = csv.writer(d)
            content.writerow([flag_word, mark_flag])
    elif flag_word == "Notmark":
        with open("./database_marks_nmw.csv", "w", newline='', encoding='UTF-8') as d:
            content = csv.writer(d)
            content.writerow([flag_word, mark_flag])

    #print("mark_dict_t3", mark_dict)

    # 19, 重复词标注"2","3"开头作为区别
    count_41 = 0
    count_42 = 0
    count_43 = 0
    count_44 = 0
    count_45 = 0

    for i in mark_dict:
        index_mark = mark_dict.index(i)
        i_str = str(i[0]) + " " + str(i[1])
        mark_dict_0.append(i_str)

    # print("mark_dict_0", mark_dict_0)

    b = Counter(mark_dict_0)
    # print("b", b)

    for key, value in b.items():
        if value > 1:
            duplicated_word.append(key)

    for i in duplicated_word:
        target = i
        for index, element in enumerate(mark_dict_0):
            if element == target:
                targetIndex.append([i, index])

    for i in duplicated_word:
        for j in targetIndex:
            if i == j[0]:
                if len(i) == 41:
                    count_41 += 1
                    first = i[0:4] + ""
                    middle = str(count_41) + ""
                    last = i[6::]
                    mark_dict[j[1]] = [first, (middle + last)]
                elif len(i) == 42:
                    count_42 += 1
                    first = i[0:5] + ""
                    middle = str(count_42) + ""
                    last = i[7::]
                    mark_dict[j[1]] = [first, (middle + last)]
                elif len(i) == 43:
                    count_43 += 1
                    first = i[0:6] + ""
                    middle = str(count_43) + ""
                    last = i[8::]
                    mark_dict[j[1]] = [first, (middle + last)]
                elif len(i) == 44:
                    count_44 += 1
                    first = i[0:7] + ""
                    middle = str(count_44) + ""
                    last = i[9::]
                    mark_dict[j[1]] = [first, (middle + last)]
                elif len(i) == 45:
                    count_45 += 1
                    first = i[0:8] + ""
                    middle = str(count_45) + ""
                    last = i[10::]
                    mark_dict[j[1]] = [first, (middle + last)]

    #print("mark_dict2", mark_dict)

    # 20. 有相同词语的，按原顺序还原mark_dict
    mark_dict_pro = []
    mark_dict_pre_kick = []
    mark_dict_pre_left = copy.deepcopy(mark_dict_pre)
    duplicate = []
    duplicate_word = []
    f = []
    dict_1 = {}
    dict_2 = {}
    d_2 = []
    f_2 = []
    paste = []
    d_words = []
    index_paste = 0
    index_j = 0
    flag_duplicated = 0
    flag_duplicated_pro = 0
    new_mark = ""
    new_word = []

    mark_dict_1 = copy.deepcopy(mark_dict)
    # print("mark_dict_pre", mark_dict_pre)

    try:
        for i in mark_dict:
            if int(i[1][0]) > 1:
                flag_duplicated = 1
    except Exception:
        pass

    try:
        if flag_duplicated > 0:
            for i in mark_dict_pre:
                for j in mark_dict_pre:
                    if i[0] == j[0] and i[1] != j[1]:
                        if i in mark_dict_pre_left:
                            mark_dict_pre_left.remove(i)
                        if i not in duplicate:
                            duplicate.append(i)

            # print("mark_pre_left", mark_dict_pre_left)
            # print("d", duplicate)

            for i in duplicate:
                duplicated_word.append(i[0])

            for i in mark_dict:
                for j in duplicate:
                    if i[0][3::] == j[0]:
                        if i in mark_dict_1:
                            mark_dict_1.remove(i)

            # print("mark_dict_1", mark_dict_1)

            # for i in mark_dict_pre:
            for i in mark_dict_pre_left:
                for j in mark_dict_1:
                    if (i[0] not in duplicate_word) and (i[0] == j[0][3::]) and (j[1][0] == "1") and (
                            j not in mark_dict_pro):
                        mark_dict_pro.insert(i[1], j)
                        for h in mark_dict_1:
                            if h[0][3::] == j[0][3::] and h[1] != j[1]:
                                mark_dict_1.remove(h)
                                paste.append(h)

            # print("mark_dict3", mark_dict_pro)

            for i in mark_dict:
                if i[1][0] != "1":
                    f.append(i)

            f_1 = copy.deepcopy(f)

            for j in f:
                if j[1][0] == "2":
                    index_j = index_j + f.index(j)
                    new_mark = "1" + " " + j[1][2:36]
                    new_word = [j[0], new_mark]
                    f_1.insert(index_j, new_word)
                    index_j += 1

            # print("f_1", f_1)

            for i in duplicate:
                dict_1.setdefault(i[0], []).append(i[1])

            # print("dict_1", dict_1)

            for i in f_1:
                dict_2.setdefault(i[0], []).append(i[1])

            # print("dict_2", dict_2)

            for k, v in dict_1.items():
                d_2.append([k, v])

            # print("d_2", d_2)

            for k, v in dict_2.items():
                f_2.append([k, v])

            # print("f_2", f_2)

            new_i_1 = []
            new_i_2 = []
            new_i_3 = []
            new_i_4 = []
            len_layer = 0
            d_3 = []
            d_4 = []
            for i in d_2:
                if len(i) == 2:
                    len_layer = 2
                    new_i_1 = [i[0], i[1][0]]
                    new_i_2 = [i[0], i[1][1]]
                    d_3.append(new_i_1)
                    d_3.append(new_i_2)
                elif len(i) == 3:
                    len_layer = 3
                    new_i_1 = [i[0], i[1][0]]
                    new_i_2 = [i[0], i[1][1]]
                    new_i_3 = [i[0], i[1][2]]
                    d_3.append(new_i_1)
                    d_3.append(new_i_2)
                    d_3.append(new_i_3)
                elif len(i) == 4:
                    len_layer = 4
                    new_i_1 = [i[0], i[1][0]]
                    new_i_2 = [i[0], i[1][1]]
                    new_i_3 = [i[0], i[1][2]]
                    new_i_4 = [i[0], i[1][3]]
                    d_3.append(new_i_1)
                    d_3.append(new_i_2)
                    d_3.append(new_i_3)
                    d_3.append(new_i_4)

            d_3.sort(key=operator.itemgetter(1))
            #print("d_3", d_3)

            try:
                for i in d_3:
                    # print("i", i)
                    for j in f_2:
                        # print("j", j)
                        if i[0] == j[0][3::]:
                            mark_dict_pro.insert(i[1], [j[0], j[1][0]])


            except Exception:
                pass

            mark_dict_pro_1 = copy.deepcopy(mark_dict_pro)

            for i in mark_dict_pro:
                for h in paste:
                    if i[0][3::] == h[0][3::] and h[1][0] == "1":
                        index_paste = mark_dict_pro.index(i)
                        mark_dict_pro_1.insert(index_paste + 1, h)

            mark_dict = copy.deepcopy(mark_dict_pro_1)
            flag_duplicated_pro += 1

    except Exception:
        pass

    #print("mark_dict3", mark_dict)

    # 21. 无相同词语的，按原顺序还原mark_dict
    index_sen = 0
    mark_dict_correct_sequence = []

    if flag_duplicated_pro == 0:
        for j in sen:
            for i in mark_dict:
                if i[0][3::] == j:
                    index_sen = sen.index(j)
                    mark_dict_correct_sequence.insert(index_sen, i)

        mark_dict = copy.deepcopy(mark_dict_correct_sequence)

    #print("mark_dict4", mark_dict)

    # 22. 同一个词语，标注不同含义和词性的，顺序调整到一起
    index_same = 0
    mark_dict_same_connect = []

    try:
        for i in mark_dict:
            for j in mark_dict:
                if i[0][3::] == j[0][3::] and i[0][0:3] != j[0][0:3] and i[1][0] == j[1][0]:
                    index_same = mark_dict.index(i)
                    mark_dict.remove(j)
                    mark_dict.insert(index_same, j)
    except Exception:
        pass

    #print("mark_dict5", mark_dict)

    # 23. 去重
    mark_dict_1 = []

    try:
        for i in mark_dict:
            if i not in mark_dict_1:
                mark_dict_1.append(i)
    except Exception:
        pass

    mark_dict = copy.deepcopy(mark_dict)

    #print("mark_dict6", mark_dict)

    #24.调整编码
    list_mixed = []
    list_mixed_1 = []
    flag = 0
    index_i = 0

    #print("mark_dict7", mark_dict)

    for i in mark_dict:
        for j in database_sen:
            if i == j[0]:
                k = int(j[1])
                flag = k%36
                if i[1][flag] == "1" and flag != 0:
                    i[1] = i[1][0:flag] + "0" + i[1][flag + 1::]
                elif i[1][flag] == "0" and flag != 0:
                    i[1] = i[1][0:flag] + "1" + i[1][flag + 1::]

    #print("mark_dict8", mark_dict)

    with open("./mixing_record.csv", "r", newline='', encoding='GBK') as d:
        content = csv.reader(d)
        for row in content:
            list_mixed.append(row)

    list_mixed_1 = copy.deepcopy(list_mixed)

    for i in list_mixed_1:
        for j in database_sen:
            if int(i[0]) == j[1]:
                b = int(i[1])
                # print("i", i)
                for k in mark_dict:
                    # print("k, j[0]", k, j[0])
                    if k[0] == j[0][0] and k[1][b] == "1":
                        # print("ok")
                        k[1] = k[1][0:b] + "0" + k[1][b+1::]
                        list_mixed.remove(i)
                    elif k[0] == j[0][0] and k[1][b] == "0":
                        k[1] = k[1][0:b] + "1" + k[1][b + 1::]
                        list_mixed.remove(i)

    print("mark_dict9", mark_dict)

def Mark_number():
    global sen
    global num_list
    index_word = 0


    for i in sen:
        if_number = Is_number(i)
        if if_number == 0 or if_number == 1:
            num_list.append(i)

def Component_priority():
    global mark_dict
    global dot_dict
    global mark_dict_backup
    multimean_dict = []
    choose_dict = []
    duplicate_dict = []
    remove_dict = []
    rest_dict = []
    index_multi = 0
    index_mark = 0
    index_d = 0

    #print("mark_c1", mark_dict)
    #1.处理多义词:为相同或不同词性的
    # (1) 把多义词摘出，存入字典
    try:
        for i in mark_dict:
            #print("i[0][3::]", i[0][3::])
            for j in mark_dict:
                #print("j[0][3::]", j[0][3::])
                if (i[0][3::] == j[0][3::]) and (i[1][2:36] != j[1][2:36]) and (i not in multimean_dict) and (j not in multimean_dict):
                    #print("i", i)
                    multimean_dict.append(i)
                    multimean_dict.append(j)
                elif (i[0][3::] == j[0][3::]) and (i[1][2:36] != j[1][2:36]) and (i in multimean_dict) and (j not in multimean_dict):
                    #print("j", j)
                    multimean_dict.append(j)
    except Exception:
        pass

    #print("M", multimean_dict)
    #print("remove_dict", remove_dict)
    #print("choose_dict", choose_dict)

    # (2) 优先词性词
    try:
        for i in multimean_dict:
            index_multi = multimean_dict.index(i)
            index_mark = mark_dict.index(i)
            if (i[0][3::] == "左右") and (i[1][2:8] == "000001"):
                if (mark_dict[index_mark-1] not in multimean_dict) and (mark_dict[index_mark-1][0][3::] not in ["的","之"]) and (mark_dict[index_mark-1][1][2:8] in ["000100", "000110", "111110", "000111"] or mark_dict[index_mark-1][1][9:15] in ["000100", "000110", "111110", "000111"] or mark_dict[index_mark-1][1][16:22] in ["000100", "000110", "111110", "000111"] or mark_dict[index_mark-1][1][23:29] in ["000100", "000110", "111110", "000111"] or mark_dict[index_mark-1][1][30:36] in ["000100", "000110", "111110", "000111"]):
                    if (mark_dict[index_mark+1] not in multimean_dict) and (mark_dict[index_mark+1][1][2:8] in ["000100", "000110"] or mark_dict[index_mark+1][1][9:15] in ["000100", "000110"] or mark_dict[index_mark+1][1][16:22] in ["000100", "000110"] or mark_dict[index_mark+1][1][23:29] in ["000100", "000110"] or mark_dict[index_mark+1][1][30:36] in ["000100", "000110"]) and (i not in remove_dict):
                        choose_dict.append(multimean_dict[index_multi])
                        for j in multimean_dict:
                            if i[0][3::] == j[0][3::] and i!=j:
                                remove_dict.append(j)
                    elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] not in multimean_dict) and (mark_dict[index_mark+2][1][2:8] in ["000100", "000110"] or mark_dict[index_mark+2][1][9:15] in ["000100", "000110"] or mark_dict[index_mark+2][1][16:22] in ["000100", "000110"] or mark_dict[index_mark+2][1][23:29] in ["000100", "000110"] or mark_dict[index_mark+2][1][30:36] in ["000100", "000110"])  and (i not in remove_dict):
                        choose_dict.append(multimean_dict[index_multi])
                        for j in multimean_dict:
                            if i[0][3::] == j[0][3::] and i!=j:
                                remove_dict.append(j)
                    elif (mark_dict[index_mark + 1] in multimean_dict and mark_dict[
                        index_mark + 2] in multimean_dict and mark_dict[index_mark + 3] not in multimean_dict) and (
                                     mark_dict[index_mark + 3][1][2:8] in ["000100", "000110"] or
                                     mark_dict[index_mark + 3][1][9:15] in ["000100", "000110"] or
                                     mark_dict[index_mark + 3][1][16:22] in ["000100", "000110"] or
                                     mark_dict[index_mark + 3][1][23:29] in ["000100", "000110"] or
                                     mark_dict[index_mark + 3][1][30:36] in ["000100", "000110"])  and (i not in remove_dict):
                        choose_dict.append(multimean_dict[index_multi])
                        for j in multimean_dict:
                            if i[0][3::] == j[0][3::] and i!=j:
                                remove_dict.append(j)
                    elif (mark_dict[index_mark + 1] in multimean_dict and mark_dict[
                        index_mark + 2] in multimean_dict and mark_dict[index_mark + 3] in multimean_dict and mark_dict[index_mark + 4] not in multimean_dict) and (
                                     mark_dict[index_mark + 4][1][2:8] in ["000100", "000110"] or
                                     mark_dict[index_mark + 4][1][9:15] in ["000100", "000110"] or
                                     mark_dict[index_mark + 4][1][16:22] in ["000100", "000110"] or
                                     mark_dict[index_mark + 4][1][23:29] in ["000100", "000110"] or
                                     mark_dict[index_mark + 4][1][30:36] in ["000100", "000110"])  and (i not in remove_dict):
                        choose_dict.append(multimean_dict[index_multi])
                        for j in multimean_dict:
                            if i[0][3::] == j[0][3::] and i!=j:
                                remove_dict.append(j)
                    elif (mark_dict[index_mark + 1] in multimean_dict and mark_dict[
                        index_mark + 2] in multimean_dict and mark_dict[index_mark + 3] in multimean_dict and mark_dict[index_mark + 4] in multimean_dict and mark_dict[index_mark + 5] not in multimean_dict) and (
                                     mark_dict[index_mark + 5][1][2:8] in ["000100", "000110"] or
                                     mark_dict[index_mark + 5][1][9:15] in ["000100", "000110"] or
                                     mark_dict[index_mark + 5][1][16:22] in ["000100", "000110"] or
                                     mark_dict[index_mark + 5][1][23:29] in ["000100", "000110"] or
                                     mark_dict[index_mark + 5][1][30:36] in ["000100", "000110"])  and (i not in remove_dict):
                        choose_dict.append(multimean_dict[index_multi])#前面有助词或名代，后面为名代，则取动词词性
                        for j in multimean_dict:
                            if i[0][3::] == j[0][3::] and i!=j:
                                remove_dict.append(j)
                #print("0", choose_dict, remove_dict)
            elif (i[0][3::] == "左右") and (i[1][2:8] == "000110" or i[1][9:15] == "000110" or i[1][16:22] == "000110" or i[1][23:29] == "000110" or i[1][30:36] == "000110"):
                if (mark_dict[index_mark-1] not in multimean_dict) and (mark_dict[index_mark-1][1][2:8] in ["110000", "111011", "010111"] or mark_dict[index_mark-1][1][9:15] in ["110000", "111011", "010111"] or mark_dict[index_mark-1][1][16:22] in ["110000", "111011", "010111"] or mark_dict[index_mark-1][1][23:29] in ["110000", "111011", "010111"] or mark_dict[index_mark-1][1][30:36] in ["110000", "111011", "010111"])  and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark-1] in multimean_dict and mark_dict[index_mark-2] not in multimean_dict) and (mark_dict[index_mark-2][1][2:8] in ["110000", "111011", "010111"] or mark_dict[index_mark-2][1][9:15] in ["110000", "111011", "010111"] or mark_dict[index_mark-2][1][16:22] in ["110000", "111011", "010111"] or mark_dict[index_mark-2][1][23:29] in ["110000", "111011", "010111"] or mark_dict[index_mark-2][1][30:36] in ["110000", "111011", "010111"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark-1] in multimean_dict and mark_dict[index_mark-2] in multimean_dict and mark_dict[index_mark-3] not in multimean_dict) and (mark_dict[index_mark-3][1][2:8] in ["110000", "111011", "010111"] or mark_dict[index_mark-3][1][9:15] in ["110000", "111011", "010111"] or mark_dict[index_mark-3][1][16:22] in ["110000", "111011", "010111"] or mark_dict[index_mark-3][1][23:29] in ["110000", "111011", "010111"] or mark_dict[index_mark-3][1][30:36] in ["110000", "111011", "010111"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark-1] in multimean_dict and mark_dict[index_mark-2] in multimean_dict and mark_dict[index_mark-3] in multimean_dict and mark_dict[index_mark-4] not in multimean_dict) and (mark_dict[index_mark-4][1][2:8] in ["110000", "111011", "010111"] or mark_dict[index_mark-4][1][9:15] in ["110000", "111011", "010111"] or mark_dict[index_mark-4][1][16:22] in ["110000", "111011", "010111"] or mark_dict[index_mark-4][1][23:29] in ["110000", "111011", "010111"] or mark_dict[index_mark-4][1][30:36] in ["110000", "111011", "010111"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])#前面有时间地点词，取副词词性
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                #print("1", choose_dict, remove_dict)
            elif (i[0][3::] == "里外") and (i[1][2:8] == "000110"):
                if (mark_dict[index_mark + 1][0][3::] == "不是" and mark_dict[index_mark + 2][0][3::] == "人") or (mark_dict[index_mark + 1][0][3::] == "不" and mark_dict[index_mark + 2][0][3::] in ["讨喜", "讨好","落好"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                #print("2", choose_dict, remove_dict)
            elif (i[0][3::] == "里外") and (i[1][2:8] == "110000"):
                if (mark_dict[index_mark + 1][1][2:8] == "000001" or mark_dict[index_mark + 1][1][9:15] == "000001" or mark_dict[index_mark + 1][1][16:22] == "000001" or mark_dict[index_mark + 1][1][23:29] == "000001" or mark_dict[index_mark + 1][1][30:36] == "000001") and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                #print("3", choose_dict, remove_dict)
            elif (i[0][3::] in ["分别", "在"]) and (i[1][2:8] == "000001"):
                rest_dict = mark_dict[index_mark+1::]
                for j in rest_dict:
                    if j[1][2:8] == "000001" or j[1][9:15] == "000001" or j[1][16:22] == "000001" or j[1][23:29] == "000001" or j[1][30:36] == "000001":
                        remove_dict.append(i) #分别/在，如果全句后面还有动词，则删除动词词性保留副词词性
                    else:
                        pass
                #print("4", choose_dict, remove_dict)
            elif i[1][2:8] == "000011" or i[1][9:15] == "000011" or i[1][16:22] == "000011" or i[1][23:29] == "000011" or i[1][30:36] == "000011":
                if (mark_dict[index_mark-1] not in multimean_dict) and (mark_dict[index_mark-1][1][2:8] == "000010" or mark_dict[index_mark-1][1][9:15] == "000010" or mark_dict[index_mark-1][1][16:22] == "000010" or mark_dict[index_mark-1][1][23:29] == "000010" or mark_dict[index_mark-1][1][30:36] == "000010") and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                    #print("test_ok_1")
                elif (mark_dict[index_mark-1] in multimean_dict and mark_dict[index_mark-2] not in multimean_dict) and (mark_dict[index_mark-2][1][2:8] == "000010" or mark_dict[index_mark-2][1][9:15] == "000010" or mark_dict[index_mark-2][1][16:22] == "000010" or mark_dict[index_mark-2][1][23:29] == "000010" or mark_dict[index_mark-2][1][30:36] == "000010"):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                    #print("test_ok_2", multimean_dict[index_multi], choose_dict, remove_dict)
                elif (mark_dict[index_mark-1] in multimean_dict and mark_dict[index_mark-2] in multimean_dict and mark_dict[index_mark-3] not in multimean_dict) and (mark_dict[index_mark-3][1][2:8] == "000010" or mark_dict[index_mark-3][1][9:15] == "000010" or mark_dict[index_mark-3][1][16:22] == "000010" or mark_dict[index_mark-3][1][23:29] == "000010" or mark_dict[index_mark-3][1][30:36] == "000010") and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                    #print("test_ok_3")
                elif (mark_dict[index_mark-1] in multimean_dict and mark_dict[index_mark-2] in multimean_dict and mark_dict[index_mark-3] in multimean_dict and mark_dict[index_mark-4] not in multimean_dict) and (mark_dict[index_mark-4][1][2:8] == "000010" or mark_dict[index_mark-4][1][9:15] == "000010" or mark_dict[index_mark-4][1][16:22] == "000010"  or mark_dict[index_mark-4][1][23:29] == "000010" or mark_dict[index_mark-4][1][30:36] == "000010") and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                    #print("test_ok_4")
                elif (mark_dict[index_mark-1] in multimean_dict and mark_dict[index_mark-2] in multimean_dict and mark_dict[index_mark-3] in multimean_dict and mark_dict[index_mark-4] in multimean_dict and mark_dict[index_mark-5] not in multimean_dict) and (mark_dict[index_mark-5][1][2:8] == "000010" or mark_dict[index_mark-5][1][9:15] == "000010" or mark_dict[index_mark-5][1][16:22] == "000010"  or mark_dict[index_mark-5][1][23:29] == "000010" or mark_dict[index_mark-5][1][30:36] == "000010") and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])#量词前面有数词
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                    #print("test_ok_5")
                elif (mark_dict[index_mark - 1][1][2:8] != "000010" and mark_dict[index_mark - 1][1][9:15] != "000010" and
                    mark_dict[index_mark - 1][1][16:22] != "000010" and mark_dict[index_mark - 1][1][23:29] != "000010" and
                    mark_dict[index_mark - 1][1][30:36] != "000010") and (i not in remove_dict):
                    remove_dict.append(multimean_dict[index_multi])
                    #print("test_ok_6")
                #print("5", choose_dict, remove_dict)
            elif i[1][2:8] == "111110" or i[1][9:15] == "111110" or i[1][16:22] == "111110" or i[1][23:29] == "111110" or i[1][30:36] == "111110":
                if (mark_dict[index_mark+1] not in multimean_dict) and (mark_dict[index_mark+1][1][2:8] in ["000001", "000101"] or mark_dict[index_mark+1][1][9:15] in ["000001", "000101"] or mark_dict[index_mark+1][1][16:22] in ["000001", "000101"]  or mark_dict[index_mark+1][1][23:29] in ["000001", "000101"]  or mark_dict[index_mark+1][1][30:36] in ["000001", "000101"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] not in multimean_dict) and (mark_dict[index_mark+2][1][2:8] in ["000001", "000101"] or mark_dict[index_mark+2][1][9:15] in ["000001", "000101"] or mark_dict[index_mark+2][1][16:22] in ["000001", "000101"]  or mark_dict[index_mark+2][1][23:29] in ["000001", "000101"]  or mark_dict[index_mark+2][1][30:36] in ["000001", "000101"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] in multimean_dict and mark_dict[index_mark+3] not in multimean_dict) and (mark_dict[index_mark+3][1][2:8] in ["000001", "000101"] or mark_dict[index_mark+3][1][9:15] in ["000001", "000101"] or mark_dict[index_mark+3][1][16:22] in ["000001", "000101"] or mark_dict[index_mark+3][1][23:29] in ["000001", "000101"] or mark_dict[index_mark+3][1][30:36] in ["000001", "000101"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] in multimean_dict and mark_dict[index_mark+3] in multimean_dict and mark_dict[index_mark+4] not in multimean_dict) and (mark_dict[index_mark+-4][1][2:8] in ["000001", "000101"] or mark_dict[index_mark+4][1][9:15] in ["000001", "000101"] or mark_dict[index_mark+4][1][16:22] in ["000001", "000101"]  or mark_dict[index_mark+4][1][23:29] in ["000001", "000101"]  or mark_dict[index_mark+4][1][30:36] in ["000001", "000101"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] in multimean_dict and mark_dict[index_mark+3] in multimean_dict and mark_dict[index_mark+4] in multimean_dict and mark_dict[index_mark+5] not in multimean_dict) and (mark_dict[index_mark+5][1][2:8] in ["000001", "000101"] or mark_dict[index_mark+5][1][9:15] in ["000001", "000101"] or mark_dict[index_mark+5][1][16:22] in ["000001", "000101"]  or mark_dict[index_mark+5][1][23:29] in ["000001", "000101"]  or mark_dict[index_mark+5][1][30:36] in ["000001", "000101"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])#情态词后面有动、形
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                #print("7", choose_dict, remove_dict)
            elif i[1][2:8] == "001110" or i[1][9:15] == "001110" or i[1][16:22] == "001110" or i[1][23:29] == "001110" or i[1][30:36] == "001110":
                if (mark_dict[index_mark+1] not in multimean_dict) and (mark_dict[index_mark+1][1][2:8] in ["000001", "000101"] or mark_dict[index_mark+1][1][9:15] in dot_dict or mark_dict[index_mark+1][1][16:22] in dot_dict or mark_dict[index_mark+1][1][23:29] in dot_dict or mark_dict[index_mark+1][1][30:36] in dot_dict) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark+1] in multimean_dict) and (mark_dict[index_mark+2][1][2:8] in dot_dict or mark_dict[index_mark+2][1][9:15] in dot_dict or mark_dict[index_mark+2][1][16:22] in dot_dict or mark_dict[index_mark+2][1][23:29] in dot_dict or mark_dict[index_mark+2][1][30:36] in dot_dict) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] in multimean_dict and mark_dict[index_mark+3] not in multimean_dict) and (mark_dict[index_mark+3][1][2:8] in dot_dict or mark_dict[index_mark+3][1][9:15] in dot_dict or mark_dict[index_mark+3][1][16:22] in dot_dict or mark_dict[index_mark+3][1][23:29] in dot_dict or mark_dict[index_mark+3][1][30:36] in dot_dict) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] in multimean_dict and mark_dict[index_mark+3] in multimean_dict and mark_dict[index_mark+4] not in multimean_dict) and (mark_dict[index_mark+-4][1][2:8] in dot_dict or mark_dict[index_mark+4][1][9:15] in dot_dict or mark_dict[index_mark+4][1][16:22] in dot_dict or mark_dict[index_mark+4][1][23:29] in dot_dict or mark_dict[index_mark+4][1][30:36] in dot_dict) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] in multimean_dict and mark_dict[index_mark+3] in multimean_dict and mark_dict[index_mark+4] in multimean_dict and mark_dict[index_mark+5] not in multimean_dict) and (mark_dict[index_mark+5][1][2:8] in dot_dict or mark_dict[index_mark+5][1][9:15] in dot_dict or mark_dict[index_mark+5][1][16:22] in dot_dict or mark_dict[index_mark+5][1][23:29] in dot_dict or mark_dict[index_mark+5][1][30:36] in dot_dict) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])#叹词后面有标点
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark+1] not in multimean_dict) and (mark_dict[index_mark+1][1][2:8] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+1][1][9:15] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+1][1][16:22] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+1][1][23:29] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+1][1][30:36] in ["000100", "000111", "110000", "111011", "010111"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] not in multimean_dict) and (mark_dict[index_mark+2][1][2:8] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+2][1][9:15] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+2][1][16:22] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+2][1][23:29] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+2][1][30:36] in ["000100", "000111", "110000", "111011", "010111"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] in multimean_dict and mark_dict[index_mark+3] not in multimean_dict) and (mark_dict[index_mark+3][1][2:8] in ["000100", "000111", "110000", "111011"] or mark_dict[index_mark+3][1][9:15] in ["000100", "000111", "110000", "111011"] or mark_dict[index_mark+3][1][16:22] in ["000100", "000111", "110000", "111011"] or mark_dict[index_mark+3][1][23:29] in ["000100", "000111", "110000", "111011"] or mark_dict[index_mark+3][1][30:36] in ["000100", "000111", "110000", "111011"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] in multimean_dict and mark_dict[index_mark+3] in multimean_dict and mark_dict[index_mark+4] not in multimean_dict) and (mark_dict[index_mark+-4][1][2:8] in ["000100", "000111", "110000", "111011"] or mark_dict[index_mark+4][1][9:15] in ["000100", "000111", "110000", "111011"] or mark_dict[index_mark+4][1][16:22] in ["000100", "000111", "110000", "111011"] or mark_dict[index_mark+4][1][23:29] in ["000100", "000111", "110000", "111011"] or mark_dict[index_mark+4][1][30:36] in ["000100", "000111", "110000", "111011"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] in multimean_dict and mark_dict[index_mark+3] in multimean_dict and mark_dict[index_mark+4] in multimean_dict and mark_dict[index_mark+5] not in multimean_dict) and (mark_dict[index_mark+5][1][2:8] in ["000100", "000111", "110000", "111011"] or mark_dict[index_mark+5][1][9:15] in ["000100", "000111", "110000", "111011"] or mark_dict[index_mark+5][1][16:22] in ["000100", "000111", "110000", "111011"] or mark_dict[index_mark+5][1][23:29] in ["000100", "000111", "110000", "111011"] or mark_dict[index_mark+5][1][30:36] in ["000100", "000111", "110000", "111011"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])#叹词后面有代、名、时、地
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                #print("8", remove_dict)
            elif i[1][2:8] == "110101" or i[1][9:15] == "110101" or i[1][16:22] == "110101" or i[1][23:29] == "110101" or i[1][30:36] == "110101":
                if (mark_dict[index_mark+1] not in multimean_dict)  and (mark_dict[index_mark+1][1][2:8] in ["000001", "000101"] or mark_dict[index_mark+1][1][9:15] in ["000001", "000101"] or mark_dict[index_mark+1][1][16:22] in ["000001", "000101"] or mark_dict[index_mark+1][1][23:29] in ["000001", "000101"] or mark_dict[index_mark+1][1][30:36] in ["000001", "000101"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] not in multimean_dict) and (mark_dict[index_mark+2][1][2:8] in ["000001", "000101"] or mark_dict[index_mark+2][1][9:15] in ["000001", "000101"] or mark_dict[index_mark+2][1][16:22] in ["000001", "000101"] or mark_dict[index_mark+2][1][23:29] in ["000001", "000101"] or mark_dict[index_mark+2][1][30:36] in ["000001", "000101"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] in multimean_dict and mark_dict[index_mark+3] not in multimean_dict) and (mark_dict[index_mark+3][1][2:8] in ["000001", "000101"] or mark_dict[index_mark+3][1][9:15] in ["000001", "000101"] or mark_dict[index_mark+3][1][16:22] in ["000001", "000101"] or mark_dict[index_mark+3][1][23:29] in ["000001", "000101"] or mark_dict[index_mark+3][1][30:36] in ["000001", "000101"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] in multimean_dict and mark_dict[index_mark+3] in multimean_dict and mark_dict[index_mark+4] not in multimean_dict) and (mark_dict[index_mark+-4][1][2:8] in ["000001", "000101"] or mark_dict[index_mark+4][1][9:15] in ["000001", "000101"] or mark_dict[index_mark+4][1][16:22] in ["000001", "000101"] or mark_dict[index_mark+4][1][23:29] in ["000001", "000101"] or mark_dict[index_mark+4][1][30:36] in ["000001", "000101"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] in multimean_dict and mark_dict[index_mark+3] in multimean_dict and mark_dict[index_mark+4] in multimean_dict and mark_dict[index_mark+5] not in multimean_dict) and (mark_dict[index_mark+5][1][2:8] in ["000001", "000101"] or mark_dict[index_mark+5][1][9:15] in ["000001", "000101"] or mark_dict[index_mark+5][1][16:22] in ["000001", "000101"] or mark_dict[index_mark+5][1][23:29] in ["000001", "000101"] or mark_dict[index_mark+5][1][30:36] in ["000001", "000101"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])#助词后面有动、形
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark-1] not in multimean_dict) and (mark_dict[index_mark-1][1][2:8] in ["000001", "000101", "000111"] or mark_dict[index_mark-1][1][9:15] in ["000001", "000101", "000111"] or mark_dict[index_mark-1][1][16:22] in ["000001", "000101", "000111"] or mark_dict[index_mark-1][1][23:29] in ["000001", "000101", "000111"] or mark_dict[index_mark-1][1][30:36] in ["000001", "000101", "000111"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark-1] in multimean_dict and mark_dict[index_mark-2] not in multimean_dict) and (mark_dict[index_mark-2][1][2:8] in ["000001", "000101", "000111"] or mark_dict[index_mark-2][1][9:15] in ["000001", "000101", "000111"] or mark_dict[index_mark-2][1][16:22] in ["000001", "000101", "000111"] or mark_dict[index_mark-2][1][23:29] in ["000001", "000101", "000111"] or mark_dict[index_mark-2][1][30:36] in ["000001", "000101", "000111"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark-1] in multimean_dict and mark_dict[index_mark-2] in multimean_dict and mark_dict[index_mark-3] not in multimean_dict) and (mark_dict[index_mark-3][1][2:8] in ["000001", "000101", "000111"] or mark_dict[index_mark-3][1][9:15] in ["000001", "000101", "000111"] or mark_dict[index_mark-3][1][16:22] in ["000001", "000101", "000111"] or mark_dict[index_mark-3][1][23:29] in ["000001", "000101", "000111"] or mark_dict[index_mark-3][1][30:36] in ["000001", "000101", "000111"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark-1] in multimean_dict and mark_dict[index_mark-2] in multimean_dict and mark_dict[index_mark-3] in multimean_dict and mark_dict[index_mark-4] not in multimean_dict) and (mark_dict[index_mark-4][1][2:8] in ["000001", "000101", "000111"] or mark_dict[index_mark-4][1][9:15] in ["000001", "000101", "000111"] or mark_dict[index_mark-4][1][16:22] in ["000001", "000101", "000111"] or mark_dict[index_mark-4][1][23:29] in ["000001", "000101", "000111"] or mark_dict[index_mark-4][1][30:36] in ["000001", "000101", "000111"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark-1] in multimean_dict and mark_dict[index_mark-2] in multimean_dict and mark_dict[index_mark-3] in multimean_dict and mark_dict[index_mark-4] in multimean_dict and mark_dict[index_mark-5] not in multimean_dict) and (mark_dict[index_mark-5][1][2:8] in ["000001", "000101", "000111"] or mark_dict[index_mark-5][1][9:15] in ["000001", "000101", "000111"] or mark_dict[index_mark-5][1][16:22] in ["000001", "000101", "000111"] or mark_dict[index_mark-5][1][23:29] in ["000001", "000101", "000111"] or mark_dict[index_mark-5][1][30:36] in ["000001", "000101", "000111"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])#助词前面有动、名、形
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                #print("9", choose_dict, remove_dict)
            elif i[1][2:8] == "011000" or i[1][9:15] == "011000" or i[1][16:22] == "011000" or i[1][23:29] == "011000" or i[1][30:36] == "011000":
                if (mark_dict[index_mark+1] not in multimean_dict) and (mark_dict[index_mark+1][1][2:8] in ["110101", "000001"] or mark_dict[index_mark+1][1][9:15] in ["110101", "000001"] or mark_dict[index_mark+1][1][16:22] in ["110101", "000001"] or mark_dict[index_mark+1][1][23:29] in ["110101", "000001"] or mark_dict[index_mark+1][1][30:36] in ["110101", "000001"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] not in multimean_dict) and (mark_dict[index_mark+2][1][2:8] in ["110101", "000001"] or mark_dict[index_mark+2][1][9:15] in ["110101", "000001"] or mark_dict[index_mark+2][1][16:22] in ["110101", "000001"] or mark_dict[index_mark+2][1][23:29] in ["110101", "000001"] or mark_dict[index_mark+2][1][30:36] in ["110101", "000001"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] in multimean_dict and mark_dict[index_mark+3] not in multimean_dict) and (mark_dict[index_mark+3][1][2:8] in ["110101", "000001"] or mark_dict[index_mark+3][1][9:15] in ["110101", "000001"] or mark_dict[index_mark+3][1][16:22] in ["110101", "000001"] or mark_dict[index_mark+3][1][23:29] in ["110101", "000001"] or mark_dict[index_mark+3][1][30:36] in ["110101", "000001"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] in multimean_dict and mark_dict[index_mark+3] in multimean_dict and mark_dict[index_mark+4] not in multimean_dict) and (mark_dict[index_mark+-4][1][2:8] in ["110101", "000001"] or mark_dict[index_mark+4][1][9:15] in ["110101", "000001"] or mark_dict[index_mark+4][1][16:22] in ["110101", "000001"] or mark_dict[index_mark+4][1][23:29] in ["110101", "000001"] or mark_dict[index_mark+4][1][30:36] in ["110101", "000001"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] in multimean_dict and mark_dict[index_mark+3] in multimean_dict and mark_dict[index_mark+4] in multimean_dict and mark_dict[index_mark+5] not in multimean_dict) and (mark_dict[index_mark+5][1][2:8] in ["110101", "000001"] or mark_dict[index_mark+5][1][9:15] in ["110101", "000001"] or mark_dict[index_mark+5][1][16:22] in ["110101", "000001"] or mark_dict[index_mark+5][1][23:29] in ["110101", "000001"] or mark_dict[index_mark+5][1][30:36] in ["110101", "000001"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])#拟声词后面有助、动
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                #print("10", choose_dict, remove_dict)
            elif i[1][2:8] == "110011" or i[1][9:15] == "110011" or i[1][16:22] == "110011" or i[1][23:29] == "110011" or i[1][30:36] == "110011":
                if (mark_dict[index_mark+1] not in multimean_dict) and (mark_dict[index_mark+1][1][2:8] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+1][1][9:15] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+1][1][16:22] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+1][1][23:29] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+1][1][30:36] in ["000100", "000111", "110000", "111011", "010111"]) and (i not in remove_dict):
                    #print("1ok")
                    choose_dict.append(multimean_dict[index_multi])
                    #print("1c", choose_dict)
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                    #print("1r", remove_dict)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] not in multimean_dict) and (mark_dict[index_mark+2][1][2:8] in ["000100", "000111", "110000", "111011", "010111", "010111"] or mark_dict[index_mark+2][1][9:15] in ["000100", "000111", "110000", "111011", "010111", "010111"] or mark_dict[index_mark+2][1][16:22] in ["000100", "000111", "110000", "111011", "010111", "010111"] or mark_dict[index_mark+2][1][23:29] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+2][1][30:36] in ["000100", "000111", "110000", "111011", "010111"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    #print("2c", choose_dict)
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                    #print("2c,2r", choose_dict, remove_dict)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] not in multimean_dict and mark_dict[index_mark+3] not in multimean_dict) and (mark_dict[index_mark+3][1][2:8] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+3][1][9:15] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+3][1][16:22] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+3][1][23:29] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+3][1][30:36] in ["000100", "000111", "110000", "111011", "010111"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    #print("3c", choose_dict)
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                    #print("3c,3r", choose_dict, remove_dict)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] in multimean_dict and mark_dict[index_mark+3] in multimean_dict and mark_dict[index_mark+4] not in multimean_dict) and (mark_dict[index_mark+-4][1][2:8] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+4][1][9:15] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+4][1][16:22] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+4][1][23:29] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+4][1][30:36] in ["000100", "000111", "110000", "111011", "010111"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    #print("4c", choose_dict)
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                    #print("4c,4r", choose_dict, remove_dict)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] in multimean_dict and mark_dict[index_mark+3] in multimean_dict and mark_dict[index_mark+4] in multimean_dict and mark_dict[index_mark+5] not in multimean_dict) and (mark_dict[index_mark+5][1][2:8] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+5][1][9:15] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+5][1][16:22] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+5][1][23:29] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+5][1][30:36] in ["000100", "000111", "110000", "111011", "010111"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])#介词后面有代、名、时间、地点
                    #print("5c", choose_dict)
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                    #print("5c,5r", choose_dict, remove_dict)
                elif (mark_dict[index_mark-1] not in multimean_dict) and (mark_dict[index_mark-1][1][2:8] in ["000010", "000011"] or mark_dict[index_mark-1][1][9:15] in ["000010", "000011"] or mark_dict[index_mark-1][1][16:22] in ["000010", "000011"] or mark_dict[index_mark-1][1][23:29] in ["000010", "000011"] or mark_dict[index_mark-1][1][30:36] in ["000010", "000011"]) and (mark_dict[index_mark+1] not in multimean_dict) and (mark_dict[index_mark+1][1][2:8] in ["000010", "000011"] or mark_dict[index_mark+1][1][9:15] in ["000010", "000011"] or mark_dict[index_mark+1][1][16:22] in ["000010", "000011"] or mark_dict[index_mark+1][1][23:29] in ["000010", "000011"] or mark_dict[index_mark+1][1][30:36] in ["000010", "000011"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    #print("6c", choose_dict)
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark-1] in multimean_dict and mark_dict[index_mark-2] not in multimean_dict) and (mark_dict[index_mark-2][1][2:8] in ["000010", "000011"] or mark_dict[index_mark-2][1][9:15] in ["000010", "000011"] or mark_dict[index_mark-2][1][16:22] in ["000010", "000011"] or mark_dict[index_mark-2][1][23:29] in ["000010", "000011"] or mark_dict[index_mark-2][1][30:36] in ["000010", "000011"]) and (mark_dict[index_mark+1] in multimean_dict) and (mark_dict[index_mark+1][1][2:8] in ["000010", "000011"] or mark_dict[index_mark+1][1][9:15] in ["000010", "000011"] or mark_dict[index_mark+1][1][16:22] in ["000010", "000011"] or mark_dict[index_mark+1][1][23:29] in ["000010", "000011"] or mark_dict[index_mark+1][1][30:36] in ["000010", "000011"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    #print("7c", choose_dict)
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark-1] in multimean_dict and mark_dict[index_mark-2] in multimean_dict and mark_dict[index_mark-3] not in multimean_dict) and (mark_dict[index_mark-3][1][2:8] in ["000010", "000011"] or mark_dict[index_mark-3][1][9:15] in ["000010", "000011"] or mark_dict[index_mark-3][1][16:22] in ["000010", "000011"] or mark_dict[index_mark-3][1][23:29] in ["000010", "000011"] or mark_dict[index_mark-3][1][30:36] in ["000010", "000011"]) and (mark_dict[index_mark+1] in multimean_dict) and (mark_dict[index_mark+1][1][2:8] in ["000010", "000011"] or mark_dict[index_mark+1][1][9:15] in ["000010", "000011"] or mark_dict[index_mark+1][1][16:22] in ["000010", "000011"] or mark_dict[index_mark+1][1][23:29] in ["000010", "000011"] or mark_dict[index_mark+1][1][30:36] in ["000010", "000011"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    #print("8c", choose_dict)
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark-1] not in multimean_dict) and (mark_dict[index_mark-1][1][2:8] in ["000010", "000011"] or mark_dict[index_mark-1][1][9:15] in ["000010", "000011"] or mark_dict[index_mark-1][1][16:22] in ["000010", "000011"] or mark_dict[index_mark-1][1][23:29] in ["000010", "000011"] or mark_dict[index_mark-1][1][30:36] in ["000010", "000011"]) and (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] not in multimean_dict) and (mark_dict[index_mark+2][1][2:8] in ["000010", "000011"] or mark_dict[index_mark+2][1][9:15] in ["000010", "000011"] or mark_dict[index_mark+2][1][16:22] in ["000010", "000011"] or mark_dict[index_mark+2][1][23:29] in ["000010", "000011"] or mark_dict[index_mark+2][1][30:36] in ["000010", "000011"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    #print("9c", choose_dict)
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark-1] not in multimean_dict) and (mark_dict[index_mark-1][1][2:8] in ["000010", "000011"] or mark_dict[index_mark-1][1][9:15] in ["000010", "000011"] or mark_dict[index_mark-1][1][16:22] in ["000010", "000011"] or mark_dict[index_mark-1][1][23:29] in ["000010", "000011"] or mark_dict[index_mark-1][1][30:36] in ["000010", "000011"]) and (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] in multimean_dict and mark_dict[index_mark+3] not in multimean_dict) and (mark_dict[index_mark+3][1][2:8] in ["000010", "000011"] or mark_dict[index_mark+3][1][9:15] in ["000010", "000011"] or mark_dict[index_mark+3][1][16:22] in ["000010", "000011"] or mark_dict[index_mark+3][1][23:29] in ["000010", "000011"] or mark_dict[index_mark+3][1][30:36] in ["000010", "000011"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])#介词前有数词或量词，后有数词
                    #print("10c", choose_dict)
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                #print("11", choose_dict, remove_dict)
            elif i[1][2:8] == "010101" or i[1][9:15] == "010101" or i[1][16:22] == "010101" or i[1][23:29] == "010101" or i[1][30:36] == "010101":
                if (mark_dict[index_mark+1] not in multimean_dict) and (mark_dict[index_mark+1][1][2:8] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+1][1][9:15] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+1][1][16:22] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+1][1][23:29] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+1][1][30:36] in ["000100", "000111", "110000", "111011", "010111"]) and (i not in remove_dict) and (mark_dict[index_mark-1][1][2:8] != "000010" and mark_dict[index_mark-1][1][9:15] != "000010" and mark_dict[index_mark-1][1][16:22] != "000010" and mark_dict[index_mark-1][1][23:29] != "000010" and mark_dict[index_mark-1][1][30:36] != "000010"):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] not in multimean_dict) and (mark_dict[index_mark+2][1][2:8] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+2][1][9:15] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+2][1][16:22] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+2][1][23:29] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+2][1][30:36] in ["000100", "000111", "110000", "111011", "010111"]) and (i not in remove_dict) and (mark_dict[index_mark-1][1][2:8] != "000010" and mark_dict[index_mark-1][1][9:15] != "000010" and mark_dict[index_mark-1][1][16:22] != "000010" and mark_dict[index_mark-1][1][23:29] != "000010" and mark_dict[index_mark-1][1][30:36] != "000010"):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] in multimean_dict and mark_dict[index_mark+3] not in multimean_dict) and (mark_dict[index_mark+3][1][2:8] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+3][1][9:15] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+3][1][16:22] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+3][1][23:29] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+3][1][30:36] in ["000100", "000111", "110000", "111011", "010111"]) and (i not in remove_dict) and (mark_dict[index_mark-1][1][2:8] != "000010" and mark_dict[index_mark-1][1][9:15] != "000010" and mark_dict[index_mark-1][1][16:22] != "000010" and mark_dict[index_mark-1][1][23:29] != "000010" and mark_dict[index_mark-1][1][30:36] != "000010"):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] in multimean_dict and mark_dict[index_mark+3] in multimean_dict and mark_dict[index_mark+4] not in multimean_dict) and (mark_dict[index_mark+-4][1][2:8] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+4][1][9:15] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+4][1][16:22] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+4][1][23:29] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+4][1][30:36] in ["000100", "000111", "110000", "111011", "010111"]) and (i not in remove_dict) and (mark_dict[index_mark-1][1][2:8] != "000010" and mark_dict[index_mark-1][1][9:15] != "000010" and mark_dict[index_mark-1][1][16:22] != "000010" and mark_dict[index_mark-1][1][23:29] != "000010" and mark_dict[index_mark-1][1][30:36] != "000010"):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] in multimean_dict and mark_dict[index_mark+3] in multimean_dict and mark_dict[index_mark+4] in multimean_dict and mark_dict[index_mark+5] not in multimean_dict) and (mark_dict[index_mark+5][1][2:8] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+5][1][9:15] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+5][1][16:22] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+5][1][23:29] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+5][1][30:36] in ["000100", "000111", "110000", "111011", "010111"]) and (i not in remove_dict) and (mark_dict[index_mark-1][1][2:8] != "000010" and mark_dict[index_mark-1][1][9:15] != "000010" and mark_dict[index_mark-1][1][16:22] != "000010" and mark_dict[index_mark-1][1][23:29] != "000010" and mark_dict[index_mark-1][1][30:36] != "000010"):
                    choose_dict = multimean_dict[index_multi]#连词后面有代、名、时、地
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark-1] not in multimean_dict) and (mark_dict[index_mark-1][0] in ["，", "；"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark-1] in multimean_dict and mark_dict[index_mark-2] not in multimean_dict) and (mark_dict[index_mark-2][0] in ["，", "；"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark-1] in multimean_dict and mark_dict[index_mark-2] in multimean_dict and mark_dict[index_mark-3] not in multimean_dict) and (mark_dict[index_mark-3][0] in ["，", "；"]) and (i not in remove_dict):
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark-1] in multimean_dict and mark_dict[index_mark-2] in multimean_dict and mark_dict[index_mark-3] in multimean_dict and mark_dict[index_mark-4] not in multimean_dict) and (mark_dict[index_mark-4][0] in ["，", "；"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark-1] in multimean_dict and mark_dict[index_mark-2] in multimean_dict and mark_dict[index_mark-3] in multimean_dict and mark_dict[index_mark-4] in multimean_dict and mark_dict[index_mark-5] not in multimean_dict) and (mark_dict[index_mark-5][0] in ["，", "；"]) and (i not in remove_dict):
                    choose_dict = multimean_dict[index_multi]#连词前面有逗号、分号
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                #print("12", choose_dict, remove_dict)
            elif i[1][2:8] == "000110" or i[1][9:15] == "000110" or i[1][16:22] == "000110" or i[1][23:29] == "000110" or i[1][30:36] == "000110":
                if (mark_dict[index_mark+1] not in multimean_dict) and (mark_dict[index_mark+1][1][2:8] in ["000001", "000101", "000110"] or mark_dict[index_mark+1][1][9:15] in ["000001", "000101", "000110"] or mark_dict[index_mark+1][1][16:22] in ["000001", "000101", "000110"] or mark_dict[index_mark+1][1][23:29] in ["000001", "000101", "000110"] or mark_dict[index_mark+1][1][30:36] in ["000001", "000101", "000110"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] not in multimean_dict) and (mark_dict[index_mark+2][1][2:8] in ["000001", "000101", "000110"] or mark_dict[index_mark+2][1][9:15] in ["000001", "000101", "000110"] or mark_dict[index_mark+2][1][16:22] in ["000001", "000101", "000110"] or mark_dict[index_mark+2][1][23:29] in ["000001", "000101", "000110"] or mark_dict[index_mark+2][1][30:36] in ["000001", "000101", "000110"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] in multimean_dict and mark_dict[index_mark+3] not in multimean_dict) and (mark_dict[index_mark+3][1][2:8] in ["000001", "000101", "000110"] or mark_dict[index_mark+3][1][9:15] in ["000001", "000101", "000110"] or mark_dict[index_mark+3][1][16:22] in ["000001", "000101", "000110"] or mark_dict[index_mark+3][1][23:29] in ["000001", "000101", "000110"] or mark_dict[index_mark+3][1][30:36] in ["000001", "000101", "000110"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] in multimean_dict and mark_dict[index_mark+3] in multimean_dict and mark_dict[index_mark+4] not in multimean_dict) and (mark_dict[index_mark+-4][1][2:8] in ["000001", "000101", "000110"] or mark_dict[index_mark+4][1][9:15] in ["000001", "000101", "000110"] or mark_dict[index_mark+4][1][16:22] in ["000001", "000101", "000110"] or mark_dict[index_mark+4][1][23:29] in ["000001", "000101", "000110"] or mark_dict[index_mark+4][1][30:36] in ["000001", "000101", "000110"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] in multimean_dict and mark_dict[index_mark+3] in multimean_dict and mark_dict[index_mark+4] in multimean_dict and mark_dict[index_mark+5] not in multimean_dict) and (mark_dict[index_mark+5][1][2:8] in ["000001", "000101", "000110"] or mark_dict[index_mark+5][1][9:15] in ["000001", "000101", "000110"] or mark_dict[index_mark+5][1][16:22] in ["000001", "000101", "000110"] or mark_dict[index_mark+5][1][23:29] in ["000001", "000101", "000110"] or mark_dict[index_mark+5][1][30:36] in ["000001", "000101", "000110"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])#副词后面有动、形、副
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark-1] not in multimean_dict) and (mark_dict[index_mark-1][1][2:8] in ["000001", "000101", "000110"] or mark_dict[index_mark-1][1][9:15] in ["000001", "000101", "000110"] or mark_dict[index_mark-1][1][16:22] in ["000001", "000101", "000110"] or mark_dict[index_mark-1][1][23:29] in ["000001", "000101", "000110"] or mark_dict[index_mark-1][1][30:36] in ["000001", "000101", "000110"]):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark-1] in multimean_dict and mark_dict[index_mark-2] not in multimean_dict) and (mark_dict[index_mark-2][1][2:8] in ["000001", "000101", "000110"] or mark_dict[index_mark-2][1][9:15] in ["000001", "000101", "000110"] or mark_dict[index_mark-2][1][16:22] in ["000001", "000101", "000110"] or mark_dict[index_mark-2][1][23:29] in ["000001", "000101", "000110"] or mark_dict[index_mark-2][1][30:36] in ["000001", "000101", "000110"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark-1] in multimean_dict and mark_dict[index_mark-2] in multimean_dict and mark_dict[index_mark-3] not in multimean_dict) and (mark_dict[index_mark-3][1][2:8] in ["000001", "000101", "000110"] or mark_dict[index_mark-3][1][9:15] in ["000001", "000101", "000110"] or mark_dict[index_mark-3][1][16:22] in ["000001", "000101", "000110"] or mark_dict[index_mark-3][1][23:29] in ["000001", "000101", "000110"] or mark_dict[index_mark-3][1][30:36] in ["000001", "000101", "000110"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark-1] in multimean_dict and mark_dict[index_mark-2] in multimean_dict and mark_dict[index_mark-3] in multimean_dict and mark_dict[index_mark-4] not in multimean_dict) and (mark_dict[index_mark-4][1][2:8] in ["000001", "000101", "000110"] or mark_dict[index_mark-4][1][9:15] in ["000001", "000101", "000110"] or mark_dict[index_mark-4][1][16:22] in ["000001", "000101", "000110"] or mark_dict[index_mark-4][1][23:29] in ["000001", "000101", "000110"] or mark_dict[index_mark-4][1][30:36] in ["000001", "000101", "000110"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark-1] in multimean_dict and mark_dict[index_mark-2] in multimean_dict and mark_dict[index_mark-3] in multimean_dict and mark_dict[index_mark-4] in multimean_dict and mark_dict[index_mark-5] not in multimean_dict) and (mark_dict[index_mark-5][1][2:8] in ["000001", "000101", "000110"] or mark_dict[index_mark-5][1][9:15] in ["000001", "000101", "000110"] or mark_dict[index_mark-5][1][16:22] in ["000001", "000101", "000110"] or mark_dict[index_mark-5][1][23:29] in ["000001", "000101", "000110"] or mark_dict[index_mark-5][1][30:36] in ["000001", "000101", "000110"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])#副词前面有动、形、副
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                #print("13", choose_dict, remove_dict)
            elif i[1][2:8] == "000101" or i[1][9:15] == "000101" or i[1][16:22] == "000101" or i[1][23:29] == "000101" or i[1][30:36] == "000101":
                if (multimean_dict[index_multi+1] and multimean_dict[index_multi+1][1][2:8] not in ["110011"] and multimean_dict[index_multi+1][1][9:15] not in ["110011"] and multimean_dict[index_multi+1][1][16:22] not in ["110011"] and multimean_dict[index_multi+1][1][23:29] not in ["110011"] and multimean_dict[index_multi+1][1][30:36] not in ["110011"]) or (multimean_dict[index_multi-1] and multimean_dict[index_multi-1][1][2:8] not in ["110011"] and multimean_dict[index_multi-1][1][9:15] not in ["110011"] and multimean_dict[index_multi-1][1][16:22] not in ["110011"] and multimean_dict[index_multi-1][1][23:29] not in ["110011"] and multimean_dict[index_multi-1][1][30:36] not in ["110011"]):
                    if (mark_dict[index_mark+1] not in multimean_dict) and (mark_dict[index_mark+1][1][2:8] in ["000001", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+1][1][9:15] in ["000001", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+1][1][16:22] in ["000001", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+1][1][23:29] in ["000001", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+1][1][30:36] in ["000001", "000111", "110000", "111011", "010111"]) and (i not in remove_dict):
                        choose_dict.append(multimean_dict[index_multi])
                        for j in multimean_dict:
                            if i[0][3::] == j[0][3::] and i!=j:
                                remove_dict.append(j)
                    elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] not in multimean_dict) and (mark_dict[index_mark+2][1][2:8] in ["000001", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+2][1][9:15] in ["000001", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+2][1][16:22] in ["000001", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+2][1][23:29] in ["000001", "000111", "110000", "111011", "010111"] or mark_dict[index_mark+2][1][30:36] in ["000001", "000111", "110000", "111011", "010111"]) and (i not in remove_dict):
                        choose_dict.append(multimean_dict[index_multi])
                        for j in multimean_dict:
                            if i[0][3::] == j[0][3::] and i!=j:
                                remove_dict.append(j)
                    elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] in multimean_dict and mark_dict[index_mark+3] not in multimean_dict) and (mark_dict[index_mark+3][1][2:8] in ["000001", "000111", "110000", "111011"] or mark_dict[index_mark+3][1][9:15] in ["000001", "000111", "110000", "111011"] or mark_dict[index_mark+3][1][16:22] in ["000001", "000111", "110000", "111011"] or mark_dict[index_mark+3][1][23:29] in ["000001", "000111", "110000", "111011"] or mark_dict[index_mark+3][1][30:36] in ["000001", "000111", "110000", "111011"]) and (i not in remove_dict):
                        choose_dict.append(multimean_dict[index_multi])
                        for j in multimean_dict:
                            if i[0][3::] == j[0][3::] and i!=j:
                                remove_dict.append(j)
                    elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] in multimean_dict and mark_dict[index_mark+3] in multimean_dict and mark_dict[index_mark+4] not in multimean_dict) and (mark_dict[index_mark+-4][1][2:8] in ["000001", "000111", "110000", "111011"] or mark_dict[index_mark+4][1][9:15] in ["000001", "000111", "110000", "111011"] or mark_dict[index_mark+4][1][16:22] in ["000001", "000111", "110000", "111011"] or mark_dict[index_mark+4][1][23:29] in ["000001", "000111", "110000", "111011"] or mark_dict[index_mark+4][1][30:36] in ["000001", "000111", "110000", "111011"]) and (i not in remove_dict):
                        choose_dict.append(multimean_dict[index_multi])
                        for j in multimean_dict:
                            if i[0][3::] == j[0][3::] and i!=j:
                                remove_dict.append(j)
                    elif (mark_dict[index_mark+1] in multimean_dict and mark_dict[index_mark+2] in multimean_dict and mark_dict[index_mark+3] in multimean_dict and mark_dict[index_mark+4] in multimean_dict and mark_dict[index_mark+5] not in multimean_dict) and (mark_dict[index_mark+5][1][2:8] in ["000001", "000111", "110000", "111011"] or mark_dict[index_mark+5][1][9:15] in ["000001", "000111", "110000", "111011"] or mark_dict[index_mark+5][1][16:22] in ["000001", "000111", "110000", "111011"] or mark_dict[index_mark+5][1][23:29] in ["000001", "000111", "110000", "111011"] or mark_dict[index_mark+5][1][30:36] in ["000001", "000111", "110000", "111011"]) and (i not in remove_dict):
                        choose_dict.append(multimean_dict[index_multi])#形词后面有动、名、时、地
                        for j in multimean_dict:
                            if i[0][3::] == j[0][3::] and i!=j:
                                remove_dict.append(j)
                    elif (mark_dict[index_mark-1] not in multimean_dict) and (mark_dict[index_mark-1][1][2:8] == "000110" or mark_dict[index_mark-1][1][9:15] == "000110" or mark_dict[index_mark-1][1][16:22] == "000110" or mark_dict[index_mark-1][1][23:29] == "000110" or mark_dict[index_mark-1][1][30:36] == "000110") and (i not in remove_dict):
                        choose_dict.append(multimean_dict[index_multi])
                        for j in multimean_dict:
                            if i[0][3::] == j[0][3::] and i!=j:
                                remove_dict.append(j)
                    elif (mark_dict[index_mark-1] in multimean_dict and mark_dict[index_mark-2] not in multimean_dict) and (mark_dict[index_mark-2][1][2:8] == "000110" or mark_dict[index_mark-2][1][9:15] == "000110" or mark_dict[index_mark-2][1][16:22] == "000110" or mark_dict[index_mark-2][1][23:29] == "000110" or mark_dict[index_mark-2][1][30:36] == "000110") and (i not in remove_dict):
                        choose_dict.append(multimean_dict[index_multi])
                        for j in multimean_dict:
                            if i[0][3::] == j[0][3::] and i!=j:
                                remove_dict.append(j)
                    elif (mark_dict[index_mark-1] in multimean_dict and mark_dict[index_mark-2] in multimean_dict and mark_dict[index_mark-3] not in multimean_dict) and (mark_dict[index_mark-3][1][2:8] == "000110" or mark_dict[index_mark-3][1][9:15] == "000110" or mark_dict[index_mark-3][1][16:22] == "000110" or mark_dict[index_mark-3][1][23:29] == "000110" or mark_dict[index_mark-3][1][30:36] == "000110") and (i not in remove_dict):
                        choose_dict.append(multimean_dict[index_multi])
                        for j in multimean_dict:
                            if i[0][3::] == j[0][3::] and i!=j:
                                remove_dict.append(j)
                    elif (mark_dict[index_mark-1] in multimean_dict and mark_dict[index_mark-2] in multimean_dict and mark_dict[index_mark-3] in multimean_dict and mark_dict[index_mark-4] not in multimean_dict) and (mark_dict[index_mark-4][1][2:8] == "000110" or mark_dict[index_mark-4][1][9:15] == "000110" or mark_dict[index_mark-4][1][16:22] == "000110" or mark_dict[index_mark-4][1][23:29] == "000110" or mark_dict[index_mark-4][1][30:36] == "000110") and (i not in remove_dict):
                        choose_dict.append(multimean_dict[index_multi])
                        for j in multimean_dict:
                            if i[0][3::] == j[0][3::] and i!=j:
                                remove_dict.append(j)
                    elif (mark_dict[index_mark-1] in multimean_dict and mark_dict[index_mark-2] in multimean_dict and mark_dict[index_mark-3] in multimean_dict and mark_dict[index_mark-4] in multimean_dict and mark_dict[index_mark-5] not in multimean_dict) and (mark_dict[index_mark-5][1][2:8] == "000110" or mark_dict[index_mark-5][1][9:15] == "000110" or mark_dict[index_mark-5][1][16:22] == "000110" or mark_dict[index_mark-5][1][23:29] == "000110" or mark_dict[index_mark-5][1][30:36] == "000110") and (i not in remove_dict):
                        choose_dict.append(multimean_dict[index_multi])#形词前有副
                        for j in multimean_dict:
                            if i[0][3::] == j[0][3::] and i!=j:
                                remove_dict.append(j)
                #print("14", choose_dict, remove_dict)
            elif i[1][2:8] == "000111" or i[1][9:15] == "000111" or i[1][16:22] == "000111" or i[1][
                                                                                               23:29] == "000111" or \
                    i[1][30:36] == "000111":
                if (mark_dict[index_mark - 1] not in multimean_dict) and (
                        mark_dict[index_mark - 1][1][3::] in ["的", "之"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i != j:
                            remove_dict.append(j) # 名词前面有“的”、“之”
            elif i[1][2:8] == "000001" or i[1][9:15] == "000001" or i[1][16:22] == "000001" or i[1][23:29] == "000001" or i[1][30:36] == "000001":
                if (mark_dict[index_mark-1] not in multimean_dict) and (mark_dict[index_mark-1][1][2:8] in [ "110101", "111110", "000110"] or mark_dict[index_mark-1][1][9:15] in [ "110101", "111110", "000110"] or mark_dict[index_mark-1][1][16:22] in [ "110101", "111110", "000110"] or mark_dict[index_mark-1][1][23:29] in [ "110101", "111110", "000110"] or mark_dict[index_mark-1][1][30:36] in [ "110101", "111110", "000110"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark-1] in multimean_dict and mark_dict[index_mark-2] not in multimean_dict) and (mark_dict[index_mark-2][1][2:8] in [ "110101", "111110", "000110"] or mark_dict[index_mark-2][1][9:15] in [ "110101", "111110", "000110"] or mark_dict[index_mark-2][1][16:22] in [ "110101", "111110", "000110"] or mark_dict[index_mark-2][1][23:29] in [ "110101", "111110", "000110"] or mark_dict[index_mark-2][1][30:36] in [ "110101", "111110", "000110"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark-1] in multimean_dict and mark_dict[index_mark-2] in multimean_dict and mark_dict[index_mark-3] not in multimean_dict) and (mark_dict[index_mark-3][1][2:8] in [ "110101", "111110", "000110"] or mark_dict[index_mark-3][1][9:15] in [ "110101", "111110", "000110"] or mark_dict[index_mark-3][1][16:22] in [ "110101", "111110", "000110"] or mark_dict[index_mark-3][1][23:29] in [ "110101", "111110", "000110"] or mark_dict[index_mark-3][1][30:36] in [ "110101", "111110", "000110"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark-1] in multimean_dict and mark_dict[index_mark-2] in multimean_dict and mark_dict[index_mark-3] in multimean_dict and mark_dict[index_mark-4] not in multimean_dict) and (mark_dict[index_mark-4][1][2:8] in [ "110101", "111110", "000110"] or mark_dict[index_mark-4][1][9:15] in [ "110101", "111110", "000110"] or mark_dict[index_mark-4][1][16:22] in [ "110101", "111110", "000110"] or mark_dict[index_mark-4][1][23:29] in [ "110101", "111110", "000110"] or mark_dict[index_mark-4][1][30:36] in [ "110101", "111110", "000110"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
                elif (mark_dict[index_mark-1] in multimean_dict and mark_dict[index_mark-2] in multimean_dict and mark_dict[index_mark-3] in multimean_dict and mark_dict[index_mark-4] in multimean_dict and mark_dict[index_mark-5] not in multimean_dict) and (mark_dict[index_mark-5][1][2:8] in [ "110101", "111110", "000110"] or mark_dict[index_mark-5][1][9:15] in [ "110101", "111110", "000110"] or mark_dict[index_mark-5][1][16:22] in [ "110101", "111110", "000110"] or mark_dict[index_mark-5][1][23:29] in [ "110101", "111110", "000110"] or mark_dict[index_mark-5][1][30:36] in [ "110101", "111110", "000110"]) and (i not in remove_dict):
                    choose_dict.append(multimean_dict[index_multi])#动词前有情、助、副
                    for j in multimean_dict:
                        if i[0][3::] == j[0][3::] and i!=j:
                            remove_dict.append(j)
    except Exception:
        pass

    #print("remove", remove_dict)

    # (3) 删除多义词的重复词性
    for i in remove_dict:
        for j in mark_dict:
            if i == j:
                mark_dict.remove(j)

    #print("mark0", mark_dict)

    #2. 只有一个意思的词，含有V及多重词性
    #（0）把多词性的词挑出，加入重复字典
    for i in mark_dict:
        index_d = mark_dict.index(i)
        if i[1][9:15] != "000000":
                duplicate_dict.append([i,index_d])

    #print("duplicate", duplicate_dict)

    # (1). 只有一个意思的词，含有v/n/adj
    try:
        for i in duplicate_dict:
            index_d = i[-1]
            if (i[0][1][2:8] == "000001" and i[0][1][9:15] == "000111" and i[0][1][16:22] == "000101" and i[0][1][23:29] == "000000" and i[0][1][30:36] == "000000"):
                if (mark_dict[index_d + 1][1][2:8] == "000001") and (mark_dict[index_d - 1][1][2:8] in ["000100", "000111", "111110", "000110", "010101", "110101"] or
                                                                     mark_dict[index_d - 1][1][9:15] in ["000100", "000111", "111110", "000110", "010101", "110101"] or
                                                                     mark_dict[index_d - 1][1][16:22] in ["000100", "000111", "111110", "000110", "010101", "110101"] or
                                                                     mark_dict[index_d - 1][1][23:29] in ["000100", "000111", "111110", "000110", "010101", "110101"] or
                                                                     mark_dict[index_d - 1][1][30:36] in ["000100", "000111", "111110", "000110", "010101", "110101"]):
                    mark_dict[index_d][1] = "1 000101 000000 000000 000000 000000"
    except Exception:
        pass

    #（2）v/n重复的处理
    mark_rest_v = 0
    test = []

    try:
        for i in duplicate_dict:
            if i[0][1][2:8] == "000001" and i[0][1][9:15] == "000111" and i[0][1][16:22] == "000000" and i[0][1][23:29] == "000000" and i[0][1][30:36] == "000000":
                index_d = int(i[1])
                if (mark_dict[index_d-1][1][2:8] in ["111110", "000110","110101"] or mark_dict[index_d-1][1][9:15] in ["111110", "000110","110101"] or mark_dict[index_d-1][1][16:22] in ["111110", "000110","110101"] or mark_dict[index_d-1][1][23:29] in ["111110", "000110","110101"] or mark_dict[index_d-1][1][30:36] in ["111110", "000110","110101"]) and(mark_dict[index_d - 1][0][3::] not in ["了", "过", "的", "之"]) and (mark_dict[index_d+1][1][2:8] not in ["000001", "000101"] and mark_dict[index_d-1][1][9:15] not in ["000001", "000101"] and mark_dict[index_d-1][1][16:22] not in ["000001", "000101"] and mark_dict[index_d-1][1][23:29] not in ["000001", "000101"] and mark_dict[index_d-1][1][30:36] not in ["000001", "000101"]):
                    mark_dict[index_d][1] = "1 000001 000000 000000 000000 000000"
                    #print("a", mark_dict[index_d-1])
                elif (mark_dict[index_d-1][1][2:8] in ["000101"] or mark_dict[index_d-1][1][9:15] in ["000101"] or mark_dict[index_d-1][1][16:22] in ["000101"] or mark_dict[index_d-1][1][23:29] in ["000101"] or mark_dict[index_d-1][1][30:36] in ["000101"]) or (mark_dict[index_d - 1][0][3::] in ["了", "过", "的", "之"]):
                    mark_dict[index_d][1] = "1 000111 000000 000000 000000 000000"
                    #print("b", mark_dict[index_d-1])
    except Exception:
        pass

    #print("sen_test2", mark_dict)

    #（3）v/adj重复的处理
    mark_rest_v = 0
    try:
        for i in duplicate_dict:
            if i[0][1][2:8] == "000001" and i[0][1][9:15] == "000101" and i[0][1][16:22] == "000000" and i[0][1][23:29] == "000000" and i[0][1][30:36] == "000000":
                index_d = int(i[1])
                for j in mark_dict:
                    if (i[0] != j) and (j[1][2:8] == "000001"):
                        mark_rest_v += 1
                if mark_rest_v == 0:
                    mark_dict[index_d][1] = "1 000001 000000 000000 000000 000000"
    except Exception:
        pass

    try:
        for i in duplicate_dict:
            index_d = mark_dict.index(i[0])
            if i[0][1][2:8] == "000001" and i[0][1][9:15] == "000101" and i[0][1][16:22] == "000000" and i[0][1][23:29] == "000000" and i[0][1][30:36] == "000000":
                if (mark_dict[index_d-1][1][2:8] == "000110" or mark_dict[index_d-1][1][9:15] == "000110" or mark_dict[index_d-1][1][16:22] == "000110" or mark_dict[index_d-1][1][23:29] == "000110" or mark_dict[index_d-1][1][30:36] == "000110") or (mark_dict[index_d+1][1][2:8] in ["110101", "001110"] or
                            mark_dict[index_d + 1][1][9:15] in ["110101", "001110"] or
                            mark_dict[index_d + 1][1][16:22] in ["110101", "001110"] or
                            mark_dict[index_d + 1][1][23:29] in ["110101", "001110"] or
                            mark_dict[index_d + 1][1][30:36] in ["110101", "001110"]):
                    mark_dict[index_d][1] = "1 000001 000000 000000 000000 000000"
                elif (mark_dict[index_d-1][1][2:8] in ["110101", "111110", "000110"] or
                    mark_dict[index_d - 1][1][9:15] in ["110101", "111110", "000110"] or
                    mark_dict[index_d - 1][1][16:22] in ["110101", "111110", "000110"] or
                    mark_dict[index_d - 1][1][23:29] in ["110101", "111110", "000110"] or
                    mark_dict[index_d - 1][1][30:36] in ["110101", "111110", "000110"]) or (
                    mark_dict[index_d + 1][1][2:8] in ["000110"] or
                    mark_dict[index_d + 1][1][9:15] in ["000110"] or
                    mark_dict[index_d + 1][1][16:22] in ["000110"] or
                    mark_dict[index_d + 1][1][23:29] in ["000110"] or
                    mark_dict[index_d + 1][1][30:36] in ["000110"]):
                    mark_dict[index_d][1] = "1 000101 000000 000000 000000 000000"
    except Exception:
        pass

    #print("m_t18", mark_dict)

    # （4）v/sigh重复的处理
    mark_rest_v = 0
    try:
        for i in duplicate_dict:
            if i[0][1][2:8] == "000001" and i[0][1][9:15] == "011000" and i[0][1][16:22] == "000000" and i[0][1][23:29] == "000000" and i[0][1][30:36] == "000000":
                index_d = int(i[1])
                for j in mark_dict:
                    if (i[0] != j) and (j[1][2:8] == "000001"):
                        mark_rest_v += 1
                if mark_rest_v == 0:
                    mark_dict[index_d][1] = "1 000001 000000 000000 000000 000000"
    except Exception:
        pass

    try:
        for i in duplicate_dict:
            index_d = mark_dict.index(i[0])
            if i[0][1][2:8] == "000001" and i[0][1][9:15] == "011000" and i[0][1][16:22] == "000000" and i[0][1][23:29] == "000000" and i[0][1][30:36] == "000000":
                if (mark_dict[index_d + 1][1][2:8] in ["110101", "000001"] or
                    mark_dict[index_d + 1][1][9:15] in ["110101", "000001"] or
                    mark_dict[index_d + 1][1][16:22] in ["110101", "000001"] or
                    mark_dict[index_d + 1][1][23:29] in ["110101", "000001"] or
                    mark_dict[index_d + 1][1][30:36] in ["110101", "000001"]):
                    mark_dict[index_d][1] = "1 000001 000000 000000 000000 000000"
                elif (mark_dict[index_d-1][1][2:8] in ["000100", "000111", "000110", "110000", "111011", "010111"] or
                    mark_dict[index_d - 1][1][9:15] in ["000100", "000111", "000110", "110000", "111011", "010111"] or
                    mark_dict[index_d - 1][1][16:22] in ["000100", "000111", "000110", "110000", "111011", "010111"] or
                    mark_dict[index_d - 1][1][23:29] in ["000100", "000111", "000110", "110000", "111011", "010111"] or
                    mark_dict[index_d - 1][1][30:36] in ["000100", "000111", "000110", "110000", "111011", "010111"]) or (
                        mark_dict[index_d + 1][1][2:8] in ["000100", "000111", "000110", "110000", "111011", "010111"] or
                        mark_dict[index_d + 1][1][9:15] in ["000100", "000111", "000110", "110000", "111011", "010111"] or
                        mark_dict[index_d + 1][1][16:22] in ["000100", "000111", "000110", "110000", "111011", "010111"] or
                        mark_dict[index_d + 1][1][23:29] in ["000100", "000111", "000110", "110000", "111011", "010111"] or
                        mark_dict[index_d + 1][1][30:36] in ["000100", "000111", "000110", "110000", "111011", "010111"]):
                    mark_dict[index_d][1] = "1 011000 000000 000000 000000 000000"
    except Exception:
        pass

    #print("m_t17", mark_dict)

    # （5）v/aux重复的处理
    mark_rest_v = 0
    try:
        for i in duplicate_dict:
            if i[0][1][2:8] == "000001" and i[0][1][9:15] == "110101" and i[0][1][16:22] == "000000" and i[0][1][23:29] == "000000" and i[0][1][30:36] == "000000":
                index_d = int(i[1])
                for j in mark_dict:
                    if (i[0] != j) and (j[1][2:8] == "000001"):
                        mark_rest_v += 1
                if mark_rest_v == 0:
                    mark_dict[index_d][1] = "1 000001 000000 000000 000000 000000"
    except Exception:
        pass

    try:
        for i in duplicate_dict:
            index_d = mark_dict.index(i[0])
            if i[0][1][2:8] == "000001" and i[0][1][9:15] == "110101" and i[0][1][16:22] == "000000" and i[0][1][23:29] == "000000" and i[0][1][30:36] == "000000":
                if (mark_dict[index_d + 1][1][2:8] == "000001" or
                        mark_dict[index_d + 1][1][9:15] == "000001" or
                        mark_dict[index_d + 1][1][16:22] == "000001" or
                        mark_dict[index_d + 1][1][23:29] == "000001" or
                        mark_dict[index_d + 1][1][30:36] == "000001"):
                    mark_dict[index_d][1] = "1 000001 000000 000000 000000 000000"
                else:
                    mark_dict[index_d][1] = "1 110101 000000 000000 000000 000000"
    except Exception:
        pass

    #print("m_t16", mark_dict)

    # （6）v/modal重复的处理
    mark_rest_v = 0
    try:
        for i in duplicate_dict:
            if i[0][1][2:8] == "000001" and i[0][1][9:15] == "111110" and i[0][1][16:22] == "000000" and i[0][1][23:29] == "000000" and i[0][1][30:36] == "000000":
                index_d = int(i[1])
                for j in mark_dict:
                    if (i[0] != j) and (j[1][2:8] == "000001"):
                        mark_rest_v += 1
                if mark_rest_v == 0:
                    mark_dict[index_d][1] = "1 000001 000000 000000 000000 000000"
    except Exception:
        pass

    try:
        for i in duplicate_dict:
            index_d = mark_dict.index(i[0])
            if i[0][1][2:8] == "000001" and i[0][1][9:15] == "111110" and i[0][1][16:22] == "000000" and i[0][1][23:29] == "000000" and i[0][1][30:36] == "000000":
                if (mark_dict[index_d + 1][1][2:8] == "000001" or
                        mark_dict[index_d + 1][1][9:15] == "000001" or
                        mark_dict[index_d + 1][1][16:22] == "000001" or
                        mark_dict[index_d + 1][1][23:29] == "000001" or
                        mark_dict[index_d + 1][1][30:36] == "000001"):
                    mark_dict[index_d][1] = "1 000001 000000 000000 000000 000000"
                else:
                    mark_dict[index_d][1] = "1 111110 000000 000000 000000 000000"
    except Exception:
        pass

    #print("m_t15", mark_dict)

    #（7）v/adj/prep重复的处理
    mark_rest_v = 0
    try:
        for i in duplicate_dict:
            if i[0][1][2:8] == "000001" and i[0][1][9:15] == "000101" and i[0][1][16:22] == "110011" and i[0][1][23:29] == "000000" and i[0][1][30:36] == "000000":
                index_d = int(i[1])
                for j in mark_dict:
                    if (i[0] != j) and (j[1][2:8] == "000001"):
                        mark_rest_v += 1
                if mark_rest_v == 0:
                    mark_dict[index_d][1] = "1 000001 000000 000000 000000 000000"
    except Exception:
        pass

    try:
        for i in duplicate_dict:
            index_d = mark_dict.index(i[0])
            if i[0][1][2:8] == "000001" and i[0][1][9:15] == "000101" and i[0][1][16:22] == "110011" and i[0][1][23:29] == "000000" and i[0][1][30:36] == "000000":
                if (mark_dict[index_d - 1][1][2:8] == "000001" or
                        mark_dict[index_d - 1][1][9:15] in ["000111", "000100", "110000", "111011", "111110", "110101", "000110", "010111"] or
                        mark_dict[index_d - 1][1][16:22] in ["000111", "000100", "110000", "111011", "111110", "110101", "000110", "010111"] or
                        mark_dict[index_d - 1][1][23:29] in ["000111", "000100", "110000", "111011", "111110", "110101", "000110", "010111"] or
                        mark_dict[index_d - 1][1][30:36] in ["000111", "000100", "110000", "111011", "111110", "110101", "000110", "010111"]):
                    mark_dict[index_d][1] = "1 000001 000000 000000 000000 000000"
                elif (mark_dict[index_d + 1][1][2:8] in ["000111", "000100"] or
                        mark_dict[index_d + 1][1][9:15] in ["000111", "000100"] or
                        mark_dict[index_d + 1][1][16:22] in ["000111", "000100"] or
                        mark_dict[index_d + 1][1][23:29] in ["000111", "000100"]or
                        mark_dict[index_d + 1][1][30:36] in ["000111", "000100"]) and (mark_dict[index_d + 2] not in dot_dict):
                    mark_dict[index_d][1] = "1 000101 000000 000000 000000 000000"
                elif (mark_dict[index_d + 1][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                        mark_dict[index_d + 1][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                        mark_dict[index_d + 1][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                        mark_dict[index_d + 1][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                        mark_dict[index_d + 1][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]) and (mark_dict[index_d + 2] in dot_dict):
                    mark_dict[index_d][1] = "1 110011 000000 000000 000000 000000"
    except Exception:
        pass

    #print("m_t14", mark_dict)

    # 3. 只有一个意思的词，含有N及多重词性
    # (1）n/proun重复的处理
    try:
        for i in duplicate_dict:
            index_d = mark_dict.index(i[0])
            if i[0][1][2:8] == "000111" and i[0][1][9:15] == "000100" and i[0][1][16:22] == "000000" and i[0][1][23:29] == "000000" and i[0][1][30:36] == "000000":
                if (mark_dict[index_d - 1][1][2:8] in ["000101", "110101", "000010"] or mark_dict[index_d - 1][1][9:15] in ["000101", "110101", "000010"] or mark_dict[index_d - 1][1][16:22] in ["000101", "110101", "000010"] or \
                        mark_dict[index_d - 1][1][23:29] in ["000101", "110101", "000010"] or mark_dict[index_d - 1][1][30:36] in ["000101", "110101", "000010"]) or ((mark_dict[index_d - 1][1][2:8] =="000100" or mark_dict[index_d - 1][1][9:15] =="000100" or mark_dict[index_d - 1][1][16:22] =="000100" or \
                        mark_dict[index_d - 1][1][23:29] =="000100" or mark_dict[index_d - 1][0][1][30:36] =="000100") and (mark_dict[index_d - 1][-1] in ["种", "一", "样"])):
                    mark_dict[index_d][1] = "1 000111 000000 000000 000000 000000"
                elif (mark_dict[index_d - 1][1][2:8] in ["000100", "000111", "000110", "110000", "111011", "010111"] or \
                        mark_dict[index_d - 1][1][9:15] in ["000100", "000111", "000110", "110000", "111011", "010111"]  or mark_dict[index_d - 1][1][16:22] in ["000100", "000111", "000110", "110000", "111011", "010111"]  or \
                        mark_dict[index_d - 1][1][23:29] in ["000100", "000111", "000110", "110000", "111011", "010111"]  or mark_dict[index_d - 1][1][30:36] in ["000100", "000111", "000110", "110000", "111011", "010111"]) and (mark_dict[index_d - 1][-1] not in ["种", "一", "样"]) :
                    mark_dict[index_d][1] = "1 000100 000000 000000 000000 000000"
    except Exception:
        pass

    #print("m_t13", mark_dict)

    # (2) n/conj重复的处理
    try:
        for i in duplicate_dict:
            index_d = mark_dict.index(i[0])
            if i[0][1][2:8] == "000111" and i[0][1][9:15] == "010101" and i[0][1][16:22] == "000000" and i[0][1][23:29] == "000000" and i[0][1][30:36] == "000000":
                if (mark_dict[index_d + 1][1][2:8] in ["000001", "000101"] or mark_dict[index_d + 1][1][9:15] in ["000001", "000101"] or mark_dict[index_d + 1][1][16:22] in ["000001", "000101"] or \
                        mark_dict[index_d + 1][1][23:29] in ["000001", "000101"] or mark_dict[index_d + 1][1][30:36] in ["000001", "000101"]) or (mark_dict[index_d - 1][0][3::] == "的"):
                    mark_dict[index_d][1] = "1 000111 000000 000000 000000 000000"
                elif (mark_dict[index_d + 1][1][2:8] in ["000100", "000111", "110000", "111011", "010111"] or \
                        mark_dict[index_d + 1][1][9:15] in ["000100", "000111", "110000", "111011", "010111"]  or mark_dict[index_d + 1][1][16:22] in ["000100", "000111", "110000", "111011", "010111"] or \
                        mark_dict[index_d + 1][1][23:29] in ["000100", "000111", "110000", "111011", "010111"] or mark_dict[index_d + 1][1][30:36] in ["000100", "000111", "110000", "111011", "010111"]):
                    mark_dict[index_d][1] = "1 010101 000000 000000 000000 000000"
    except Exception:
        pass

    #print("m_t12", mark_dict)

    # (3) n/quan重复的处理
    try:
        for i in duplicate_dict:
            index_d = mark_dict.index(i[0])
            if i[0][1][2:8] == "000111" and i[0][1][9:15] == "000011" and i[0][1][16:22] == "000000" and i[0][1][23:29] == "000000" and i[0][1][30:36] == "000000":
                if (mark_dict[index_d - 1][1][2:8] == "000010" or mark_dict[index_d - 1][1][9:15] == "000010" or mark_dict[index_d - 1][1][16:22] == "000010" or \
                        mark_dict[index_d - 1][1][23:29] == "000010" or mark_dict[index_d - 1][1][30:36] == "000010"):
                    mark_dict[index_d][1] = "1 000011 000000 000000 000000 000000"
                else:
                    mark_dict[index_d][1] = "1 000111 000000 000000 000000 000000"
    except Exception:
        pass

    #print("m_t11", mark_dict)

    # 4. 只有一个意思的词，含有adj及多重词性
    # (1）adj/adv重复的处理
    try:
        for i in duplicate_dict:
            index_d = mark_dict.index(i[0])
            if i[0][1][2:8] == "000101" and i[0][1][9:15] == "000110" and i[0][1][16:22] == "000000" and i[0][1][23:29] == "000000" and i[0][1][30:36] == "000000":
                if (mark_dict[index_d + 1][1][2:8] in ["000111", "110000", "111011", "010111"] or mark_dict[index_d + 1][1][9:15] in ["000111", "110000","111011", "010111"] or
                        mark_dict[index_d + 1][1][16:22] in ["000111", "110000", "111011", "010111"] or mark_dict[index_d + 1][1][23:29] in ["000111", "110000", "111011", "010111"] or mark_dict[index_d + 1][1][30:36] in ["000111", "110000", "111011", "010111"]):
                    mark_dict[index_d][1] = "1 000101 000000 000000 000000 000000"
                elif (mark_dict[index_d + 1][1][2:8] in ["000001", "110101", "101000", "111110"] or \
                      mark_dict[index_d + 1][1][9:15] in ["000001", "110101", "101000", "111110"] or
                      mark_dict[index_d + 1][1][16:22] in ["000001", "110101", "101000", "111110"] or \
                      mark_dict[index_d + 1][1][23:29] in ["000001", "110101", "101000", "111110"] or
                      mark_dict[index_d + 1][1][30:36] in ["000001", "110101", "101000", "111110"]):
                    mark_dict[index_d][1] = "1 000110 000000 000000 000000 000000"
    except Exception:
        pass

    #print("m_t10", mark_dict)

    # (2) adj/aux重复的处理
    try:
        for i in duplicate_dict:
            index_d = mark_dict.index(i[0])
            if i[0][1][2:8] == "000101" and i[0][1][9:15] == "110101" and i[0][1][16:22] == "000000" and i[0][1][23:29] == "000000" and i[0][1][30:36] == "000000":
                if (mark_dict[index_d + 1][1][2:8] in ["000001", "000101"] or mark_dict[index_d + 1][1][9:15] in [
                    "000001", "000101"] or mark_dict[index_d + 1][1][16:22] in ["000001", "000101"] or \
                    mark_dict[index_d + 1][1][23:29] in ["000001", "000101"] or mark_dict[index_d + 1][1][30:36] in [
                        "000001", "000101"]) or (mark_dict[index_d - 1][0][3::] == "的"):
                    mark_dict[index_d][1] = "1 000101 000000 000000 000000 000000"
                elif (mark_dict[index_d - 1][1][2:8] in ["000100", "000111", "110000", "111011", "010111"] or \
                      mark_dict[index_d - 1][1][9:15] in ["000100", "000111", "110000", "111011", "010111"] or
                      mark_dict[index_d - 1][1][16:22] in ["000100", "000111", "110000", "111011", "010111"] or \
                      mark_dict[index_d - 1][1][23:29] in ["000100", "000111", "110000", "111011", "010111"] or
                      mark_dict[index_d - 1][1][30:36] in ["000100", "000111", "110000", "111011", "010111"]) and (
                        mark_dict[index_d - 2][1][2:8] == "000001" or \
                        mark_dict[index_d - 2][1][9:15] == "000001" or
                        mark_dict[index_d - 2][1][16:22] == "000001" or \
                        mark_dict[index_d - 2][1][23:29] == "000001" or
                        mark_dict[index_d - 2][1][30:36] == "000001"):
                    mark_dict[index_d][1] = "1 110101 000000 000000 000000 000000"
    except Exception:
        pass

    #print("m_t9", mark_dict)

    # # (3) adj/proun重复的处理
    # for i in duplicate_dict:
    #     index_d = duplicate_dict.index(i)
    #     if i[0][1][2:8] == "000101" and i[0][1][9:15] == "000100" and i[0][1][16:22] == "000000" and i[0][1][23:29] == "000000" and i[0][1][30:36] == "000000":
    #         if (mark_dict[index_d + 1][1][2:8] in ["000111", "110000", "111011"] or mark_dict[index_d + 1][1][9:15] in ["000111", "110000", "111011"] or
    #                 mark_dict[index_d + 1][1][16:22] in ["000111", "110000", "111011"] or mark_dict[index_d + 1][1][23:29] in ["000111", "110000", "111011"] or
    #                 mark_dict[index_d + 1][1][30:36] in ["000111", "110000", "111011"]):
    #             mark_dict[index_d][1][9:15] == "000000"
    #         else:
    #             mark_dict[index_d][1][9:15] == "000000"

    # (4) adj/sigh/proun重复的处理
    try:
        for i in duplicate_dict:
            index_d = mark_dict.index(i[0])
            if i[0][1][2:8] == "000101" and i[0][1][9:15] == "001110" and i[0][1][16:22] == "000100" and i[0][1][
                                                                                                23:29] == "000000" and \
                    i[0][1][30:36] == "000000":
                if (mark_dict[index_d + 1][1][2:8] in ["000111", "110000", "111011", "010111"] or mark_dict[index_d + 1][1][
                                                                                        9:15] in ["000111", "110000",
                                                                                                  "111011", "010111"] or
                        mark_dict[index_d + 1][1][16:22] in ["000111", "110000", "111011", "010111"] or mark_dict[index_d + 1][1][
                                                                                              23:29] in ["000111",
                                                                                                         "110000",
                                                                                                         "111011", "010111"] or
                        mark_dict[index_d + 1][1][30:36] in ["000111", "110000", "111011", "010111"]):
                    mark_dict[index_d][1] = "1 000101 000000 000000 000000 000000"
                elif (mark_dict[index_d + 1] in dot_dict):
                    mark_dict[index_d][1] = "1 001110 000000 000000 000000 000000"
                else:
                    mark_dict[index_d][1] = "1 000100 000000 000000 000000 000000"
    except Exception:
        pass

    #print("m_t8", mark_dict)

    # 5. 只有一个意思的词，含有adv及多重词性
    # (1）adv/proun重复的处理
    try:
        for i in duplicate_dict:
            index_d = mark_dict.index(i[0])
            if i[0][1][2:8] == "000110" and i[0][1][9:15] == "000100" and i[0][1][16:22] == "000000" and i[0][1][23:29] == "000000" and i[0][1][30:36] == "000000":
                if (mark_dict[index_d - 1][1][2:8] in ["000111", "110000", "111011", "000100"] or mark_dict[index_d - 1][1][9:15] in ["000111", "110000", "111011", "000100"] or
                        mark_dict[index_d - 1][1][16:22] in ["000111", "110000", "111011", "000100", "010111"] or \
                        mark_dict[index_d - 1][1][23:29] in ["000111", "110000", "111011", "000100", "010111"] or mark_dict[index_d - 1][1][30:36] in ["000111", "110000", "111011", "000100", "010111"]) or (mark_dict[index_d + 1][1][2:8] in ["000111", "110000", "111011", "000100", "010111"] or mark_dict[index_d - 1][1][9:15] in ["000111", "110000", "111011", "000100", "010111"] or
                        mark_dict[index_d + 1][1][16:22] in ["000111", "110000", "111011", "000100", "010111"] or \
                        mark_dict[index_d + 1][1][23:29] in ["000111", "110000", "111011", "000100", "010111"] or mark_dict[index_d + 1][1][30:36] in ["000111", "110000", "111011", "000100", "010111"]):
                    mark_dict[index_d][1] = "1 000110 000000 000000 000000 000000"
                elif (mark_dict[index_d + 1][1][2:8] in ["000001", "000101"] or \
                      mark_dict[index_d + 1][1][9:15] in ["000001", "000101"] or
                      mark_dict[index_d + 1][1][16:22] in ["000001", "000101"] or \
                      mark_dict[index_d + 1][1][23:29] in ["000001", "000101"] or
                      mark_dict[index_d + 1][1][30:36] in ["000001", "000101"]) and (
                        mark_dict[index_d + 2][0][3::] != "的"):
                    mark_dict[index_d][1] = "1 000100 000000 000000 000000 000000"
    except Exception:
        pass

    #print("m_t7", mark_dict)

    # (2) adv/conj重复的处理
    try:
        for i in duplicate_dict:
            index_d = mark_dict.index(i[0])
            if i[0][1][2:8] == "000110" and i[0][1][9:15] == "010101" and i[0][1][16:22] == "000000" and i[0][1][
                                                                                                23:29] == "000000" and \
                    i[0][1][30:36] == "000000":
                if mark_dict[index_d + 1] in dot_dict:
                    mark_dict[index_d][1] = "1 000110 000000 000000 000000 000000"
                else:
                    mark_dict[index_d][1] = "1 010101 000000 000000 000000 000000"
    except Exception:
        pass

    #print("m_t6", mark_dict)
    #print("duplicate_dict", duplicate_dict)

    # (3) adv/prep重复的处理
    try:
        for i in duplicate_dict:
            index_d = mark_dict.index(i[0])
            if i[0][1][2:8] == "000110" and i[0][1][9:15] == "110011" and i[0][1][16:22] == "000000" and i[0][1][23:29] == "000000" and i[0][1][30:36] == "000000":
                if (mark_dict[index_d - 1][1][2:8] in ["000001", "000101"] or mark_dict[index_d + 1][1][9:15] in ["000001", "000101"] or
                        mark_dict[index_d + 1][1][16:22] in ["000001", "000101"] or mark_dict[index_d + 1][1][23:29] in ["000001", "000101"] or mark_dict[index_d + 1][1][30:36] in ["000001", "000101"]):
                    mark_dict[index_d][1] = "1 000110 000000 000000 000000 000000"
                elif (mark_dict[index_d + 1][1][2:8] in ["000111", "110000", "111011", "010111"] or mark_dict[index_d + 1][1][9:15] in ["000111", "110000", "111011", "010111"] or
                        mark_dict[index_d + 1][1][16:22] in ["000111", "110000", "111011", "010111"] or mark_dict[index_d + 1][1][23:29] in ["000111", "110000", "111011", "010111"] or mark_dict[index_d + 1][1][30:36] in ["000111", "110000", "111011", "010111"]):
                    mark_dict[index_d][1] = "1 110011 000000 000000 000000 000000"
    except Exception:
        pass

    #print("m_t5", mark_dict)

    # (4) adv/quan重复的处理
    try:
        for i in duplicate_dict:
            index_d = mark_dict.index(i[0])
            if i[0][1][2:8] == "000110" and i[0][1][9:15] == "000011" and i[0][1][16:22] == "000100" and i[0][1][23:29] == "000000" and i[0][1][30:36] == "000000":
                if (mark_dict[index_d - 1][1][2:8] == "000010" or mark_dict[index_d - 1][1][9:15] == "000010" or
                        mark_dict[index_d - 1][1][16:22] == "000010" or mark_dict[index_d - 1][1][23:29] == "000010" or mark_dict[index_d - 1][1][30:36] == "000010"):
                    mark_dict[index_d][1] = "1 000110 000000 000000 000000 000000"
                else:
                    mark_dict[index_d][1] = "1 000011 000000 000000 000000 000000"
    except Exception:
        pass

    #print("m_t4", mark_dict)

    # (5) adv/imit重复的处理
    try:
        for i in duplicate_dict:
            index_d = mark_dict.index(i[0])
            if i[0][1][2:8] == "000110" and i[0][1][9:15] == "011000" and i[0][1][16:22] == "000100" and i[0][1][23:29] == "000000" and i[0][1][30:36] == "000000":
                if (mark_dict[index_d - 1][1][2:8] in ["000001", "000101"] or mark_dict[index_d - 1][1][9:15] in ["000001", "000101"] or
                        mark_dict[index_d - 1][1][16:22] in ["000001", "000101"] or mark_dict[index_d - 1][1][23:29] in ["000001", "000101"] or
                        mark_dict[index_d - 1][1][30:36] in ["000001", "000101"]):
                    mark_dict[index_d][1] = "1 000110 000000 000000 000000 000000"
                elif mark_dict[index_d + 1] in dot_dict:
                    mark_dict[index_d][1] = "1 011000 000000 000000 000000 000000"
    except Exception:
        pass

    #print("m_t3", mark_dict)

    # 6. 只有一个意思的词，含有quan及多重词性
    # (1）quan/t重复的处理
    try:
        for i in duplicate_dict:
            index_d = mark_dict.index(i[0])
            if i[0][1][2:8] == "000011" and i[0][1][9:15] == "111011" and i[0][1][16:22] == "000000" and i[0][1][
                                                                                                23:29] == "000000" and \
                    i[0][1][30:36] == "000000":
                if (mark_dict[index_d - 1][1][2:8] == "000010" or
                    mark_dict[index_d - 1][1][9:15] == "000010" or
                    mark_dict[index_d - 1][1][16:22] == "000010" or
                    mark_dict[index_d - 1][1][23:29] == "000010" or
                    mark_dict[index_d - 1][1][30:36] == "000010"):
                    mark_dict[index_d][1] = "1 000011 000000 000000 000000 000000"
                else:
                    mark_dict[index_d][1] = "1 111011 000000 000000 000000 000000"
    except Exception:
        pass

    #print("m_t2", mark_dict)

    # 7. 只有一个意思的词，含有t及多重词性
    # (1）t/p重复的处理
    try:
        for i in duplicate_dict:
            index_d = mark_dict.index(i[0])
            if i[0][1][2:8] == "110000" and i[0][1][9:15] == "111011" and i[0][1][16:22] == "000000" and i[0][1][
                                                                                                23:29] == "000000" and \
                    i[0][1][30:36] == "000000":
                if (mark_dict[index_d - 1][1][2:8] == "110000" or
                        mark_dict[index_d - 1][1][9:15] == "110000" or
                        mark_dict[index_d - 1][1][16:22] == "110000" or \
                        mark_dict[index_d - 1][1][23:29] == "110000" or
                        mark_dict[index_d - 1][1][30:36] == "110000"):
                    mark_dict[index_d][1] = "1 110000 000000 000000 000000 000000"
                elif (mark_dict[index_d - 1][1][2:8] == "111011" or
                        mark_dict[index_d - 1][1][9:15] == "111011" or
                        mark_dict[index_d - 1][1][16:22] == "111011" or \
                        mark_dict[index_d - 1][1][23:29] == "111011" or
                        mark_dict[index_d - 1][1][30:36] == "111011"):
                    mark_dict[index_d][1] = "1 111011 000000 000000 000000 000000"
    except Exception:
        pass

    #print("mark1", mark_dict)

    # 8. 只有一个意思的词，含有V/adj在内的多重词性，但本句中除它以外没动词，选为v/adj
    flag_v = 0
    flag_adj = 0
    index_d = 0

    try:
        for i in duplicate_dict:
            index_d = int(i[1])
            if i[0][1][2:8] == "000001":
                for j in mark_dict:
                    if i[0] != j and j[1][2:8] not in ["000001", "000101"]:
                        flag_v +=1
                    if flag_v == len(mark_dict) - 1:
                        mark_dict[index_d][1] = "1 000001 000000 000000 000000 000000"
                break
            elif i[0][1][2:8] == "000101" or i[0][1][9:15] == "000101" or i[0][1][16:22] == "000101" or i[0][1][23:29] == "000101" or i[0][1][30:36] == "000101":
                for k in mark_dict:
                    if i[0] != k and k[1][2:8] not in ["000001", "000101"]:
                        flag_adj +=1
                    if flag_adj == len(mark_dict) - 1:
                        mark_dict[index_d][1] = "1 000101 000000 000000 000000 000000"
                break
    except Exception:
        pass

    #print("mark_dict_c2", mark_dict)

    mark_dict_backup = copy.deepcopy(mark_dict)

def Treat_adj():
    global mark_dict
    global index_adj_ap_n_de
    global index_adj_ap_n_end
    global index_adj_should
    global index_adj_should_end
    global index_adj_v
    global index_adj_v_end
    global index_adj_np_v
    global index_adj_np_v_end
    global index_adj_number
    global index_adj_tp
    global index_adj_tp_end
    global index_adj_double
    global index_adj_and
    global index_adj_and_v
    global index_adj_belong
    global index_adj_belong_end
    global index_adj_de_single
    global index_adj_connected
    global index_adj_connected_complex
    global index_adj_connected_complex_start
    global index_adj_n_1
    global index_adj_between
    global index_adj_between_end
    global index_prep
    global index_prep_end

    global main_structure_dict_adj
    global adj_ap_n_de_dict
    global adj_should_dict
    global adj_v_dict
    global adj_np_v_dict
    global adj_number_dict
    global adj_tp_dict
    global adj_double_dict
    global adj_and_dict
    global adj_and_v_dict
    global adj_belong_dict
    global adj_de_single_dict
    global adj_connected_dict
    global adj_connected_complex_dict
    global adj_n_1_dict
    global adj_between_dict
    global adj_prep_dict
    global adj
    global adj_begin_dict
    global adj_be_de_dict
    global adj_note_dict

    adj_ap_n_de_dict_0 = []
    adj_should_dict_0 = []
    adj_v_dict_0 = []
    adj_np_v_dict_0 = []
    adj_number_dict_0 = []
    adj_tp_dict_0 = []
    adj_double_dict_0 = []
    adj_and_dict_0 = []
    adj_and_v_dict_0 = []
    adj_belong_dict_0 = []
    adj_de_single_dict_0 = []
    adj_connected_dict_0 = []
    adj_connected_complex_dict_0 = []
    adj_prep_dict_0 = []
    adj_between_dict_0 = []

    count_dictlen = 0
    index_j = 0
    step = 1
    a = 0
    flag_empty_content = 0

    main_structure_dict_adj = copy.deepcopy(mark_dict)
    #print("main_structure_dict_adj", main_structure_dict_adj)

    #1.处理标点
    try:
        for i in main_structure_dict_adj:
            if i[0][3::] in dot_dict:
                main_structure_dict_adj.remove(i)
    except Exception:
        pass

    main_structure_dict_adj_backup = copy.deepcopy(main_structure_dict_adj)
    #print("main_structure_dict_adj", main_structure_dict_adj)

    #2.处理“是...的”+ n 结构的定语
    adj_be_de_dict_0 = []
    index_adj_be_de = 0
    index_adj_be_de_end = 0
    index_content = []
    adj_be_de_collection = []
    adj_be_de_collection_1 = []
    try:
        for i in main_structure_dict_adj:
            index_adj_be_de = main_structure_dict_adj.index(i)
            if(i[1][2:8] == "000001" or i[1][9:15] == "000001" or i[1][16:22] == "000001" or i[1][23:29] == "000001" or i[1][30:36] == "000001"):
                adj_be_de_dict_0 = main_structure_dict_adj[index_adj_be_de+1::]
                break
    except Exception:
        pass

    #print("adj_be_de_dict_0", adj_be_de_dict_0)

    count_dictlen = len(adj_be_de_dict_0)

    try:
        for i in adj_be_de_dict_0:
            index_adj_be_de_end = adj_be_de_dict_0.index(i)
            if (i[0][3::] == "的" or i[0][3::] == "之") and (adj_be_de_dict_0[index_adj_be_de_end] != adj_be_de_dict_0[0]) and (adj_be_de_dict_0[index_adj_be_de_end + 1][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                         adj_be_de_dict_0[index_adj_be_de_end + 1][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                         adj_be_de_dict_0[index_adj_be_de_end + 1][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                         adj_be_de_dict_0[index_adj_be_de_end + 1][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                         adj_be_de_dict_0[index_adj_be_de_end + 1][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]):
                adj_be_de_dict = adj_be_de_dict_0[0:index_adj_be_de_end + 1]
                for g in adj_be_de_dict:
                    adj_be_de_collection.append(g)
                index_content = adj_be_de_dict[-1]
                if adj_be_de_dict != []:
                    index_adj = mark_dict.index(index_content)
                    adj_be_de_dict.append(index_adj)
                    adj.append(adj_be_de_dict)
                    flag_empty_content += 1
                #print("1",index_content)
    except Exception:
        pass

    for i in adj_be_de_collection:
        if i not in adj_be_de_collection_1:
            adj_be_de_collection_1.append(i) #去重

    try:
        if len(adj_be_de_dict) == count_dictlen and flag_empty_content == 0:
            adj_be_de_dict = []

        if len(adj_be_de_dict) != 0:
            for i in adj_be_de_dict:
                for j in main_structure_dict_adj:
                    if i[0][3::] == j[0][3::] and i!=j and i[1][0] == j[1][0]:
                        main_structure_dict_adj.remove(j)
    except Exception:
        pass

    try:
        if len(adj_be_de_dict) != 0 and len(adj_be_de_dict[0]) == 2:
            main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_be_de_collection_1]
        elif len(adj_be_de_dict) != 0 and len(adj_be_de_dict[0]) != 2:
            adj_be_de_dict = [adj_be_de_dict]
            main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_be_de_collection_1]
    except Exception:
        pass

    if len(adj) == 0:
        main_structure_dict_adj = copy.deepcopy(main_structure_dict_adj_backup)

    flag_empty_content = 0

    #print("d2", adj_be_de_dict)
    #print("1adj", adj)
    #print("2", main_structure_dict_adj)

    #2.1处理adj/proun + n/adj + "的/之"结构的定语
    index_content = []
    index_adj = 0
    adj_ap_n_de_collection = []
    adj_ap_n_de_collection_1 = []
    try:
        for i in main_structure_dict_adj:
            index_adj_ap_n_de = main_structure_dict_adj.index(i)
            if (i[1][2:8] == "000100" or i[1][9:15] == "000100" or i[1][23:29] == "000100" or
                    i[1][30:36] == "000100") and (
                    main_structure_dict_adj[index_adj_ap_n_de +1][1][2:8] not in ["000001", "110011", "000101"] and
                    main_structure_dict_adj[index_adj_ap_n_de +1][1][9:15] not in ["000001", "110011", "000101"] and
                    main_structure_dict_adj[index_adj_ap_n_de +1][1][16:22] not in ["000001", "110011", "000101"] and
                    main_structure_dict_adj[index_adj_ap_n_de +1][1][23:29] not in ["000001", "110011", "000101"] and
                    main_structure_dict_adj[index_adj_ap_n_de +1][1][30:36] not in ["000001", "110011", "000101"]):
                adj_ap_n_de_dict_0 = main_structure_dict_adj[index_adj_ap_n_de::]
                for j in main_structure_dict_adj:   #将重复的词性标注改为NnN
                    index_j = main_structure_dict_adj.index(j)
                    if j[0][3::] == i[0][3::] and i != j and i[1][0] == j[1][0]:
                        main_structure_dict_adj[index_j] = "NaN"
                if main_structure_dict_adj[index_adj_ap_n_de - step][0][3::] == "到":
                    for j in main_structure_dict_adj[0:index_adj_ap_n_de - step]: #给重复词“到”标注为NaN
                        index_j = main_structure_dict_adj.index(j)
                        if (j[0][3::] == "到") and (j[1][2:8] != "110011" or j[1][9:15] != "110011" or j[1][16:22] != "110011" or j[1][23:29] != "110011" or j[1][30:36] != "110011"):
                            main_structure_dict_adj[index_j] = "NaN"
                            step += 1
                        else:
                            step += 1
                    if (main_structure_dict_adj[index_adj_ap_n_de - step][1][2:8] == "000001" or
                        main_structure_dict_adj[index_adj_ap_n_de - step][1][9:15] == "000001" or
                        main_structure_dict_adj[index_adj_ap_n_de - step][1][16:22] == "000001" or
                        main_structure_dict_adj[index_adj_ap_n_de - step][1][23:29] == "000001" or
                        main_structure_dict_adj[index_adj_ap_n_de - step][1][30:36] == "000001" or
                        main_structure_dict_adj[index_adj_ap_n_de - step][0][3::] in ["关系", "涉及", "波及", "遍及"]):
                        adj_ap_n_de_dict_0 = main_structure_dict_adj[index_adj_ap_n_de-step::]
                        #print("到1", adj_ap_n_de_dict)
                        break
                elif main_structure_dict_adj[index_adj_ap_n_de - step] == "NaN":
                    step += 1
                    if main_structure_dict_adj[index_adj_ap_n_de - step][0][3::] == "到":
                        for j in main_structure_dict_adj[0:index_adj_ap_n_de - step]:  # 给重复词“到”标注为NaN
                            index_j = main_structure_dict_adj.index(j)
                            if (j[0][3::] == "到") and (
                                    j[1][2:8] != "110011" or j[1][9:15] != "110011" or j[1][16:22] != "110011" or j[1][23:29] != "110011" or j[1][30:36] != "110011"):
                                main_structure_dict_adj[index_j] = "NaN"
                                step += 1
                            else:
                                step += 1
                        if (main_structure_dict_adj[index_adj_ap_n_de - step][1][2:8] == "000001" or
                                main_structure_dict_adj[index_adj_ap_n_de - step][1][9:15] == "000001" or
                                main_structure_dict_adj[index_adj_ap_n_de - step][1][16:22] == "000001" or
                                main_structure_dict_adj[index_adj_ap_n_de - step][1][23:29] == "000001" or
                                main_structure_dict_adj[index_adj_ap_n_de - step][1][30:36] == "000001" or
                                main_structure_dict_adj[index_adj_ap_n_de - step][0][3::] in ["关系", "涉及", "波及", "遍及"]):
                            adj_ap_n_de_dict_0 = main_structure_dict_adj[index_adj_ap_n_de - step::]
                            #print("到2", adj_ap_n_de_dict)
                            break
                    elif main_structure_dict_adj[index_adj_ap_n_de - step] == "NaN":
                        step +=1
                        if main_structure_dict_adj[index_adj_ap_n_de - step][0][3::] == "到":
                            for j in main_structure_dict_adj[0:index_adj_ap_n_de - step]:  # 给重复词“到”标注为NaN
                                index_j = main_structure_dict_adj.index(j)
                                if (j[0][3::] == "到") and (
                                        j[1][2:8] != "110011" or j[1][9:15] != "110011" or j[1][16:22] != "110011" or j[1][23:29] != "110011" or
                                        j[1][30:36] != "110011"):
                                    main_structure_dict_adj[index_j] = "NaN"
                                    step += 1
                                else:
                                    step += 1
                            if (main_structure_dict_adj[index_adj_ap_n_de - step][1][2:8] == "000001" or
                                    main_structure_dict_adj[index_adj_ap_n_de - step][1][9:15] == "000001" or
                                    main_structure_dict_adj[index_adj_ap_n_de - step][1][16:22] == "000001" or
                                    main_structure_dict_adj[index_adj_ap_n_de - step][1][23:29] == "000001" or
                                    main_structure_dict_adj[index_adj_ap_n_de - step][1][30:36] == "000001" or
                                    main_structure_dict_adj[index_adj_ap_n_de - step][0][3::] in ["关系", "涉及", "波及", "遍及"]):
                                adj_ap_n_de_dict_0 = main_structure_dict_adj[index_adj_ap_n_de - step::]
                                #print("到3", adj_ap_n_de_dict)
                                break
                if main_structure_dict_adj[index_adj_ap_n_de - step][0][3::] in ["关系", "涉及", "事关", "关乎"]:
                    adj_ap_n_de_dict_0 = main_structure_dict_adj[index_adj_ap_n_de - step::]
                    step += 1
                    for j in main_structure_dict_adj[::index_adj_ap_n_de - step]:
                        index_j = main_structure_dict_adj.index(j)
                        if j[0][3::] in ["关系", "涉及", "事关", "关乎"] and j[1][2:8] != "110011" or j[1][9:15] != "110011" or j[1][16:22] != "110011" or j[1][23:29] != "110011" or j[1][30:36] != "110011":
                            main_structure_dict_adj[index_j] = "NaN"
                    #print("事关", adj_ap_n_de_dict)
                    break

    except Exception:
        pass

    for i in main_structure_dict_adj:
        if i == "NaN":
            main_structure_dict_adj.remove(i)

    for i in adj_ap_n_de_dict_0:
        if i == "NaN":
            adj_ap_n_de_dict_0.remove(i)

    count_dictlen = len(adj_ap_n_de_dict_0)

    #print("adj_ap_n_de_dict_0", adj_ap_n_de_dict_0)

    try:
        for i in adj_ap_n_de_dict_0:
            index_adj_ap_n_end = adj_ap_n_de_dict.index(i)
            if (i[0][3::] in ["的", "之"]) and (adj_ap_n_de_dict_0[index_adj_ap_n_end + 1][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 1][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 1][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 1][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 1][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]):
                adj_ap_n_de_dict = adj_ap_n_de_dict_0[0:index_adj_ap_n_end + 1]
                for g in adj_ap_n_de_dict:
                    adj_ap_n_de_collection.append(g)
                index_content = adj_ap_n_de_dict[-1]
                if adj_ap_n_de_dict != []:
                    index_adj = mark_dict.index(index_content)
                    adj_ap_n_de_dict.append(index_adj)
                    adj.append(adj_ap_n_de_dict)
                    flag_empty_content += 1
                #print("1")
            elif (i[0][3::] in ["的", "之"]) and (
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 1][1][2:8] in ["000100", "000101"] or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 1][1][9:15] in ["000100", "000101"] or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 1][1][16:22] in ["000100", "000101"] or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 1][1][23:29] in ["000100", "000101"] or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 1][1][30:36] in ["000100", "000101"]) \
                    and (adj_ap_n_de_dict_0[index_adj_ap_n_end + 2][1][2:8] in ["110000", "000011"] or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 2][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 2][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 2][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 2][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]):
                adj_ap_n_de_dict = adj_ap_n_de_dict_0[0:index_adj_ap_n_end + 2]
                for g in adj_ap_n_de_dict:
                    adj_ap_n_de_collection.append(g)
                index_content = adj_ap_n_de_dict[-1]
                if adj_ap_n_de_dict != []:
                    index_adj = mark_dict.index(index_content)
                    adj_ap_n_de_dict.append(index_adj)
                    adj.append(adj_ap_n_de_dict)
                    flag_empty_content += 1
                #print("2")
            elif (i[0][3::] in ["的", "之"]) and (
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 1][1][2:8] == "000100" or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 1][1][9:15] == "000100" or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 1][1][16:22] == "000100" or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 1][1][23:29] == "000100" or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 1][1][30:36] == "000100") \
                    and (adj_ap_n_de_dict_0[index_adj_ap_n_end + 2][1][2:8] == "000010" or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 2][1][9:15] == "000010" or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 2][1][16:22] == "000010" or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 2][1][23:29] == "000010" or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 2][1][30:36] == "000010") and (
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 2][1][2:8] in ["110000", "000011"] or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 3][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 3][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 3][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 3][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]):
                adj_ap_n_de_dict = adj_ap_n_de_dict_0[0:index_adj_ap_n_end + 3]
                for g in adj_ap_n_de_dict:
                    adj_ap_n_de_collection.append(g)
                index_content = adj_ap_n_de_dict[-1]
                if adj_ap_n_de_dict != []:
                    index_adj = mark_dict.index(index_content)
                    adj_ap_n_de_dict.append(index_adj)
                    adj.append(adj_ap_n_de_dict)
                    flag_empty_content += 1
                #print("3")
            elif (i[0][3::] in ["的", "之"]) and (
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 1][1][2:8] == "000100" or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 1][1][9:15] == "000100" or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 1][1][16:22] == "000100" or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 1][1][23:29] == "000100" or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 1][1][30:36] == "000100") \
                    and (adj_ap_n_de_dict_0[index_adj_ap_n_end + 2][1][2:8] == "000010" or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 2][1][9:15] == "000010" or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 2][1][16:22] == "000010" or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 2][1][23:29] == "000010" or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 2][1][30:36] == "000010") and (
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 3][1][2:8] == "000010" or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 3][1][9:15] == "000011" or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 3][1][16:22] == "000011" or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 3][1][23:29] == "000011" or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 3][1][30:36] == "000011") and (
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 4][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 4][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 4][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 4][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_ap_n_de_dict_0[index_adj_ap_n_end + 4][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]):
                adj_ap_n_de_dict = adj_ap_n_de_dict_0[0:index_adj_ap_n_end + 4]
                for g in adj_ap_n_de_dict:
                    adj_ap_n_de_collection.append(g)
                index_content = adj_ap_n_de_dict[-1]
                if adj_ap_n_de_dict != []:
                    index_adj = mark_dict.index(index_content)
                    adj_ap_n_de_dict.append(index_adj)
                    adj.append(adj_ap_n_de_dict)
                    adj.append(adj_ap_n_de_dict)
                    flag_empty_content += 1
                #print("4")
            # 如果有“的”或“之”随后，且后面为名/代/时间地点词，或adj/proun + 名/代/时间地点词, 或proun + number + count +名/代/时间地点词, 则整个部分作为定语
    except Exception:
        pass

    step = 1

    try:
        if len(adj_ap_n_de_dict) == count_dictlen and flag_empty_content == 0:
            adj_ap_n_de_dict = []
            # 如果找不到“的”和“之”，则清空这个定语字典, main_structure_dict_adj恢复

        if len(adj_ap_n_de_dict) != 0:
            for i in adj_ap_n_de_dict:
                for j in main_structure_dict_adj:
                    if i[0][3::] == j[0][3::] and i!=j and i[1][0] == j[1][0]:
                        main_structure_dict_adj.remove(j)
    except Exception:
        pass

    for i in adj_ap_n_de_collection:
        if i not in adj_ap_n_de_collection_1:
            adj_ap_n_de_collection_1.append(i)

    try:
        for i in adj_ap_n_de_dict:
            if i[0][3::] in ["远比", "比"]:
                adj_ap_n_de_dict = []
                main_structure_dict_adj = copy.deepcopy(mark_dict)

        if len(adj_ap_n_de_dict) != 0 and len(adj_ap_n_de_dict[0]) == 2:
            main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_ap_n_de_collection_1]
        elif len(adj_ap_n_de_dict) != 0 and len(adj_ap_n_de_dict[0]) != 2:
            adj_ap_n_de_dict = [adj_ap_n_de_dict]
            main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_ap_n_de_collection_1]

    except Exception:
        pass

    if len(adj) == 0:
        main_structure_dict_adj = copy.deepcopy(main_structure_dict_adj_backup)

    flag_empty_content = 0

    #print("d2.1", adj_ap_n_de_dict)
    #print("2adj", adj)
    #print("2", main_structure_dict_adj)

    # 3.处理“本应”+ "的/之"结构的定语
    index_content = []
    index_adj = 0
    adj_should_collection = []
    adj_should_collection_1 = []
    try:
        for i in main_structure_dict_adj:
            if i[0][3::] in ["本应", "本应该", "本该", "应", "应该", "本来", "原来", "原先", "从前"]:
                index_adj_should = main_structure_dict_adj.index(i)
                adj_should_dict_0 = main_structure_dict_adj[index_adj_should::]
                break
             # 确定“本应”等以后覆盖的部分
    except Exception:
        pass

    count_dictlen = len(adj_should_dict_0)

    try:
        for i in adj_should_dict_0:
            index_adj_should_end = adj_should_dict.index(i)
            if i[0][3::] == "的" or i[0][3::] == "之" \
                    and (adj_should_dict_0[index_adj_should_end + 1][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                         adj_should_dict_0[index_adj_should_end + 1][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                         adj_should_dict_0[index_adj_should_end + 1][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                         adj_should_dict_0[index_adj_should_end + 1][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                         adj_should_dict_0[index_adj_should_end + 1][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]):
                adj_should_dict = adj_should_dict_0[0:index_adj_should_end + 1]
                for g in adj_should_dict:
                    adj_should_collection.append(g)
                index_content = adj_should_dict[-1]
                if adj_should_dict != []:
                    index_adj = mark_dict.index(index_content)
                    adj_should_dict.append(index_adj)
                    adj.append(adj_should_dict)
                    flag_empty_content += 1
            elif (i[0][3::] == "的" or i[0][3::] == "之") and (
                    adj_should_dict_0[index_adj_should_end + 1][1][2:8] in ["000100", "000101"] or
                    adj_should_dict_0[index_adj_should_end + 1][1][9:15] in ["000100", "000101"] or
                    adj_should_dict_0[index_adj_should_end + 1][1][16:22] in ["000100", "000101"] or
                    adj_should_dict_0[index_adj_should_end + 1][1][23:29] in ["000100", "000101"] or
                    adj_should_dict_0[index_adj_should_end + 1][1][30:36] in ["000100", "000101"]) \
                 and (adj_should_dict_0[index_adj_should_end + 2][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_should_dict_0[index_adj_should_end + 2][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_should_dict_0[index_adj_should_end + 2][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_should_dict_0[index_adj_should_end + 2][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_should_dict_0[index_adj_should_end + 2][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]):
                adj_should_dict = adj_should_dict_0[0:index_adj_should_end + 2]
                for g in adj_should_dict:
                    adj_should_collection.append(g)
                index_content = adj_should_dict[-1]
                if adj_should_dict != []:
                    index_adj = mark_dict.index(index_content)
                    adj_should_dict.append(index_adj)
                    adj.append(adj_should_dict)
                    flag_empty_content += 1
            elif (i[0][3::] == "的" or i[0][3::] == "之") and (
                    adj_should_dict_0[index_adj_should_end + 1][1][2:8] == "000100" or
                    adj_should_dict_0[index_adj_should_end + 1][1][9:15] == "000100" or
                    adj_should_dict_0[index_adj_should_end + 1][1][16:22] == "000100" or
                    adj_should_dict_0[index_adj_should_end + 1][1][23:29] == "000100" or
                    adj_should_dict_0[index_adj_should_end + 1][1][30:36] == "000100") \
                 and (adj_should_dict_0[index_adj_should_end + 2][1][2:8] == "000010" or
                    adj_should_dict_0[index_adj_should_end + 2][1][16:22] == "000010" or
                    adj_should_dict_0[index_adj_should_end + 2][1][23:29] == "000010" or
                    adj_should_dict_0[index_adj_should_end + 2][1][30:36] == "000010") and (
                    adj_should_dict_0[index_adj_should_end + 2][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_should_dict_0[index_adj_should_end + 3][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_should_dict_0[index_adj_should_end + 3][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_should_dict_0[index_adj_should_end + 3][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_should_dict_0[index_adj_should_end + 3][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]):
                adj_should_dict = adj_should_dict_0[0:index_adj_should_end + 3]
                for g in adj_should_dict:
                    adj_should_collection.append(g)
                index_content = adj_should_dict[-1]
                if adj_should_dict != []:
                    index_adj = mark_dict.index(index_content)
                    adj_should_dict.append(index_adj)
                    adj.append(adj_should_dict)
                    flag_empty_content += 1
            elif (i[0][3::] == "的" or i[0][3::] == "之") and (
                    adj_should_dict_0[index_adj_ap_n_end + 1][1][2:8] == "000100" or
                    adj_should_dict_0[index_adj_ap_n_end + 1][1][9:15] == "000100" or
                    adj_should_dict_0[index_adj_ap_n_end + 1][1][16:22] == "000100" or
                    adj_should_dict_0[index_adj_ap_n_end + 1][1][23:29] == "000100" or
                    adj_should_dict_0[index_adj_ap_n_end + 1][1][30:36] == "000100") \
                 and (adj_should_dict_0[index_adj_ap_n_end + 2][1][2:8] == "000010" or
                    adj_should_dict_0[index_adj_ap_n_end + 2][1][9:15] == "000010" or
                    adj_should_dict_0[index_adj_ap_n_end + 2][1][16:22] == "000010" or
                    adj_should_dict_0[index_adj_ap_n_end + 2][1][23:29] == "000010" or
                    adj_should_dict_0[index_adj_ap_n_end + 2][1][30:36] == "000010") and (
                    adj_should_dict_0[index_adj_ap_n_end + 3][1][2:8] == "000010" or
                    adj_should_dict_0[index_adj_ap_n_end + 3][1][9:15] == "000011" or
                    adj_should_dict_0[index_adj_ap_n_end + 3][1][16:22] == "000011" or
                    adj_should_dict_0[index_adj_ap_n_end + 3][1][23:29] == "000011" or
                    adj_should_dict_0[index_adj_ap_n_end + 3][1][30:36] == "000011") and (
                    adj_should_dict_0[index_adj_ap_n_end + 4][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_should_dict_0[index_adj_ap_n_end + 4][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_should_dict_0[index_adj_ap_n_end + 4][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_should_dict_0[index_adj_ap_n_end + 4][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_should_dict_0[index_adj_ap_n_end + 4][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]):
                adj_should_dict = adj_should_dict_0[0:index_adj_should_end + 4]
                for g in adj_should_dict:
                    adj_should_collection.append(g)
                index_content = adj_should_dict[-1]
                if adj_should_dict != []:
                    index_adj = mark_dict.index(index_content)
                    adj_should_dict.append(index_adj)
                    adj.append(adj_should_dict)
                    flag_empty_content += 1
        # 如果有“的”或“之”随后，且后面为名/代/时间地点词，或adj/proun + 名/代/时间地点词, 或proun + number + count +名/代/时间地点词, 则整个部分作为定
    except Exception:
        pass

    try:
        if len(adj_should_dict) == count_dictlen and flag_empty_content == 0:
            adj_should_dict = []
            # 如果找不到“的”和“之”，则清空这个定语字典

        if len(adj_should_dict) != 0:
            for i in adj_should_dict:
                for j in main_structure_dict_adj:
                    if i[0][3::] == j[0][3::] and i!=j and i[1][0] == j[1][0]:
                        main_structure_dict_adj.remove(j)
    except Exception:
        pass

    for i in adj_should_dict:
        if i not in adj_should_collection_1:
            adj_should_collection_1.append(i)

    if len(adj_should_dict) != 0 and len(adj_should_dict[0]) == 2:
        main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_should_collection_1]
    elif len(adj_should_dict) != 0 and len(adj_should_dict[0]) != 2:
        adj_should_dict = [adj_should_dict]
        main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_should_collection_1]

    if len(adj) == 0:
        main_structure_dict_adj = copy.deepcopy(main_structure_dict_adj_backup)

    flag_empty_content = 0

    #print("d3", adj_should_dict)
    #print("3adj", adj)
    #print("3", main_structure_dict_adj)

    # 4.处理 v+"的/之"结构的定语，或补+"的/之"结构的定语
    index_content = []
    index_adj = 0
    adj_v_collection = []
    adj_v_collection_1 = []
    try:
        for i in main_structure_dict_adj:
            if (i[1][2:8] == "000001" or i[1][9:15] == "000001" or i[1][23:29] == "000001" or
                  i[1][30:36] == "000001") and i[0][3::] not in ["下来", "起来", "出来", "下去", "过来", "过去", "出来", "出去"]:
                index_adj_v = main_structure_dict_adj.index(i)
                for j in main_structure_dict_adj[index_adj_v::]:  # 将重复的词性标注改为NaN
                    index_j = main_structure_dict_adj.index(j)
                    if j[0][3::] == i[0][3::] and i!=j:
                        main_structure_dict_adj[index_j] = "NaN"
                        step += 1
                if (main_structure_dict_adj[index_adj_v + step][0][3::] in ["的", "之"]):
                    adj_v_dict_0 = main_structure_dict_adj[index_adj_v:index_adj_v + step + 1]
                    #print("adj", adj_v_dict)
                    break
    except Exception:
        pass

    step = 1

    try:
        for i in adj_v_dict_0:
            if (i[1][2:8] == "000001" or i[1][9:15] == "000001" or i[1][23:29] == "000001" or
                    i[1][30:36] == "000001") and i[0][3::] not in ["下来", "起来", "出来", "下去", "过来", "过去", "出来", "出去"]:
                index_adj_v = main_structure_dict_adj.index(i)
                #print("苟活第一部分index", index_adj_v)
                for j in adj_v_dict_0[index_adj_v::]:  # 将重复的词性标注改为NaN
                    index_j = adj_v_dict_0.index(j)
                    if j[0][3::] == i[0][3::] and i!=j:
                        adj_v_dict_0[index_j] = "NaN"
                        step += 1
                if (adj_v_dict_0[index_adj_v + step][1][2:8] == "000110" or
                    adj_v_dict_0[index_adj_v + step][1][9:15] == "000110" or
                    adj_v_dict_0[index_adj_v + step][1][16:22] == "000110" or
                    adj_v_dict_0[index_adj_v + step][1][23:29] == "000110" or
                    adj_v_dict_0[index_adj_v + step][1][30:36] == "000110") and (
                        adj_v_dict_0[index_adj_v-1][1][2:8] not in ["000111", "000100", "010111"] and
                        adj_v_dict_0[index_adj_v-1][1][9:15] not in ["000111", "000100", "010111"] and
                        adj_v_dict_0[index_adj_v-1][1][16:22] not in ["000111", "000100", "010111"] and
                        adj_v_dict_0[index_adj_v-1][1][23:29] not in ["000111", "000100", "010111"] and
                        adj_v_dict_0[index_adj_v-1][1][30:36] not in ["000111", "000100", "010111"]):
                    adj_v_dict = adj_v_dict_0[index_adj_v::]
                    for g in adj_v_dict:
                        adj_v_collection.append(g)
                    index_content = adj_v_dict[-1]
                    if adj_v_dict != []:
                        index_adj = mark_dict.index(index_content)
                        adj_v_dict.append(index_adj)
                        adj.append(adj_v_dict)
                    break
                elif (adj_v_dict_0[index_adj_v + step][1][2:8] == "000110" or
                    adj_v_dict_0[index_adj_v + step][1][9:15] == "000110" or
                    adj_v_dict_0[index_adj_v + step][1][16:22] == "000110" or
                    adj_v_dict_0[index_adj_v + step][1][23:29] == "000110" or
                    adj_v_dict_0[index_adj_v + step][1][30:36] == "000110") or (
                        adj_v_dict_0[index_adj_v + step +1][1][2:8] == "000110" or
                        adj_v_dict_0[index_adj_v + step +1][1][9:15] == "000110" or
                        adj_v_dict_0[index_adj_v + step +1][1][16:22] == "000110" or
                        adj_v_dict_0[index_adj_v + step +1][1][23:29] == "000110" or
                        adj_v_dict_0[index_adj_v + step +1][1][30:36] == "000110") and (
                        adj_v_dict_0[index_adj_v-1][1][2:8] not in ["000111", "000100", "010111"] and
                        adj_v_dict_0[index_adj_v-1][1][9:15] not in ["000111", "000100", "010111"] and
                        adj_v_dict_0[index_adj_v-1][1][16:22] not in ["000111", "000100", "010111"] and
                        adj_v_dict_0[index_adj_v-1][1][23:29] not in ["000111", "000100", "010111"] and
                        adj_v_dict_0[index_adj_v-1][1][30:36] not in ["000111", "000100", "010111"]):
                    adj_v_dict = adj_v_dict_0[index_adj_v::]
                    for g in adj_v_dict:
                        adj_v_collection.append(g)
                    index_content = adj_v_dict[-1]
                    if adj_v_dict != []:
                        index_adj = mark_dict.index(index_content)
                        adj_v_dict.append(index_adj)
                        adj.append(adj_v_dict)
                    break
            # 确定v以后覆盖的部分
    except Exception:
        pass

    for i in main_structure_dict_adj:
        if i == "NaN":
            main_structure_dict_adj.remove(i)

    for i in adj_v_dict:
        if i == "NaN":
            adj_v_dict.remove(i)

    count_dictlen = len(adj_v_dict_0)

    try:
        for i in adj_v_dict_0:
            index_adj_v_end = adj_v_dict.index(i)
            if i[0][3::] == "的" or i[0][3::] == "之" \
                    and (adj_v_dict_0[index_adj_v_end + 1][1][2:8] in ["000111", "000100", "110000"] or
                    adj_v_dict_0[index_adj_v_end + 1][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_v_dict_0[index_adj_v_end + 1][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_v_dict_0[index_adj_v_end + 1][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_v_dict_0[index_adj_v_end + 1][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]):
                adj_v_dict = adj_v_dict_0[index_adj_v:index_adj_v_end + 1]
                for g in adj_v_dict:
                    adj_v_collection.append(g)
                index_content = adj_v_dict[-1]
                if adj_v_dict:
                    index_adj = mark_dict.index(index_content)
                    adj_v_dict.append(index_adj)
                    adj.append(adj_v_dict)
                    flag_empty_content += 1
            elif (i[0][3::] == "的" or i[0][3::] == "之") and (
                    adj_v_dict_0[index_adj_v_end + 1][1][2:8] in ["000100", "000101"] or
                    adj_v_dict_0[index_adj_v_end + 1][1][9:15] in ["000100", "000101"] or
                    adj_v_dict_0[index_adj_v_end + 1][1][16:22] in ["000100", "000101"] or
                    adj_v_dict_0[index_adj_v_end + 1][1][23:29] in ["000100", "000101"] or
                    adj_v_dict_0[index_adj_v_end + 1][1][30:36] in ["000100", "000101"]) \
                 and (adj_v_dict_0[index_adj_v_end + 2][1][2:8] in ["110000", "000011"] or
                    adj_v_dict_0[index_adj_v_end + 2][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_v_dict_0[index_adj_v_end + 2][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_v_dict_0[index_adj_v_end + 2][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_v_dict_0[index_adj_v_end + 2][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]):
                adj_v_dict = adj_v_dict_0[0:index_adj_v_end + 2]
                for g in adj_v_dict:
                    adj_v_collection.append(g)
                index_content = adj_v_dict[-1]
                if adj_v_dict:
                    index_adj = mark_dict.index(index_content)
                    adj_v_dict.append(index_adj)
                    adj.append(adj_v_dict)
                    flag_empty_content += 1
            elif (i[0][3::] == "的" or i[0][3::] == "之") and (
                    adj_v_dict_0[index_adj_v_end + 1][1][2:8] == "000100" or
                    adj_v_dict_0[index_adj_v_end + 1][1][9:15] == "000100" or
                    adj_v_dict_0[index_adj_v_end + 1][1][16:22] == "000100" or
                    adj_v_dict_0[index_adj_v_end + 1][1][23:29] == "000100" or
                    adj_v_dict_0[index_adj_v_end + 1][1][30:36] == "000100") \
                 and (adj_v_dict_0[index_adj_v_end + 2][1][2:8] == "000010" or
                    adj_v_dict_0[index_adj_v_end + 2][1][9:15] == "000010" or
                    adj_v_dict_0[index_adj_v_end + 2][1][16:22] == "000010" or
                    adj_v_dict_0[index_adj_v_end + 2][1][23:29] == "000010" or
                    adj_v_dict_0[index_adj_v_end + 2][1][30:36] == "000010") and (
                    adj_v_dict_0[index_adj_v_end + 2][1][2:8] in["000111", "000100", "110000", "111011", "010111"] or
                    adj_v_dict_0[index_adj_v_end + 3][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_v_dict_0[index_adj_v_end + 3][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_v_dict_0[index_adj_v_end + 3][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_v_dict_0[index_adj_v_end + 3][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]):
                adj_v_dict = adj_v_dict_0[index_adj_v:index_adj_v_end + 4]
                for g in adj_v_dict:
                    adj_v_collection.append(g)
                index_content = adj_v_dict[-1]
                if adj_v_dict:
                    index_adj = mark_dict.index(index_content)
                    adj_v_dict.append(index_adj)
                    adj.append(adj_v_dict)
                    flag_empty_content += 1
            elif (i[0][3::] == "的" or i[0][3::] == "之") and (
                    adj_v_dict_0[index_adj_v_end + 1][1][2:8] == "000100" or
                    adj_v_dict_0[index_adj_v_end + 1][1][9:15] == "000100" or
                    adj_v_dict_0[index_adj_v_end + 1][1][16:22] == "000100" or
                    adj_v_dict_0[index_adj_v_end + 1][1][23:29] == "000100" or
                    adj_v_dict_0[index_adj_v_end + 1][1][30:36] == "000100") \
                 and (adj_v_dict_0[index_adj_v_end + 2][1][2:8] == "000010" or
                      adj_v_dict_0[index_adj_v_end + 2][1][9:15] == "000010" or
                      adj_v_dict_0[index_adj_v_end + 2][1][16:22] == "000010" or
                      adj_v_dict_0[index_adj_v_end + 2][1][23:29] == "000010" or
                      adj_v_dict_0[index_adj_v_end + 2][1][30:36] == "000010") and (
                      adj_v_dict_0[index_adj_v_end + 3][1][2:8] == "000010" or
                      adj_v_dict_0[index_adj_v_end + 3][1][9:15] == "000011" or
                      adj_v_dict_0[index_adj_v_end + 3][1][16:22] == "000011" or
                      adj_v_dict_0[index_adj_v_end + 3][1][23:29] == "000011" or
                      adj_v_dict_0[index_adj_v_end + 3][1][30:36] == "000011") and (
                      adj_v_dict_0[index_adj_v_end + 4][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                      adj_v_dict_0[index_adj_v_end + 4][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                      adj_v_dict_0[index_adj_v_end + 4][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                      adj_v_dict_0[index_adj_v_end + 4][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                      adj_v_dict_0[index_adj_v_end + 4][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]):
                adj_v_dict = adj_v_dict_0[index_adj_v:index_adj_v_end + 3]
                for g in adj_v_dict:
                    adj_v_collection.append(g)
                index_content = adj_v_dict[-1]
                if adj_v_dict:
                    index_adj = mark_dict.index(index_content)
                    adj_v_dict.append(index_adj)
                    adj.append(adj_v_dict)
                    flag_empty_content += 1
      # 如果有“的”或“之”随后，且后面为名/代/时间地点词，或adj/proun + 名/代/时间地点词, 或proun + number + count +名/代/时间地点词, 则整个部分作为定语
    except Exception:
        pass

    try:
        if len(adj_v_dict) == count_dictlen and flag_empty_content == 0:
            adj_v_dict = []
            # 如果找不到“的”和“之”，则清空这个定语字典

        if len(adj_v_dict) != 0:
            for i in adj_v_dict:
                for j in main_structure_dict_adj:
                    if i[0][3::] == j[0][3::] and i!=j and i[1][0] == j[1][0]:
                        main_structure_dict_adj.remove(j)

    except Exception:
        pass

    for i in adj_v_collection:
        if i not in adj_v_collection_1:
            adj_v_collection_1.append(i)

    if len(adj_v_dict) != 0 and len(adj_v_dict[0]) == 2:
        main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_v_collection_1]
    elif len(adj_v_dict) != 0 and len(adj_v_dict[0]) != 2:
        adj_v_dict = [adj_v_dict]
        main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_v_collection_1]


    if len(adj) == 0:
        main_structure_dict_adj = copy.deepcopy(main_structure_dict_adj_backup)

    flag_empty_content = 0

    #print("d4", adj_v_dict)
    #print("4adj", adj)
    #print("4", main_structure_dict_adj)

    #4.5 “新入职的员工”、“常光顾老客户”、“刚上床睡觉的我”结构
    index_content = []
    index_adj_v_adj = 0
    adj_v_adj_dict = []
    adj_v_adj_collection = []
    adj_v_adj_collection_1 = []

    try:
        for i in main_structure_dict_adj:
            if i[1][2:8]  == "000001" or i[1][9:15] == "000001" or i[1][16:22] == "000001" or i[1][23:29] == "000001" or i[1][30:36] == "000001":
                index_adj_v_adj = main_structure_dict_adj.index(i)
                if (main_structure_dict_adj[index_adj_v_adj - 1][1][2:8] == "000110" or
                    main_structure_dict_adj[index_adj_v_adj - 1][1][9:15] == "000110" or
                    main_structure_dict_adj[index_adj_v_adj - 1][1][16:22] == "000110" or
                    main_structure_dict_adj[index_adj_v_adj - 1][1][23:29] == "000110" or
                    main_structure_dict_adj[index_adj_v_adj - 1][1][30:36] == "000110"):
                    if (main_structure_dict_adj[index_adj_v_adj + 1][1][2:8] == "000101" or
                    main_structure_dict_adj[index_adj_v_adj + 1][1][9:15] == "000101" or
                    main_structure_dict_adj[index_adj_v_adj + 1][1][16:22] == "000101" or
                    main_structure_dict_adj[index_adj_v_adj + 1][1][23:29] == "000101" or
                    main_structure_dict_adj[index_adj_v_adj + 1][1][30:36] == "000101") and (
                            main_structure_dict_adj[index_adj_v_adj + 2][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                            main_structure_dict_adj[index_adj_v_adj + 2][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                            main_structure_dict_adj[index_adj_v_adj + 2][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                            main_structure_dict_adj[index_adj_v_adj + 2][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                            main_structure_dict_adj[index_adj_v_adj + 2][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]):
                        adj_v_adj_dict = main_structure_dict_adj[index_adj_v_adj-1:index_adj_v_adj + 2]
                        for g in adj_v_adj_dict:
                            adj_v_adj_collection.append(g)
                        index_content = adj_v_adj_dict[-1]
                        if adj_v_adj_dict != []:
                            index_adj = mark_dict.index(index_content)
                            adj_v_adj_dict.append(index_adj)
                            adj.append(adj_v_adj_dict)
                            flag_empty_content += 1
                        #print("1", adj)
                    elif (main_structure_dict_adj[index_adj_v_adj + 1][0][3::] in ["的", "之"]) and (main_structure_dict_adj[index_adj_v_adj + 2][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                            main_structure_dict_adj[index_adj_v_adj + 2][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                            main_structure_dict_adj[index_adj_v_adj + 2][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                            main_structure_dict_adj[index_adj_v_adj + 2][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                            main_structure_dict_adj[index_adj_v_adj + 2][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]):
                        adj_v_adj_dict = main_structure_dict_adj[index_adj_v_adj-1:index_adj_v_adj + 2]
                        for g in adj_v_adj_dict:
                            adj_v_adj_collection.append(g)
                        index_content = adj_v_adj_dict[-1]
                        if adj_v_adj_dict !=[]:
                            index_adj = mark_dict.index(index_content)
                            adj_v_adj_dict.append(index_adj)
                            adj.append(adj_v_adj_dict)
                            flag_empty_content += 1
                        #print("2")
                    elif (main_structure_dict_adj[index_adj_v_adj + 1][1][2:8] == "000001" or
                        main_structure_dict_adj[index_adj_v_adj + 1][1][9:15] == "000001" or
                        main_structure_dict_adj[index_adj_v_adj + 1][1][16:22] == "000001" or
                        main_structure_dict_adj[index_adj_v_adj + 1][1][23:29] == "000001" or
                        main_structure_dict_adj[index_adj_v_adj + 1][1][30:36] == "000001") and (main_structure_dict_adj[index_adj_v_adj + 2][1][2:8] == "000101" or
                        main_structure_dict_adj[index_adj_v_adj + 2][1][9:15] == "000101" or
                        main_structure_dict_adj[index_adj_v_adj + 2][1][16:22] == "000101" or
                        main_structure_dict_adj[index_adj_v_adj + 2][1][23:29] == "000101" or
                        main_structure_dict_adj[index_adj_v_adj + 2][1][30:36] == "000101") and (
                            main_structure_dict_adj[index_adj_v_adj + 3][1][2:8] in ["000111", "110000",
                                                                                     "111011", "010111"] or
                            main_structure_dict_adj[index_adj_v_adj + 3][1][9:15] in ["000111", "110000",
                                                                                      "111011", "010111"] or
                            main_structure_dict_adj[index_adj_v_adj + 3][1][16:22] in ["000111", "110000",
                                                                                       "111011", "010111"] or
                            main_structure_dict_adj[index_adj_v_adj + 3][1][23:29] in ["000111", "110000",
                                                                                       "111011", "010111"] or
                            main_structure_dict_adj[index_adj_v_adj + 3][1][30:36] in ["000111", "110000",
                                                                                       "111011", "010111"]):
                        adj_v_adj_dict = main_structure_dict_adj[index_adj_v_adj - 1:index_adj_v_adj + 3]
                        for g in adj_v_adj_dict:
                            adj_v_adj_collection.append(g)
                        index_content = adj_v_adj_dict[-1]
                        if adj_v_adj_dict != []:
                            index_adj = mark_dict.index(index_content)
                            adj_v_adj_dict.append(index_adj)
                            adj.append(adj_v_adj_dict)
                            flag_empty_content += 1
                        #print("3")
                    elif (main_structure_dict_adj[index_adj_v_adj + 1][1][2:8] == "000001" or
                        main_structure_dict_adj[index_adj_v_adj + 1][1][9:15] == "000001" or
                        main_structure_dict_adj[index_adj_v_adj + 1][1][16:22] == "000001" or
                        main_structure_dict_adj[index_adj_v_adj + 1][1][23:29] == "000001" or
                        main_structure_dict_adj[index_adj_v_adj + 1][1][30:36] == "000001") and (main_structure_dict_adj[index_adj_v_adj + 2][0][3::] in ["的", "之"]) and (
                            main_structure_dict_adj[index_adj_v_adj + 3][1][2:8] in ["000111", "000100", "110000",
                                                                                     "111011", "010111"] or
                            main_structure_dict_adj[index_adj_v_adj + 3][1][9:15] in ["000111", "000100", "110000",
                                                                                      "111011", "010111"] or
                            main_structure_dict_adj[index_adj_v_adj + 3][1][16:22] in ["000111", "000100", "110000",
                                                                                       "111011", "010111"] or
                            main_structure_dict_adj[index_adj_v_adj + 3][1][23:29] in ["000111", "000100", "110000",
                                                                                       "111011", "010111"] or
                            main_structure_dict_adj[index_adj_v_adj + 3][1][30:36] in ["000111", "000100", "110000",
                                                                                       "111011", "010111"]):
                        adj_v_adj_dict = main_structure_dict_adj[index_adj_v_adj - 1:index_adj_v_adj + 3]
                        for g in adj_v_adj_dict:
                            adj_v_adj_collection.append(g)
                        index_content = adj_v_adj_dict[-1]
                        if adj_v_adj_dict != []:
                            index_adj = mark_dict.index(index_content)
                            adj_v_adj_dict.append(index_adj)
                            adj.append(adj_v_adj_dict)
                            flag_empty_content += 1
                        #print("4")
    except Exception:
        pass

    try:
        if flag_empty_content == 0:
            adj_v_adj_dict = []

        if len(adj_v_adj_dict) != 0:
            for i in adj_v_adj_dict:
                for j in main_structure_dict_adj:
                    if i[0][3::] == j[0][3::] and i!=j and i[1][0] == j[1][0]:
                        main_structure_dict_adj.remove(j)
    except Exception:
        pass

    for i in adj_v_adj_collection:
        if i not in adj_v_adj_collection_1:
            adj_v_adj_collection_1.append(g)

    if len(adj_v_adj_dict) != 0 and len(adj_v_adj_dict[0]) == 2:
        main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_v_adj_collection_1]
    elif len(adj_v_adj_dict) != 0 and len(adj_v_adj_dict[0]) != 2:
        adj_v_adj_dict = [adj_v_adj_dict]
        main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_v_adj_collection_1]

    if len(adj) == 0:
        main_structure_dict_adj = copy.deepcopy(main_structure_dict_adj_backup)

    flag_empty_content = 0

    #print("d4.5", adj_v_adj_dict)
    #print("4.5adj", adj)
    #print("4.5", main_structure_dict_adj)

    # 5.处理np + v + "的/之"结构的定
    index_content = []
    index_adj = 0
    adj_np_v_collection = []
    adj_np_v_collection_1 = []
    try:
        for i in main_structure_dict_adj:
            if i[0][3::] in ["的", "之", "滴"]:
                index_adj_np_v = main_structure_dict_adj.index(i)
                if (main_structure_dict_adj[index_adj_np_v - 1][1][2:8] in ["000001", "000101"] or
                    main_structure_dict_adj[index_adj_np_v - 1][1][9:15] in ["000001", "000101"] or
                    main_structure_dict_adj[index_adj_np_v - 1][1][16:22] in ["000001", "000101"] or
                    main_structure_dict_adj[index_adj_np_v - 1][1][23:29] in ["000001", "000101"] or
                    main_structure_dict_adj[index_adj_np_v - 1][1][30:36] in ["000001", "000101"]):
                    if (main_structure_dict_adj[index_adj_np_v-2][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                    main_structure_dict_adj[index_adj_np_v-2][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                    main_structure_dict_adj[index_adj_np_v-2][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                    main_structure_dict_adj[index_adj_np_v-2][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                    main_structure_dict_adj[index_adj_np_v-2][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]) and (main_structure_dict_adj[index_adj_np_v-2][0][3::] not in ["是", "就是", "素"]) and (
                            main_structure_dict_adj[index_adj_np_v - 3][1][2:8] not in ["000111", "000100", "110000", "111011", "010111"] and
                            main_structure_dict_adj[index_adj_np_v - 3][1][9:15] not in ["000111", "000100", "110000", "111011", "010111"] and
                            main_structure_dict_adj[index_adj_np_v - 3][1][16:22] not in ["000111", "000100", "110000", "111011", "010111"] and
                            main_structure_dict_adj[index_adj_np_v - 3][1][23:29] not in ["000111", "000100", "110000", "111011", "010111"] and
                            main_structure_dict_adj[index_adj_np_v - 3][1][30:36] not in ["000111", "000100", "110000", "111011", "010111"]):
                        adj_np_v_dict = main_structure_dict_adj[index_adj_np_v-2:index_adj_np_v+1]
                        for g in adj_np_v_dict:
                            adj_np_v_collection.append(g)
                        index_content = adj_np_v_dict[-1]
                        if adj_np_v_dict != []:
                            index_adj = mark_dict.index(index_content)
                            adj_np_v_dict.append(index_adj)
                            adj.append(adj_np_v_dict)
                            flag_empty_content += 1
                    elif (main_structure_dict_adj[index_adj_np_v-2][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                    main_structure_dict_adj[index_adj_np_v-2][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                    main_structure_dict_adj[index_adj_np_v-2][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                    main_structure_dict_adj[index_adj_np_v-2][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                    main_structure_dict_adj[index_adj_np_v-2][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]) and (main_structure_dict_adj[index_adj_np_v-2][0][3::] not in ["是", "就是", "素"]) and (
                    main_structure_dict_adj[index_adj_np_v-3][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                    main_structure_dict_adj[index_adj_np_v-3][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                    main_structure_dict_adj[index_adj_np_v-3][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                    main_structure_dict_adj[index_adj_np_v-3][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                    main_structure_dict_adj[index_adj_np_v-3][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]):
                        adj_np_v_dict = main_structure_dict_adj[index_adj_np_v-3:index_adj_np_v+1]
                        for g in adj_np_v_dict:
                            adj_np_v_collection.append(g)
                        index_content = adj_np_v_dict[-1]
                        if adj_np_v_dict != []:
                            index_adj = mark_dict.index(index_content)
                            adj_np_v_dict.append(index_adj)
                            adj.append(adj_np_v_dict)
                            flag_empty_content += 1
                    elif (main_structure_dict_adj[index_adj_np_v-2][1][2:8] not in ["000111", "000100", "110000", "111011", "010111"] and
                            main_structure_dict_adj[index_adj_np_v-2][1][9:15] not in ["000111", "000100", "110000", "111011", "010111"] and
                            main_structure_dict_adj[index_adj_np_v-2][1][16:22] not in ["000111", "000100","110000", "111011", "010111"] and
                            main_structure_dict_adj[index_adj_np_v-2][1][23:29] not in ["000111", "000100","110000", "111011", "010111"] and
                            main_structure_dict_adj[index_adj_np_v-2][1][30:36] not in ["000111", "000100", "110000", "111011", "010111"]) and (main_structure_dict_adj[index_adj_np_v-2][0][3::] not in ["是", "就是", "素"]) and (
                            main_structure_dict_adj[index_adj_np_v-3][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                            main_structure_dict_adj[index_adj_np_v-3][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                            main_structure_dict_adj[index_adj_np_v-3][1][16:22] in ["000111", "000100","110000", "111011", "010111"] or
                            main_structure_dict_adj[index_adj_np_v-3][1][23:29] in ["000111", "000100","110000", "111011", "010111"] or
                            main_structure_dict_adj[index_adj_np_v-3][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]) and (
                            main_structure_dict_adj[index_adj_np_v - 4][1][2:8] not in ["000111", "000101"] and
                            main_structure_dict_adj[index_adj_np_v - 4][1][9:15] not in ["000111", "000101"] and
                            main_structure_dict_adj[index_adj_np_v - 4][1][16:22] not in ["000111", "000101"] and
                            main_structure_dict_adj[index_adj_np_v - 4][1][23:29] not in ["000111", "000101"] and
                            main_structure_dict_adj[index_adj_np_v - 4][1][30:36] not in ["000111", "000101"]):
                        adj_np_v_dict = main_structure_dict_adj[index_adj_np_v-3:index_adj_np_v+1]
                        for g in adj_np_v_dict:
                            adj_np_v_collection.append(g)
                        index_content = adj_np_v_dict[-1]
                        if adj_np_v_dict != []:
                            index_adj = mark_dict.index(index_content)
                            adj_np_v_dict.append(index_adj)
                            adj.append(adj_np_v_dict)
                            flag_empty_content += 1
                        #print("3ok", adj_np_v_dict)
                    elif (main_structure_dict_adj[index_adj_np_v-2][1][2:8] not in ["000111", "000100", "110000", "111011", "010111"] or
                            main_structure_dict_adj[index_adj_np_v-2][1][9:15] not in ["000111", "000100", "110000", "111011", "010111"] or
                            main_structure_dict_adj[index_adj_np_v-2][1][16:22] not in ["000111", "000100", "110000", "111011", "010111"] or
                            main_structure_dict_adj[index_adj_np_v-2][1][23:29] not in ["000111", "000100", "110000", "111011", "010111"] or
                            main_structure_dict_adj[index_adj_np_v-2][1][30:36] not in ["000111", "000100", "110000", "111011", "010111"]) and (main_structure_dict_adj[index_adj_np_v-2][0][3::] not in ["是", "就是", "素"]) and (
                            main_structure_dict_adj[index_adj_np_v-3][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                            main_structure_dict_adj[index_adj_np_v-3][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                            main_structure_dict_adj[index_adj_np_v-3][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                            main_structure_dict_adj[index_adj_np_v-3][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                            main_structure_dict_adj[index_adj_np_v-3][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]) and (
                            main_structure_dict_adj[index_adj_np_v - 4][1][2:8] in ["000111", "000101"] or
                            main_structure_dict_adj[index_adj_np_v - 4][1][9:15] in ["000111", "000101"] or
                            main_structure_dict_adj[index_adj_np_v - 4][1][16:22] in ["000111", "000101"] or
                            main_structure_dict_adj[index_adj_np_v - 4][1][23:29] in ["000111", "000101"] or
                            main_structure_dict_adj[index_adj_np_v - 4][1][30:36] in ["000111", "000101"]):
                        adj_np_v_dict = main_structure_dict_adj[index_adj_np_v-3:index_adj_np_v+1]
                        for g in adj_np_v_dict:
                            adj_np_v_collection.append(g)
                        index_content = adj_np_v_dict[-1]
                        if adj_np_v_dict != []:
                            index_adj = mark_dict.index(index_content)
                            adj_np_v_dict.append(index_adj)
                            adj.append(adj_np_v_dict)
                            flag_empty_content += 1
                        #print("4ok", adj_np_v_dict)

    except Exception:
        pass

    try:
        if len(adj_np_v_dict) == count_dictlen and flag_empty_content == 0:
            adj_np_v_dict = []

        if len(adj_np_v_dict) != 0:
            for i in adj_np_v_dict:
                for j in main_structure_dict_adj:
                    if i[0][3::] == j[0][3::] and i!=j and i[1][0] == j[1][0]:
                        main_structure_dict_adj.remove(j)
    except Exception:
        pass

    for i in adj_np_v_collection:
        if i not in adj_np_v_collection_1:
            adj_np_v_collection_1.append(i)

    if len(adj_np_v_dict) != 0 and len(adj_np_v_dict[0]) == 2:
        main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_np_v_collection_1]
    elif len(adj_np_v_dict) != 0 and len(adj_np_v_dict[0]) != 2:
        adj_np_v_dict = [adj_np_v_dict]
        main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_np_v_collection_1]

    if len(adj) == 0:
        main_structure_dict_adj = copy.deepcopy(main_structure_dict_adj_backup)

    flag_empty_content = 0

    #print("d5", adj_np_v_dict)
    #print("5adj", adj)
    #print("5", main_structure_dict_adj)

    # 6.处理number + quan 结构的定语
    index_content = []
    index_adj = 0
    adj_number_collection = []
    adj_number_collection_1 = []
    try:
        for i in main_structure_dict_adj:
            if (i[1][2:8] == "000010" or i[1][9:15] == "000010" or i[1][23:29] == "000010" or
                    i[1][30:36] == "000010"):
                index_adj_number = main_structure_dict_adj.index(i)
                if (main_structure_dict_adj[index_adj_number + 1][1][2:8] == "000011"  or
                    main_structure_dict_adj[index_adj_number + 1][1][9:15] == "000011" or
                    main_structure_dict_adj[index_adj_number + 1][1][16:22] == "000011" or
                    main_structure_dict_adj[index_adj_number + 1][1][23:29] == "000011" or
                    main_structure_dict_adj[index_adj_number + 1][1][30:36] == "000011") and (
                        main_structure_dict_adj[index_adj_number - 1][1][2:8] not in ["111011", "110000", "010111"] and
                        main_structure_dict_adj[index_adj_number - 1][1][9:15] not in ["111011", "110000", "010111"] and
                        main_structure_dict_adj[index_adj_number - 1][1][16:22] not in ["111011", "110000", "010111"] and
                        main_structure_dict_adj[index_adj_number - 1][1][23:29] not in ["111011", "110000", "010111"] and
                        main_structure_dict_adj[index_adj_number - 1][1][30:36] not in ["111011", "110000", "010111"]) and (
                        main_structure_dict_adj[index_adj_number + 2][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 2][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 2][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 2][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 2][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]) and (
                        main_structure_dict_adj[index_adj_number + 3][0][3::] not in ["的", "之"]):
                    adj_number_dict= main_structure_dict_adj[index_adj_number:index_adj_number+2]
                    for g in adj_number_dict:
                        adj_number_collection.append(g)
                    index_content = adj_number_dict[-1]
                    if adj_number_dict != []:
                        index_adj = mark_dict.index(index_content)
                        adj_number_dict.append(index_adj)
                        adj.append(adj_number_dict)
                        flag_empty_content += 1
                elif (main_structure_dict_adj[index_adj_number + 1][1][2:8] == "000011"  or
                    main_structure_dict_adj[index_adj_number + 1][1][9:15] == "000011" or
                    main_structure_dict_adj[index_adj_number + 1][1][16:22] == "000011" or
                    main_structure_dict_adj[index_adj_number + 1][1][23:29] == "000011" or
                    main_structure_dict_adj[index_adj_number + 1][1][30:36] == "000011") and (
                        main_structure_dict_adj[index_adj_number - 1][1][2:8] in ["111011", "110000", "010111"] or
                        main_structure_dict_adj[index_adj_number - 1][1][9:15] in ["111011", "110000", "010111"] or
                        main_structure_dict_adj[index_adj_number - 1][1][16:22] in ["111011", "110000", "010111"] or
                        main_structure_dict_adj[index_adj_number - 1][1][23:29] in ["111011", "110000", "010111"] or
                        main_structure_dict_adj[index_adj_number - 1][1][30:36] in ["111011", "110000", "010111"]
                ) and (
                        main_structure_dict_adj[index_adj_number + 2][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 2][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 2][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 2][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 2][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]) and (
                        main_structure_dict_adj[index_adj_number + 3][0][3::] not in ["的", "之"]):
                    adj_number_dict= main_structure_dict_adj[index_adj_number-1:index_adj_number+2]
                    for g in adj_number_dict:
                        adj_number_collection.append(g)
                    index_content = adj_number_dict[-1]
                    if adj_number_dict != []:
                        index_adj = mark_dict.index(index_content)
                        adj_number_dict.append(index_adj)
                        adj.append(adj_number_dict)
                        flag_empty_content += 1
                elif (main_structure_dict_adj[index_adj_number + 1][1][2:8] == "000011"  or
                    main_structure_dict_adj[index_adj_number + 1][1][9:15] == "000011" or
                    main_structure_dict_adj[index_adj_number + 1][1][16:22] == "000011" or
                    main_structure_dict_adj[index_adj_number + 1][1][23:29] == "000011" or
                    main_structure_dict_adj[index_adj_number + 1][1][30:36] == "000011") and (
                        main_structure_dict_adj[index_adj_number - 1][1][2:8] not in ["111011", "110000", "010111"] and
                        main_structure_dict_adj[index_adj_number - 1][1][9:15] not in ["111011", "110000", "010111"] and
                        main_structure_dict_adj[index_adj_number - 1][1][16:22] not in ["111011", "110000", "010111"] and
                        main_structure_dict_adj[index_adj_number - 1][1][23:29] not in ["111011", "110000", "010111"] and
                        main_structure_dict_adj[index_adj_number - 1][1][30:36] not in ["111011", "110000", "010111"]) and (
                        main_structure_dict_adj[index_adj_number + 2][0][3::] in ["的", "之"]):
                    adj_number_dict = main_structure_dict_adj[index_adj_number:index_adj_number+3]
                    for g in adj_number_dict:
                        adj_number_collection.append(g)
                    index_content = adj_number_dict[-1]
                    if adj_number_dict != []:
                        index_adj = mark_dict.index(index_content)
                        adj_number_dict.append(index_adj)
                        adj.append(adj_number_dict)
                        flag_empty_content += 1
                elif (main_structure_dict_adj[index_adj_number + 1][1][2:8] == "000011"  or
                    main_structure_dict_adj[index_adj_number + 1][1][9:15] == "000011" or
                    main_structure_dict_adj[index_adj_number + 1][1][16:22] == "000011" or
                    main_structure_dict_adj[index_adj_number + 1][1][23:29] == "000011" or
                    main_structure_dict_adj[index_adj_number + 1][1][30:36] == "000011")  and (
                        main_structure_dict_adj[index_adj_number - 1][1][2:8] in ["111011", "110000", "010111"] or
                        main_structure_dict_adj[index_adj_number - 1][1][9:15] in ["111011", "110000", "010111"] or
                        main_structure_dict_adj[index_adj_number - 1][1][16:22] in ["111011", "110000", "010111"] or
                        main_structure_dict_adj[index_adj_number - 1][1][23:29] in ["111011", "110000", "010111"] or
                        main_structure_dict_adj[index_adj_number - 1][1][30:36] in ["111011", "110000", "010111"]
                ) and (main_structure_dict_adj[index_adj_number + 2][0][3::] in ["的", "之"]):
                    adj_number_dict = main_structure_dict_adj[index_adj_number-1:index_adj_number+3]
                    for g in adj_number_dict:
                        adj_number_collection.append(g)
                    index_content = adj_number_dict[-1]
                    if adj_number_dict != []:
                        index_adj = mark_dict.index(index_content)
                        adj_number_dict.append(index_adj)
                        adj.append(adj_number_dict)
                        flag_empty_content += 1
                elif (main_structure_dict_adj[index_adj_number + 2][1][2:8] == "000011"  or
                    main_structure_dict_adj[index_adj_number + 2][1][9:15] == "000011" or
                    main_structure_dict_adj[index_adj_number + 2][1][16:22] == "000011" or
                    main_structure_dict_adj[index_adj_number + 2][1][23:29] == "000011" or
                    main_structure_dict_adj[index_adj_number + 2][1][30:36] == "000011") and (
                        main_structure_dict_adj[index_adj_number - 1][1][2:8] not in ["111011", "110000", "010111"] and
                        main_structure_dict_adj[index_adj_number - 1][1][9:15] not in ["111011", "110000", "010111"] and
                        main_structure_dict_adj[index_adj_number - 1][1][16:22] not in ["111011", "110000", "010111"] and
                        main_structure_dict_adj[index_adj_number - 1][1][23:29] not in ["111011", "110000", "010111"] and
                        main_structure_dict_adj[index_adj_number - 1][1][30:36] not in ["111011", "110000", "010111"]) and (
                        main_structure_dict_adj[index_adj_number + 3][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 3][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 3][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 3][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 3][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]) and (
                        main_structure_dict_adj[index_adj_number + 4][0][3::] not in ["的", "之"]):
                    adj_number_dict = main_structure_dict_adj[index_adj_number:index_adj_number+3]
                    for g in adj_number_dict:
                        adj_number_collection.append(g)
                    index_content = adj_number_dict[-1]
                    if adj_number_dict != []:
                        index_adj = mark_dict.index(index_content)
                        adj_number_dict.append(index_adj)
                        adj.append(adj_number_dict)
                        flag_empty_content += 1
                elif (main_structure_dict_adj[index_adj_number + 2][1][2:8] == "000011"  or
                    main_structure_dict_adj[index_adj_number + 2][1][9:15] == "000011" or
                    main_structure_dict_adj[index_adj_number + 2][1][16:22] == "000011" or
                    main_structure_dict_adj[index_adj_number + 2][1][23:29] == "000011" or
                    main_structure_dict_adj[index_adj_number + 2][1][30:36] == "000011") and (
                        main_structure_dict_adj[index_adj_number - 1][1][2:8] in ["111011", "110000", "010111"] or
                        main_structure_dict_adj[index_adj_number - 1][1][9:15] in ["111011", "110000", "010111"] or
                        main_structure_dict_adj[index_adj_number - 1][1][16:22] in ["111011", "110000", "010111"] or
                        main_structure_dict_adj[index_adj_number - 1][1][23:29] in ["111011", "110000", "010111"] or
                        main_structure_dict_adj[index_adj_number - 1][1][30:36] in ["111011", "110000", "010111"]
                ) and (
                        main_structure_dict_adj[index_adj_number + 3][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 3][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 3][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 3][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 3][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]) and (
                        main_structure_dict_adj[index_adj_number + 4][0][3::] not in ["的", "之"]):
                    adj_number_dict = main_structure_dict_adj[index_adj_number-1:index_adj_number+3]
                    for g in adj_number_dict:
                        adj_number_collection.append(g)
                    index_content = adj_number_dict[-1]
                    if adj_number_dict != []:
                        index_adj = mark_dict.index(index_content)
                        adj_number_dict.append(index_adj)
                        adj.append(adj_number_dict)
                        flag_empty_content += 1
                elif (main_structure_dict_adj[index_adj_number + 2][1][2:8] == "000011"  or
                    main_structure_dict_adj[index_adj_number + 2][1][9:15] == "000011" or
                    main_structure_dict_adj[index_adj_number + 2][1][16:22] == "000011" or
                    main_structure_dict_adj[index_adj_number + 2][1][23:29] == "000011" or
                    main_structure_dict_adj[index_adj_number + 2][1][30:36] == "000011") and (
                        main_structure_dict_adj[index_adj_number - 1][1][2:8] not in ["111011", "110000", "010111"] and
                        main_structure_dict_adj[index_adj_number - 1][1][9:15] not in ["111011", "110000", "010111"] and
                        main_structure_dict_adj[index_adj_number - 1][1][16:22] not in ["111011", "110000", "010111"] and
                        main_structure_dict_adj[index_adj_number - 1][1][23:29] not in ["111011", "110000", "010111"] and
                        main_structure_dict_adj[index_adj_number - 1][1][30:36] not in ["111011", "110000", "010111"]) and (
                        main_structure_dict_adj[index_adj_number + 3][0][3::] in ["的", "之"]):
                    adj_number_dict = main_structure_dict_adj[index_adj_number:index_adj_number+4]
                    for g in adj_number_dict:
                        adj_number_collection.append(g)
                    index_content = adj_number_dict[-1]
                    if adj_number_dict != []:
                        index_adj = mark_dict.index(index_content)
                        adj_number_dict.append(index_adj)
                        adj.append(adj_number_dict)
                        flag_empty_content += 1
                elif (main_structure_dict_adj[index_adj_number + 2][1][2:8] == "000011"  or
                    main_structure_dict_adj[index_adj_number + 2][1][9:15] == "000011" or
                    main_structure_dict_adj[index_adj_number + 2][1][16:22] == "000011" or
                    main_structure_dict_adj[index_adj_number + 2][1][23:29] == "000011" or
                    main_structure_dict_adj[index_adj_number + 2][1][30:36] == "000011") and (
                        main_structure_dict_adj[index_adj_number - 1][1][2:8] in ["111011", "110000", "010111"] or
                        main_structure_dict_adj[index_adj_number - 1][1][9:15] in ["111011", "110000", "010111"] or
                        main_structure_dict_adj[index_adj_number - 1][1][16:22] in ["111011", "110000", "010111"] or
                        main_structure_dict_adj[index_adj_number - 1][1][23:29] in ["111011", "110000", "010111"] or
                        main_structure_dict_adj[index_adj_number - 1][1][30:36] in ["111011", "110000", "010111"]
                ) and (
                        main_structure_dict_adj[index_adj_number + 3][0][3::] in ["的", "之"]):
                    adj_number_dict = main_structure_dict_adj[index_adj_number-1:index_adj_number+4]
                    for g in adj_number_dict:
                        adj_number_collection.append(g)
                    index_content = adj_number_dict[-1]
                    if adj_number_dict != []:
                        index_adj = mark_dict.index(index_content)
                        adj_number_dict.append(index_adj)
                        adj.append(adj_number_dict)
                        flag_empty_content += 1
                elif (main_structure_dict_adj[index_adj_number + 1][1][2:8] == "000011"  or
                    main_structure_dict_adj[index_adj_number + 1][1][9:15] == "000011" or
                    main_structure_dict_adj[index_adj_number + 1][1][16:22] == "000011" or
                    main_structure_dict_adj[index_adj_number + 1][1][23:29] == "000011" or
                    main_structure_dict_adj[index_adj_number + 1][1][30:36] == "000011") and (
                        main_structure_dict_adj[index_adj_number - 1][1][2:8] not in ["111011", "110000", "010111"] and
                        main_structure_dict_adj[index_adj_number - 1][1][9:15] not in ["111011", "110000", "010111"] and
                        main_structure_dict_adj[index_adj_number - 1][1][16:22] not in ["111011", "110000", "010111"] and
                        main_structure_dict_adj[index_adj_number - 1][1][23:29] not in ["111011", "110000", "010111"] and
                        main_structure_dict_adj[index_adj_number - 1][1][30:36] not in ["111011", "110000", "010111"]) and (
                        main_structure_dict_adj[index_adj_number + 2][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 2][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 2][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 2][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 2][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]) and (
                        main_structure_dict_adj[index_adj_number + 3][0][3::] in ["的", "之"]):
                    adj_number_dict = main_structure_dict_adj[index_adj_number:index_adj_number+4]
                    for g in adj_number_dict:
                        adj_number_collection.append(g)
                    index_content = adj_number_dict[-1]
                    if adj_number_dict != []:
                        index_adj = mark_dict.index(index_content)
                        adj_number_dict.append(index_adj)
                        adj.append(adj_number_dict)
                        flag_empty_content += 1
                elif (main_structure_dict_adj[index_adj_number + 1][1][2:8] == "000011"  or
                    main_structure_dict_adj[index_adj_number + 1][1][9:15] == "000011" or
                    main_structure_dict_adj[index_adj_number + 1][1][16:22] == "000011" or
                    main_structure_dict_adj[index_adj_number + 1][1][23:29] == "000011" or
                    main_structure_dict_adj[index_adj_number + 1][1][30:36] == "000011") and (
                        main_structure_dict_adj[index_adj_number - 1][1][2:8] in ["111011", "110000", "010111"] or
                        main_structure_dict_adj[index_adj_number - 1][1][9:15] in ["111011", "110000", "010111"] or
                        main_structure_dict_adj[index_adj_number - 1][1][16:22] in ["111011", "110000", "010111"] or
                        main_structure_dict_adj[index_adj_number - 1][1][23:29] in ["111011", "110000", "010111"] or
                        main_structure_dict_adj[index_adj_number - 1][1][30:36] in ["111011", "110000", "010111"]
                ) and (
                        main_structure_dict_adj[index_adj_number + 2][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 2][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 2][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 2][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 2][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]) and (
                        main_structure_dict_adj[index_adj_number + 3][0][3::] in ["的", "之"]):
                    adj_number_dict = main_structure_dict_adj[index_adj_number-1:index_adj_number+4]
                    for g in adj_number_dict:
                        adj_number_collection.append(g)
                    index_content = adj_number_dict[-1]
                    if adj_number_dict != []:
                        index_adj = mark_dict.index(index_content)
                        adj_number_dict.append(index_adj)
                        adj.append(adj_number_dict)
                        flag_empty_content += 1
                elif (main_structure_dict_adj[index_adj_number + 1][1][2:8] == "000101" or
                    main_structure_dict_adj[index_adj_number + 1][1][9:15] == "000101" or
                    main_structure_dict_adj[index_adj_number + 1][1][16:22] == "000101" or
                    main_structure_dict_adj[index_adj_number + 1][1][23:29] == "000101" or
                    main_structure_dict_adj[index_adj_number + 1][1][30:36] == "000101") and (
                    main_structure_dict_adj[index_adj_number + 2][1][2:8] == "000011" or
                    main_structure_dict_adj[index_adj_number + 2][1][9:15] == "000011" or
                    main_structure_dict_adj[index_adj_number + 2][1][16:22] == "000011" or
                    main_structure_dict_adj[index_adj_number + 2][1][23:29] == "000011" or
                    main_structure_dict_adj[index_adj_number + 2][1][30:36] == "000011") and (
                        main_structure_dict_adj[index_adj_number - 1][1][2:8] not in ["111011", "110000", "010111"] and
                        main_structure_dict_adj[index_adj_number - 1][1][9:15] not in ["111011", "110000", "010111"] and
                        main_structure_dict_adj[index_adj_number - 1][1][16:22] not in ["111011", "110000", "010111"] and
                        main_structure_dict_adj[index_adj_number - 1][1][23:29] not in ["111011", "110000", "010111"] and
                        main_structure_dict_adj[index_adj_number - 1][1][30:36] not in ["111011", "110000", "010111"]) and (
                        main_structure_dict_adj[index_adj_number + 3][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 3][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 3][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 3][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 3][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]) and (
                        main_structure_dict_adj[index_adj_number + 4][0][3::] not in ["的", "之"]):
                    adj_number_dict = main_structure_dict_adj[index_adj_number:index_adj_number+3]
                    for g in adj_number_dict:
                        adj_number_collection.append(g)
                    index_content = adj_number_dict[-1]
                    if adj_number_dict != []:
                        index_adj = mark_dict.index(index_content)
                        adj_number_dict.append(index_adj)
                        adj.append(adj_number_dict)
                        flag_empty_content += 1
                elif (main_structure_dict_adj[index_adj_number + 1][1][2:8] == "000101" or
                    main_structure_dict_adj[index_adj_number + 1][1][9:15] == "000101" or
                    main_structure_dict_adj[index_adj_number + 1][1][16:22] == "000101" or
                    main_structure_dict_adj[index_adj_number + 1][1][23:29] == "000101" or
                    main_structure_dict_adj[index_adj_number + 1][1][30:36] == "000101") and (
                    main_structure_dict_adj[index_adj_number + 2][1][2:8] == "000011" or
                    main_structure_dict_adj[index_adj_number + 2][1][9:15] == "000011" or
                    main_structure_dict_adj[index_adj_number + 2][1][16:22] == "000011" or
                    main_structure_dict_adj[index_adj_number + 2][1][23:29] == "000011" or
                    main_structure_dict_adj[index_adj_number + 2][1][30:36] == "000011") and (
                        main_structure_dict_adj[index_adj_number - 1][1][2:8] in ["111011", "110000", "010111"] or
                        main_structure_dict_adj[index_adj_number - 1][1][9:15] in ["111011", "110000", "010111"] or
                        main_structure_dict_adj[index_adj_number - 1][1][16:22] in ["111011", "110000", "010111"] or
                        main_structure_dict_adj[index_adj_number - 1][1][23:29] in ["111011", "110000", "010111"] or
                        main_structure_dict_adj[index_adj_number - 1][1][30:36] in ["111011", "110000", "010111"]
                ) and (
                        main_structure_dict_adj[index_adj_number + 3][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 3][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 3][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 3][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_number + 3][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]) and (
                        main_structure_dict_adj[index_adj_number + 4][0][3::] not in ["的", "之"]):
                    adj_number_dict = main_structure_dict_adj[index_adj_number-1:index_adj_number+3]
                    for g in adj_number_dict:
                        adj_number_collection.append(g)
                    index_content = adj_number_dict[-1]
                    if adj_number_dict != []:
                        index_adj = mark_dict.index(index_content)
                        adj_number_dict.append(index_adj)
                        adj.append(adj_number_dict)
                        flag_empty_content += 1
                elif (main_structure_dict_adj[index_adj_number + 1][1][2:8] == "000101" or
                    main_structure_dict_adj[index_adj_number + 1][1][9:15] == "000101" or
                    main_structure_dict_adj[index_adj_number + 1][1][16:22] == "000101" or
                    main_structure_dict_adj[index_adj_number + 1][1][23:29] == "000101" or
                    main_structure_dict_adj[index_adj_number + 1][1][30:36] == "000101")  and (
                        main_structure_dict_adj[index_adj_number - 1][1][2:8] not in ["111011", "110000", "010111"] and
                        main_structure_dict_adj[index_adj_number - 1][1][9:15] not in ["111011", "110000", "010111"] and
                        main_structure_dict_adj[index_adj_number - 1][1][16:22] not in ["111011", "110000", "010111"] and
                        main_structure_dict_adj[index_adj_number - 1][1][23:29] not in ["111011", "110000", "010111"] and
                        main_structure_dict_adj[index_adj_number - 1][1][30:36] not in ["111011", "110000", "010111"]) and (
                    main_structure_dict_adj[index_adj_number + 2][1][2:8] == "000011" or
                    main_structure_dict_adj[index_adj_number + 2][1][9:15] == "000011" or
                    main_structure_dict_adj[index_adj_number + 2][1][16:22] == "000011" or
                    main_structure_dict_adj[index_adj_number + 2][1][23:29] == "000011" or
                    main_structure_dict_adj[index_adj_number + 2][1][30:36] == "000011") and (
                        main_structure_dict_adj[index_adj_number + 4][0][3::] in ["的", "之"]):
                    adj_number_dict = main_structure_dict_adj[index_adj_number:index_adj_number+5]
                    for g in adj_number_dict:
                        adj_number_collection.append(g)
                    index_content = adj_number_dict[-1]
                    if adj_number_dict != []:
                        index_adj = mark_dict.index(index_content)
                        adj_number_dict.append(index_adj)
                        adj.append(adj_number_dict)
                        flag_empty_content += 1
                elif (main_structure_dict_adj[index_adj_number + 1][1][2:8] == "000101" or
                    main_structure_dict_adj[index_adj_number + 1][1][9:15] == "000101" or
                    main_structure_dict_adj[index_adj_number + 1][1][16:22] == "000101" or
                    main_structure_dict_adj[index_adj_number + 1][1][23:29] == "000101" or
                    main_structure_dict_adj[index_adj_number + 1][1][30:36] == "000101") and (
                    main_structure_dict_adj[index_adj_number + 2][1][2:8] == "000011" or
                    main_structure_dict_adj[index_adj_number + 2][1][9:15] == "000011" or
                    main_structure_dict_adj[index_adj_number + 2][1][16:22] == "000011" or
                    main_structure_dict_adj[index_adj_number + 2][1][23:29] == "000011" or
                    main_structure_dict_adj[index_adj_number + 2][1][30:36] == "000011")  and (
                        main_structure_dict_adj[index_adj_number - 1][1][2:8] in ["111011", "110000", "010111"] or
                        main_structure_dict_adj[index_adj_number - 1][1][9:15] in ["111011", "110000", "010111"] or
                        main_structure_dict_adj[index_adj_number - 1][1][16:22] in ["111011", "110000", "010111"] or
                        main_structure_dict_adj[index_adj_number - 1][1][23:29] in ["111011", "110000", "010111"] or
                        main_structure_dict_adj[index_adj_number - 1][1][30:36] in ["111011", "110000", "010111"]
                ) and (
                        main_structure_dict_adj[index_adj_number + 4][0][3::] in ["的", "之"]):
                    adj_number_dict = main_structure_dict_adj[index_adj_number-1:index_adj_number+5]
                    for g in adj_number_dict:
                        adj_number_collection.append(g)
                    index_content = adj_number_dict[-1]
                    if adj_number_dict != []:
                        index_adj = mark_dict.index(index_content)
                        adj_number_dict.append(index_adj)
                        adj.append(adj_number_dict)
                        flag_empty_content += 1
      # 如果有“的”或“之”随后，且后面为名/代/时间地点词，或adj/proun + 名/代/时间地点词, 则整个部分作为定语
    except Exception:
        pass

    try:
        if len(adj_number_dict) == count_dictlen and flag_empty_content == 0:
            adj_number_dict = []

        if len(adj_number_dict) != 0:
            for i in adj_number_dict:
                for j in main_structure_dict_adj:
                    if i[0][3::] == j[0][3::] and i!=j and i[1][0] == j[1][0]:
                        main_structure_dict_adj.remove(j)
    except Exception:
        pass

    for i in adj_number_collection:
        if i not in adj_number_collection_1:
            adj_number_collection_1.append(i)

    if len(adj_number_dict) != 0 and len(adj_number_dict[0]) == 2:
        main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_number_collection_1]
    elif len(adj_number_dict) != 0 and len(adj_number_dict[0]) != 2:
        adj_number_dict = [adj_number_dict]
        main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_number_collection_1]

    if len(adj) == 0:
        main_structure_dict_adj = copy.deepcopy(main_structure_dict_adj_backup)

    flag_empty_content = 0

    #print("d6", adj_number_dict)
    #print("adj6", adj)
    #print("6", main_structure_dict_adj)

    # 7.处理时间方位词+ “的、之”结构的定语
    index_content = []
    index_adj = 0
    adj_tp_collection = []
    adj_tp_collection_1 = []
    try:
        for i in main_structure_dict_adj:
            index_adj_tp = main_structure_dict_adj.index(i)
            if (i[1][2:8] == "110011" or i[1][9:15] == "110011" or i[1][23:29] == "110011" or
                    i[1][30:36] == "110011") and (
                    main_structure_dict_adj[index_adj_tp - 1][2:8] not in ["110101", "000110"] and
                    main_structure_dict_adj[index_adj_tp - 1][9:15] not in ["110101", "000110"] and
                    main_structure_dict_adj[index_adj_tp - 1][16:22] not in ["110101", "000110"] and
                    main_structure_dict_adj[index_adj_tp - 1][23:29] not in ["110101", "000110"] and
                    main_structure_dict_adj[index_adj_tp - 1][30:36] not in ["110101", "000110"]):
                adj_tp_dict_0 = main_structure_dict_adj[index_adj_tp::]
    except Exception:
        pass

    #print("adj_tp_dict_0", adj_tp_dict_0)
    count_dictlen = len(adj_tp_dict_0)

    try:
        for i in adj_tp_dict_0:
            index_adj_tp_dict_end = adj_tp_dict.index(i)
            if i[0][3::] in ["的", "之"] and (adj_tp_dict_0[index_adj_tp - 1][1][2:8] in ["000111", "000100" "010111"] or
                    adj_tp_dict_0[index_adj_tp + 1][1][9:15] in ["000111", "000100" "010111"] or
                    adj_tp_dict_0[index_adj_tp + 1][1][16:22] in ["000111", "000100" "010111"] or
                    adj_tp_dict_0[index_adj_tp + 1][1][23:29] in ["000111", "000100" "010111"] or
                    adj_tp_dict_0[index_adj_tp + 1][1][30:36] in ["000111", "000100" "010111"]):
                adj_tp_dict = adj_tp_dict_0[0:index_adj_tp_dict_end + 1]
                for g in adj_tp_dict:
                    adj_tp_collection.append(g)
                index_content = adj_tp_dict[-1]
                if adj_tp_dict != []:
                    index_adj = mark_dict.index(index_content)
                    adj_tp_dict.append(index_adj)
                    adj.append(adj_tp_dict)
                    flag_empty_content += 1
                #print("1", adj_tp_dict)
    except Exception:
        pass

    if len(adj_tp_dict) == count_dictlen and flag_empty_content == 0:
        adj_tp_dict = []

    try:
        for i in main_structure_dict_adj:
            index_adj_tp = main_structure_dict_adj.index(i)
            if (i[1][2:8] in ["110000", "111011", "010111"] or i[1][9:15] in ["110000", "111011", "010111"] or i[1][16:22] in ["110000", "111011", "010111"] or i[1][23:29] in ["110000", "111011", "010111"] or
                    i[1][30:36] in ["110000", "111011", "010111"]):
                if (main_structure_dict_adj[index_adj_tp - 1][1][2:8] in ["000111", "000100" "010111"] or
                    main_structure_dict_adj[index_adj_tp - 1][1][9:15] in ["000111", "000100" "010111"] or
                    main_structure_dict_adj[index_adj_tp - 1][1][16:22] in ["000111", "000100" "010111"] or
                    main_structure_dict_adj[index_adj_tp - 1][1][23:29] in ["000111", "000100" "010111"] or
                    main_structure_dict_adj[index_adj_tp - 1][1][30:36] in ["000111", "000100" "010111"]):
                    adj_tp_dict_0 = main_structure_dict_adj[index_adj_tp-1::]
                    index_adj_tp = index_adj_tp -1
                    #print("1", adj_tp_dict_0)
                elif (main_structure_dict_adj[index_adj_tp - 1][1][2:8] in ["000111", "000100" "010111"] or
                        main_structure_dict_adj[index_adj_tp - 1][1][9:15] in ["000111", "000100" "010111"] or
                        main_structure_dict_adj[index_adj_tp - 1][1][16:22] in ["000111", "000100" "010111"] or
                        main_structure_dict_adj[index_adj_tp - 1][1][23:29] in ["000111", "000100" "010111"] or
                        main_structure_dict_adj[index_adj_tp - 1][1][30:36] in ["000111", "000100" "010111"]) and (
                        main_structure_dict_adj[index_adj_tp - 2][1][2:8] == "110011" or
                        main_structure_dict_adj[index_adj_tp - 2][1][9:15] == "110011" or
                        main_structure_dict_adj[index_adj_tp - 2][1][16:22] == "110011" or
                        main_structure_dict_adj[index_adj_tp - 2][1][23:29] == "110011" or
                        main_structure_dict_adj[index_adj_tp - 2][1][30:36] == "110011"):
                    adj_tp_dict_0 = main_structure_dict_adj[index_adj_tp - 2::]
                    index_adj_tp = index_adj_tp - 2
                    #print("2", adj_tp_dict_0)
                elif index_adj_tp == 0:
                    adj_tp_dict_0 = main_structure_dict_adj[index_adj_tp::]

                    #print("3", adj_tp_dict_0)
    except Exception:
        pass #找出时间方位词，如果前面是名、形，则全部加入定语部分,前面有介词的也加入

    count_dictlen = len(adj_tp_dict_0)
    #print("adj_tp_dict_0", adj_tp_dict_0)

    try:
        for i in adj_tp_dict_0:
            index_adj_tp_end = adj_tp_dict_0.index(i)
            if adj_tp_dict_0[index_adj_tp_end + 1][1][2:8] == "000001" or adj_tp_dict_0[index_adj_tp_end + 1][1][9:15] == "000001" or adj_tp_dict_0[index_adj_tp_end + 1][1][16:22] == "000001" or adj_tp_dict_0[index_adj_tp_end + 1][1][23:29] == "000001" or adj_tp_dict_0[index_adj_tp_end + 1][1][30:36] == "000001":
                adj_tp_dict_0 = []
                adj_tp_dict = []
                #print("adj_tp_dict_0", adj_tp_dict_0)
            elif i[0][3::] == "的" or i[0][3::] == "之" \
                    and (adj_tp_dict_0[index_adj_tp_end + 1][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                         adj_tp_dict_0[index_adj_tp_end + 1][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                         adj_tp_dict_0[index_adj_tp_end + 1][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                         adj_tp_dict_0[index_adj_tp_end + 1][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                         adj_tp_dict_0[index_adj_tp_end + 1][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]):
                adj_tp_dict = adj_tp_dict_0[0:index_adj_tp_end + 1]
                for g in adj_tp_dict:
                    adj_tp_collection.append(g)
                index_content = adj_tp_dict[-1]
                if adj_tp_dict != []:
                    index_adj = mark_dict.index(index_content)
                    adj_tp_dict.append(index_adj)
                    adj.append(adj_tp_dict)
                    flag_empty_content += 1
                #print("3", adj_tp_dict)
            elif (i[0][3::] == "的" or i[0][3::] == "之") and (
                    adj_tp_dict_0[index_adj_tp_end + 1][1][2:8] in ["000100", "000101"] or
                    adj_tp_dict_0[index_adj_tp_end + 1][1][9:15] in ["000100", "000101"] or
                    adj_tp_dict_0[index_adj_tp_end + 1][1][16:22] in ["000100", "000101"] or
                    adj_tp_dict_0[index_adj_tp_end + 1][1][23:29] in ["000100", "000101"] or
                    adj_tp_dict_0[index_adj_tp_end + 1][1][30:36] in ["000100", "000101"]) \
                    and (adj_tp_dict_0[index_adj_tp_end + 2][1][2:8] in ["110000", "000011"] or
                         adj_tp_dict_0[index_adj_tp_end + 2][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                         adj_tp_dict_0[index_adj_tp_end + 2][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                         adj_tp_dict_0[index_adj_tp_end + 2][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                         adj_tp_dict_0[index_adj_tp_end + 2][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]):
                adj_tp_dict = adj_tp_dict_0[0:index_adj_tp_end + 2]
                for g in adj_tp_dict:
                    adj_tp_collection.append(g)
                index_content = adj_tp_dict[-1]
                if adj_tp_dict != []:
                    index_adj = mark_dict.index(index_content)
                    adj_tp_dict.append(index_adj)
                    adj.append(adj_tp_dict)
                    flag_empty_content += 1
                #print("4", adj_tp_dict)
            elif (i[0][3::] == "的" or i[0][3::] == "之") and (
                    adj_tp_dict_0[index_adj_tp_end + 1][1][2:8] == "000100" or
                    adj_tp_dict_0[index_adj_tp_end + 1][1][9:15] == "000100" or
                    adj_tp_dict_0[index_adj_tp_end + 1][1][16:22] == "000100" or
                    adj_tp_dict_0[index_adj_tp_end + 1][1][23:29] == "000100" or
                    adj_tp_dict_0[index_adj_tp_end + 1][1][30:36] == "000100") \
                    and (adj_tp_dict_0[index_adj_tp_end + 2][1][2:8] == "000010" or
                         adj_tp_dict_0[index_adj_tp_end + 2][1][9:15] == "000010" or
                         adj_tp_dict_0[index_adj_tp_end + 2][1][16:22] == "000010" or
                         adj_tp_dict_0[index_adj_tp_end + 2][1][23:29] == "000010" or
                         adj_tp_dict_0[index_adj_tp_end + 2][1][30:36] == "000010") and (
                    adj_tp_dict_0[index_adj_tp_end + 2][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_tp_dict_0[index_adj_tp_end + 3][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_tp_dict_0[index_adj_tp_end + 3][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_tp_dict_0[index_adj_tp_end + 3][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_tp_dict_0[index_adj_tp_end + 3][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]):
                adj_tp_dict = adj_tp_dict_0[0:index_adj_tp_end + 3]
                for g in adj_tp_dict:
                    adj_tp_collection.append(g)
                index_content = adj_tp_dict[-1]
                if adj_tp_dict != []:
                    index_adj = mark_dict.index(index_content)
                    adj_tp_dict.append(index_adj)
                    adj.append(adj_tp_dict)
                    flag_empty_content += 1
                #print("5", adj_tp_dict)
            elif (i[0][3::] == "的" or i[0][3::] == "之") and (
                    adj_tp_dict_0[index_adj_tp_end + 1][1][2:8] == "000100" or
                    adj_tp_dict_0[index_adj_tp_end + 1][1][9:15] == "000100" or
                    adj_tp_dict_0[index_adj_tp_end + 1][1][16:22] == "000100" or
                    adj_tp_dict_0[index_adj_tp_end + 1][1][23:29] == "000100" or
                    adj_tp_dict_0[index_adj_tp_end + 1][1][30:36] == "000100") \
                    and (adj_tp_dict_0[index_adj_tp_end + 2][1][2:8] == "000010" or
                         adj_tp_dict_0[index_adj_tp_end + 2][1][9:15] == "000010" or
                         adj_tp_dict_0[index_adj_tp_end + 2][1][16:22] == "000010" or
                         adj_tp_dict_0[index_adj_tp_end + 2][1][23:29] == "000010" or
                         adj_tp_dict_0[index_adj_tp_end + 2][1][30:36] == "000010") and (
                    adj_tp_dict_0[index_adj_tp_end + 3][1][2:8] == "000010" or
                    adj_tp_dict_0[index_adj_tp_end + 3][1][9:15] == "000011" or
                    adj_tp_dict_0[index_adj_tp_end + 3][1][16:22] == "000011" or
                    adj_tp_dict_0[index_adj_tp_end + 3][1][23:29] == "000011" or
                    adj_tp_dict_0[index_adj_tp_end + 3][1][30:36] == "000011") and (
                    adj_tp_dict_0[index_adj_tp_end + 4][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_tp_dict_0[index_adj_tp_end + 4][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_tp_dict_0[index_adj_tp_end + 4][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_tp_dict_0[index_adj_tp_end + 4][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_tp_dict_0[index_adj_tp_end + 4][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]):
                adj_tp_dict = adj_tp_dict_0[0:index_adj_tp_end + 4]
                for g in adj_tp_dict:
                    adj_tp_collection.append(g)
                index_content = adj_tp_dict[-1]
                if adj_tp_dict != []:
                    index_adj = mark_dict.index(index_content)
                    adj_tp_dict.append(index_adj)
                    adj.append(adj_tp_dict)
                    flag_empty_content += 1
                #print("6", adj_tp_dict)
    # 如果有“的”或“之”随后，且后面为名/代/时间地点词，或adj/proun + 名/代/时间地点词, 则整个部分作为定语
    except Exception:
        pass

    #print("adj_tp_dict", adj_tp_dict)

    try:
        for i in main_structure_dict_adj:
            index_adj_tp = main_structure_dict_adj.index(i)
            if (i[1][2:8] in ["111011", "110000"]) and (
                    main_structure_dict_adj[index_adj_tp + 1][1][2:8] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_tp + 1][1][9:15] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_tp + 1][1][16:22] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_tp + 1][1][23:29] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_tp + 1][1][30:36] in ["000111", "000100", "010111"]) and (
                    main_structure_dict_adj[index_adj_tp + 1][1][2:8] != "000001" and
                    main_structure_dict_adj[index_adj_tp + 1][1][9:15] != "000001" and
                    main_structure_dict_adj[index_adj_tp + 1][1][16:22] != "000001" and
                    main_structure_dict_adj[index_adj_tp + 1][1][23:29] != "000001" and
                    main_structure_dict_adj[index_adj_tp + 1][1][30:36] != "000001") and (
                    main_structure_dict_adj[index_adj_tp + 2][1][2:8] != "000001" and
                    main_structure_dict_adj[index_adj_tp + 2][1][9:15] != "000001" and
                    main_structure_dict_adj[index_adj_tp + 2][1][16:22] != "000001" and
                    main_structure_dict_adj[index_adj_tp + 2][1][23:29] != "000001" and
                    main_structure_dict_adj[index_adj_tp + 2][1][30:36] != "000001"):
                adj_tp_dict = main_structure_dict_adj[index_adj_tp:index_adj_tp+1]
                for g in adj_tp_dict:
                    adj_tp_collection.append(g)
                index_content = adj_tp_dict[-1]
                if adj_tp_dict != []:
                    index_adj = mark_dict.index(index_content)
                    adj_tp_dict.append(index_adj)
                    adj.append(adj_tp_dict)
                    flag_empty_content += 1
                #print("7", adj_tp_dict)
    except Exception:
        pass

    #print("adj_tp_dict", adj_tp_dict)

    try:
        if len(adj_tp_dict) == count_dictlen and flag_empty_content == 0:
            adj_tp_dict = []

        if len(adj_tp_dict) != 0:
            for i in adj_tp_dict:
                for j in main_structure_dict_adj:
                    if i[0][3::] == j[0][3::] and i!=j and i[1][0] == j[1][0]:
                        main_structure_dict_adj.remove(j)
    except Exception:
        pass

    for i in adj_tp_collection:
        if i not in adj_tp_collection_1:
            adj_tp_collection_1.append(i)

    if len(adj_tp_dict) != 0 and len(adj_tp_dict[0]) == 2:
        main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_tp_collection_1]
    if len(adj_tp_dict) != 0 and len(adj_tp_dict[0])!= 2:
        adj_tp_dict = [adj_tp_dict]
        main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_tp_collection_1]

    if len(adj) == 0:
        main_structure_dict_adj = copy.deepcopy(main_structure_dict_adj_backup)

    flag_empty_content = 0

    #print("adj_tp_collection_1", adj_tp_collection_1)
    #print("d7", adj_tp_dict)
    #print("adj7", adj)
    #print("7", main_structure_dict_adj)

    # 8.处理双重 “的、之”结构的定语
    index_content = []
    index_adj = 0
    adj_double_collection = []
    adj_double_collection_1 = []
    try:
        for i in main_structure_dict_adj:
            if (i[1][2:8] in ["000001", "000111", "000101"] or i[1][9:15] in ["000001", "000111", "000101"] or i[1][23:29] in ["000001", "000111", "000101"] or
                    i[1][30:36] in ["000001", "000111", "000101"]):
                index_adj_double = main_structure_dict_adj.index(i)
                if (main_structure_dict_adj[index_adj_double + 1][0][3::] in ["的", "之"]) and (
                    main_structure_dict_adj[index_adj_double + 2][1][2:8] in ["000001", "000111", "000101", "010111"] or
                    main_structure_dict_adj[index_adj_double + 2][1][9:15] in ["000001", "000111", "000101", "010111"] or
                    main_structure_dict_adj[index_adj_double + 2][1][16:22] in ["000001", "000111", "000101", "010111"] or
                    main_structure_dict_adj[index_adj_double + 2][1][23:29] in ["000001", "000111", "000101", "010111"] or
                    main_structure_dict_adj[index_adj_double + 2][1][30:36] in ["000001", "000111", "000101", "010111"]) \
                    and (main_structure_dict_adj[index_adj_double + 3][0][3::] in ["的", "之"])\
                    and (main_structure_dict_adj[index_adj_double + 4][1][2:8] in ["000100", "000001"] or
                         main_structure_dict_adj[index_adj_double + 4][1][9:15] in ["000100", "000001"] or
                         main_structure_dict_adj[index_adj_double + 4][1][16:22] in ["000100", "000001"] or
                         main_structure_dict_adj[index_adj_double + 4][1][23:29] in ["000100", "000001"] or
                         main_structure_dict_adj[index_adj_double + 4][1][30:36] in ["000100", "000001"]):
                    adj_double_dict = main_structure_dict_adj[index_adj_double:index_adj_tp_end + 4]
                    for g in adj_double_dict:
                        adj_double_collection.append(g)
                    index_content = adj_double_dict[-1]
                    if adj_double_dict != []:
                        index_adj = mark_dict.index(index_content)
                        adj_double_dict.append(index_adj)
                        adj.append(adj_double_dict)
                        flag_empty_content += 1
                elif (main_structure_dict_adj[index_adj_double + 1][1][2:8] in ["000001", "000111", "000101"] or
                    main_structure_dict_adj[index_adj_double + 1][1][9:15] in ["000001", "000111", "000101"] or
                    main_structure_dict_adj[index_adj_double + 1][1][16:22] in ["000001", "000111", "000101"] or
                    main_structure_dict_adj[index_adj_double + 1][1][23:29] in ["000001", "000111", "000101"] or
                    main_structure_dict_adj[index_adj_double + 1][1][30:36] in ["000001", "000111", "000101"]) \
                    and (main_structure_dict_adj[index_adj_double + 2][0][3::] in ["的", "之"]):
                    adj_double_dict = main_structure_dict_adj[index_adj_double:index_adj_tp_end + 3]
                    for g in adj_double_dict:
                        adj_double_collection.append(g)
                    index_content = adj_double_dict[-1]
                    if adj_double_dict != []:
                        index_adj = mark_dict.index(index_content)
                        adj_double_dict.append(index_adj)
                        adj.append(adj_double_dict)
                        flag_empty_content += 1
                elif (main_structure_dict_adv[index_adj_double + 1][0][3::] in ["的", "之"]) and (
                    main_structure_dict_adj[index_adj_double + 2][1][2:8] in ["000001", "000111", "000101"] or
                    main_structure_dict_adj[index_adj_double + 2][1][9:15] in ["000001", "000111", "000101"] or
                    main_structure_dict_adj[index_adj_double + 2][1][16:22] in ["000001", "000111", "000101"] or
                    main_structure_dict_adj[index_adj_double + 2][1][23:29] in ["000001", "000111", "000101"] or
                    main_structure_dict_adj[index_adj_double + 2][1][30:36] in ["000001", "000111", "000101"]) \
                    and (main_structure_dict_adj[index_adj_double + 3][1][2:8] in ["000100", "000111", "010111"] or
                    main_structure_dict_adj[index_adj_double + 3][1][9:15] in ["000100", "000111", "010111"] or
                    main_structure_dict_adj[index_adj_double + 3][1][16:22] in ["000100", "000111", "010111"] or
                    main_structure_dict_adj[index_adj_double + 3][1][23:29] in ["000100", "000111", "010111"] or
                    main_structure_dict_adj[index_adj_double + 3][1][30:36] in ["000100", "000111", "010111"]):
                    adj_double_dict = main_structure_dict_adj[index_adj_double:index_adj_tp_end + 3]
                    for g in adj_double_dict:
                        adj_double_collection.append(g)
                    index_content = adj_double_dict[-1]
                    if adj_double_dict != []:
                        index_adj = mark_dict.index(index_content)
                        adj_double_dict.append(index_adj)
                        adj.append(adj_double_dict)
                        flag_empty_content += 1
     #找出名、形、动，如果后面跟“的”或“之”，或又是名、形、动，则全部加入定语部分
    except Exception:
        pass

    try:
        if len(adj_double_dict) == count_dictlen and flag_empty_content == 0:
            adj_double_dict = []

        if len(adj_double_dict) != 0:
            for i in adj_double_dict:
                for j in main_structure_dict_adj:
                    if i[0][3::] == j[0][3::] and i!=j and i[1][0] == j[1][0]:
                        main_structure_dict_adj.remove(j)
    except Exception:
        pass

    for i in adj_double_collection:
        if i not in adj_double_collection_1:
            adj_double_collection_1.append(i)

    if len(adj_double_dict) != 0 and len(adj_double_dict[0]) == 2:
        main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_double_collection_1]
    elif len(adj_double_dict) != 0 and len(adj_double_dict[0]) != 2:
        adj_double_dict = [adj_double_dict]
        main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_double_collection_1]

    if len(adj) == 0:
        main_structure_dict_adj = copy.deepcopy(main_structure_dict_adj_backup)

    flag_empty_content = 0

    #print("d8", adj_double_dict)
    #print("adj8", adj)
    #print("8", main_structure_dict_adj)

    # 9.处理 “并且又”结构的定语
    index_content = []
    index_adj = 0
    adj_and_collection = []
    adj_and_collection_1 = []
    try:
        for i in main_structure_dict_adj:
            if i[0][3::] in ["且", "而且", "并且", "并", "而", "又", "而又"]:
                index_adj_and = main_structure_dict_adj.index(i)
                for j in main_structure_dict_adj:
                    index_j = main_structure_dict_adj.index(j)
                    if j[0][3::] == i[0][3::] and i!=j and i[1][0] == j[1][0]:
                        main_structure_dict_adj[index_j] = "NaN"
        for i in main_structure_dict_adj:
            if i == "NaN":
                main_structure_dict_adj.remove(i)
        for i in main_structure_dict_adj:
            if i[0][3::] in ["且", "而且", "并且", "并", "而", "又", "而又"]:
                index_adj_and = main_structure_dict_adj.index(i)
                if (main_structure_dict_adj[index_adj_and - 1][1][2:8] == "000101" or
                        main_structure_dict_adj[index_adj_and - 1][1][9:15] == "000101" or
                        main_structure_dict_adj[index_adj_and - 1][1][16:22] == "000101" or
                        main_structure_dict_adj[index_adj_and - 1][1][23:29] == "000101" or
                        main_structure_dict_adj[index_adj_and - 1][1][30:36] == "000101") and (
                        main_structure_dict_adj[index_adj_and + 1][1][2:8] == "000101" or
                        main_structure_dict_adj[index_adj_and + 1][1][9:15] == "000101" or
                        main_structure_dict_adj[index_adj_and + 1][1][16:22] == "000101" or
                        main_structure_dict_adj[index_adj_and + 1][1][23:29] == "000101" or
                        main_structure_dict_adj[index_adj_and + 1][1][30:36] == "000101") \
                        and (main_structure_dict_adj[index_adj_and + 2][0][3::] in ["的", "之"]) \
                        and (main_structure_dict_adj[index_adj_and + 3][1][2:8] in ["000100", "000111", "010111"] or
                             main_structure_dict_adj[index_adj_and + 3][1][9:15] in ["000100", "000111", "010111"] or
                             main_structure_dict_adj[index_adj_and + 3][1][16:22] in ["000100", "000111", "010111"] or
                             main_structure_dict_adj[index_adj_and + 3][1][23:29] in ["000100", "000111", "010111"] or
                             main_structure_dict_adj[index_adj_and + 3][1][30:36] in ["000100", "000111", "010111"]):
                    adj_and_dict = main_structure_dict_adj[index_adj_and-1:index_adj_and + 3]
                    for g in adj_and_dict:
                        adj_and_collection.append(g)
                    index_content = adj_and_dict[-1]
                    if adj_and_dict != []:
                        index_adj = mark_dict.index(index_content)
                        adj_and_dict.append(index_adj)
                        adj.append(adj_and_dict)
                        flag_empty_content += 1
                elif (main_structure_dict_adj[index_adj_and - 1][1][2:8] == "000101" or
                        main_structure_dict_adj[index_adj_and - 1][1][9:15] == "000101" or
                        main_structure_dict_adj[index_adj_and - 1][1][16:22] == "000101" or
                        main_structure_dict_adj[index_adj_and - 1][1][23:29] == "000101" or
                        main_structure_dict_adj[index_adj_and - 1][1][30:36] == "000101") and (
                        main_structure_dict_adj[index_adj_and + 1][0][3::] in ["且", "而且", "并且", "并", "而", "又", "而又"]) and (
                        main_structure_dict_adj[index_adj_and + 2][1][2:8] == "000101" or
                        main_structure_dict_adj[index_adj_and + 2][1][9:15] == "000101" or
                        main_structure_dict_adj[index_adj_and + 2][1][16:22] == "000101" or
                        main_structure_dict_adj[index_adj_and + 2][1][23:29] == "000101" or
                        main_structure_dict_adj[index_adj_and + 2][1][30:36] == "000101") \
                        and (main_structure_dict_adj[index_adj_and + 3][0][3::] in ["的", "之"]) \
                        and (main_structure_dict_adj[index_adj_and + 4][1][2:8] in ["000100", "000111", "010111"] or
                             main_structure_dict_adj[index_adj_and + 4][1][9:15] in ["000100", "000111", "010111"] or
                             main_structure_dict_adj[index_adj_and + 4][1][16:22] in ["000100", "000111", "010111"] or
                             main_structure_dict_adj[index_adj_and + 4][1][23:29] in ["000100", "000111", "010111"] or
                             main_structure_dict_adj[index_adj_and + 4][1][30:36] in ["000100", "000111", "010111"]):
                    adj_and_dict = main_structure_dict_adj[index_adj_and-1:index_adj_and + 4]
                    for g in adj_and_dict:
                        adj_and_collection.append(g)
                    index_content = adj_and_dict[-1]
                    if adj_and_dict != []:
                        index_adj = mark_dict.index(index_content)
                        adj_and_dict.append(index_adj)
                        adj.append(adj_and_dict)
                        flag_empty_content += 1
      # 找出adj + "并且又而" + adj + "的之"，则全部加入定语部分
    except Exception:
        pass

    try:
        if len(adj_and_dict) == count_dictlen and flag_empty_content == 0:
            adj_and_dict = []

        if len(adj_and_dict) != 0:
            for i in adj_and_dict:
                for j in main_structure_dict_adj:
                    if i[0][3::] == j[0][3::] and i!=j and i[1][0] == j[1][0]:
                        main_structure_dict_adj.remove(j)
    except Exception:
        pass

    for i in adj_and_collection:
        if i not in adj_and_collection_1:
            adj_and_collection_1.append(i)

    if len(adj_and_dict) != 0 and len(adj_and_dict[0]) == 2:
        main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_and_collection_1]
    elif len(adj_and_dict) != 0 and len(adj_and_dict[0]) != 2:
        adj_and_dict = [adj_and_dict]
        main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_and_collection_1]

    if len(adj) == 0:
        main_structure_dict_adj = copy.deepcopy(main_structure_dict_adj_backup)

    flag_empty_content = 0

    #print("d9", adj_and_dict)
    #print("adj9", adj)
    #print("9", main_structure_dict_adj)

    # 10.处理"和、同" + V 结构的定语
    index_content = []
    index_adj = 0
    adj_and_v_collection = []
    adj_and_v_collection_1 = []
    try:
        for i in main_structure_dict_adj:
            if i[0][3::] in ["交接", "交界", "接壤", "毗邻", "比邻", "相交", "交错"]:
                index_adj_and_v = main_structure_dict_adj.index(i)
                if (main_structure_dict_adj[index_adj_and_v + 1][0][3::] in ["的", "之"]) and (
                        main_structure_dict_adj[index_adj_and_v + 2][1][2:8] in ["000100", "000111", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_and_v + 2][1][9:15] in ["000100", "000111", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_and_v + 2][1][16:22] in ["000100", "000111", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_and_v + 2][1][23:29] in ["000100", "000111", "110000", "111011", "010111"] or
                        main_structure_dict_adj[index_adj_and_v + 2][1][30:36] in ["000100", "000111", "110000", "111011", "010111"]):
                    adj_and_v_dict_0 = main_structure_dict_adj[0:index_adj_and_v + 2]
    except IndexError:
        pass

    count_dictlen = len(adj_and_v_dict_0)

    try:
        for i in adj_and_v_dict_0:
            if i[0][3::] in ["和", "同", "与", "跟"]:
                index_adj_and_v_start = adj_and_v_dict.index(i)
                if (adj_and_v_dict_0[index_adj_and_v_start-1][1][2:8] in ["000100", "000111", "110000", "111011", "010111"] or
                        adj_and_v_dict_0[index_adj_and_v_start-1][1][9:15] in ["000100", "000111", "110000", "111011", "010111"] or
                        adj_and_v_dict_0[index_adj_and_v_start-1][1][16:22] in ["000100", "000111", "110000", "111011", "010111"] or
                        adj_and_v_dict_0[index_adj_and_v_start-1][1][23:29] in ["110000", "000111", "110000","111011", "010111"] or
                        adj_and_v_dict_0[index_adj_and_v_start-1][1][30:36] in ["000100", "000111", "110000", "111011", "010111"]):
                    adj_and_v_dict = adj_and_v_dict_0[index_adj_and_v_start-1:index_adj_and_v+2]
                    for g in adj_and_v_dict:
                        adj_and_v_collection.append(i)
                    index_content = adj_and_v_dict[-1]
                    if adj_and_v_dict != []:
                        index_adj = mark_dict.index(index_content)
                        adj_and_v_dict.append(index_adj)
                        adj.append(adj_and_v_dict)
                        flag_empty_content += 1
    except Exception:
        pass


    try:
        if len(adj_and_v_dict) == count_dictlen and flag_empty_content == 0:
            adj_and_v_dict = []

        if len(adj_and_v_dict) != 0:
            for i in adj_and_v_dict:
                for j in main_structure_dict_adj:
                    if i[0][3::] == j[0][3::] and i!=j and i[1][0] == j[1][0]:
                        main_structure_dict_adj.remove(j)
    except Exception:
        pass

    for i in adj_and_v_collection:
        if i not in adj_and_v_collection_1:
            adj_and_v_collection_1.append(i)

    if len(adj_and_v_dict) != 0 and len(adj_and_v_dict[0]) == 2:
        main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_and_v_collection_1]
    elif len(adj_and_v_dict) != 0 and len(adj_and_v_dict[0]) != 2:
        adj_and_v_dict = [adj_and_v_dict]
        main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_and_v_collection_1]

    if len(adj) == 0:
        main_structure_dict_adj = copy.deepcopy(main_structure_dict_adj_backup)

    if len(adj) == 0:
        main_structure_dict_adj = copy.deepcopy(main_structure_dict_adj_backup)

    flag_empty_content = 0

    #print("d10", adj_and_v_dict)
    #print("adj10", adj)
    #print("10", main_structure_dict_adj)

    # 11.处理"属于" + “的之” 结构的定语
    index_content = []
    index_adj = 0
    adj_belong_collection = []
    adj_belong_collection_1 = []
    try:
        for i in main_structure_dict_adj:
            index_adj_belong = main_structure_dict_adj.index(i)
            if (i[0][3::] in ["属于", "算是", "隶属于", "就算是"]):
                for j in main_structure_dict_adj:
                    index_j = main_structure_dict_adj.index(j)
                    if j[0][3::] == i[0][3::] and i != j and i[1][0] == j[1][0]:
                        main_structure_dict_adj[index_j] = "NaN"
                adj_belong_dict_0 = main_structure_dict_adj[index_adj_belong::]
                break
    except Exception:
        pass  # 确定“属于”以后覆盖的部分

    for i in main_structure_dict_adj:
        if i == "NaN":
            main_structure_dict_adj.remove(i)

    for i in adj_belong_dict_0:
        if i == "NaN":
            adj_belong_dict_0.remove(i)

    count_dictlen = len(adj_belong_dict_0)

    try:
        for i in adj_belong_dict_0:
            index_adj_belong_end = adj_belong_dict.index(i)
            if (i[0][3::] == "的" or i[0][3::] == "之") and (
                    adj_belong_dict_0[index_adj_belong_end + 1][1][2:8] == "000100" or
                    adj_belong_dict_0[index_adj_belong_end + 1][1][9:15] == "000100" or
                    adj_belong_dict_0[index_adj_belong_end + 1][1][16:22] == "000100" or
                    adj_belong_dict_0[index_adj_belong_end + 1][1][23:29] == "000100" or
                    adj_belong_dict_0[index_adj_belong_end + 1][1][30:36] == "000100") and (
                    adj_belong_dict_0[index_adj_belong_end + 2][1][2:8] not in ["000111", "110000", "111011", "010111"] and
                    adj_belong_dict_0[index_adj_belong_end + 2][1][9:15] not in ["000111", "110000", "111011", "010111"] and
                    adj_belong_dict_0[index_adj_belong_end + 2][1][16:22] not in ["000111", "110000", "111011", "010111"] and
                    adj_belong_dict_0[index_adj_belong_end + 2][1][23:29] not in ["000111", "110000", "111011", "010111"] and
                    adj_belong_dict_0[index_adj_belong_end + 2][1][30:36] not in ["000111", "110000", "111011", "010111"]):
                adj_belong_dict = adj_belong_dict_0[0:index_adj_belong_end + 1]
                for g in adj_belong_dict:
                    adj_belong_collection.append(g)
                index_content = adj_belong_dict[-1]
                if adj_belong_dict != []:
                    index_adj = mark_dict.index(index_content)
                    adj_belong_dict.append(index_adj)
                    adj.append(adj_belong_dict)
                    flag_empty_content += 1
            elif (i[0][3::] == "的" or i[0][3::] == "之") and (
                    adj_belong_dict_0[index_adj_belong_end + 1][1][2:8] == "000100" or
                    adj_belong_dict_0[index_adj_belong_end + 1][1][9:15] == "000100" or
                    adj_belong_dict_0[index_adj_belong_end + 1][1][16:22] == "000100" or
                    adj_belong_dict_0[index_adj_belong_end + 1][1][23:29] == "000100" or
                    adj_belong_dict_0[index_adj_belong_end + 1][1][30:36] == "000100") and (
                    adj_belong_dict_0[index_adj_belong_end + 2][1][2:8] in ["000111", "110000", "111011", "010111"] or
                    adj_belong_dict_0[index_adj_belong_end + 2][1][9:15] in ["000111", "110000", "111011", "010111"] or
                    adj_belong_dict_0[index_adj_belong_end + 2][1][16:22] in ["000111", "110000", "111011", "010111"] or
                    adj_belong_dict_0[index_adj_belong_end + 2][1][23:29] in ["000111", "110000", "111011", "010111"] or
                    adj_belong_dict_0[index_adj_belong_end + 2][1][30:36] in ["000111", "110000", "111011", "010111"]):
                adj_belong_dict = adj_belong_dict_0[0:index_adj_belong_end + 1]
                for g in adj_belong_dict:
                    adj_belong_collection.append(g)
                index_content = adj_belong_dict[-1]
                if adj_belong_dict != []:
                    index_adj = mark_dict.index(index_content)
                    adj_belong_dict.append(index_adj)
                    adj.append(adj_belong_dict)
                    flag_empty_content += 1
            elif (i[1][2:8] == "000100" or i[1][9:15] == "000100" or i[1][23:29] == "000100" or i[1][30:36] == "000100") and (
                    adj_belong_dict_0[index_adj_belong_end + 1][1][2:8] not in ["000111", "110000", "111011", "010111"] and
                    adj_belong_dict_0[index_adj_belong_end + 1][1][9:15] not in ["000111", "110000", "111011", "010111"] and
                    adj_belong_dict_0[index_adj_belong_end + 1][1][16:22] not in ["000111", "110000", "111011", "010111"] and
                    adj_belong_dict_0[index_adj_belong_end + 1][1][23:29] not in ["000111", "110000", "111011", "010111"] and
                    adj_belong_dict_0[index_adj_belong_end + 1][1][30:36] not in ["000111", "110000", "111011", "010111"]):
                adj_belong_dict = adj_belong_dict_0[0:index_adj_belong_end]
                for g in adj_belong_dict:
                    adj_belong_collection.append(g)
                index_content = adj_belong_dict[-1]
                if adj_belong_dict != []:
                    index_adj = mark_dict.index(index_content)
                    adj_belong_dict.append(index_adj)
                    adj.append(adj_belong_dict)
                    flag_empty_content += 1
            elif (i[1][2:8] == "000100" or i[1][9:15] == "000100" or i[1][23:29] == "000100" or i[1][30:36] == "000100") and (
                    adj_belong_dict_0[index_adj_belong_end + 1][1][2:8] in ["000111", "110000", "111011", "010111"] or
                    adj_belong_dict_0[index_adj_belong_end + 1][1][9:15] in ["000111", "110000", "111011", "010111"] or
                    adj_belong_dict_0[index_adj_belong_end + 1][1][16:22] in ["000111", "110000", "111011", "010111"] or
                    adj_belong_dict_0[index_adj_belong_end + 1][1][23:29] in ["000111", "110000", "111011", "010111"] or
                    adj_belong_dict_0[index_adj_belong_end + 1][1][30:36] in ["000111", "110000", "111011", "010111"]):
                adj_belong_dict = adj_belong_dict_0[0:index_adj_belong_end + 1]
                for g in adj_belong_dict:
                    adj_belong_collection.append(g)
                index_content = adj_belong_dict[-1]
                if adj_belong_dict != []:
                    index_adj = mark_dict.index(index_content)
                    adj_belong_dict.append(index_adj)
                    adj.append(adj_belong_dict)
                    flag_empty_content += 1
      # 如果有“的”或“之”随后，且后面为代+名，则至代部分作为定语，后面只有代，则至代之前部分作为定语
    except Exception:
        pass

    try:
        if len(adj_belong_dict) == count_dictlen and flag_empty_content == 0:
            adj_belong_dict = []
            # 如果找不到结构，则清空这个定语字典

        if len(adj_belong_dict) != 0:
            for i in adj_belong_dict:
                for j in main_structure_dict_adj:
                    if i[0][3::] == j[0][3::] and i!=j and i[1][0] == j[1][0]:
                        main_structure_dict_adj.remove(j)
    except Exception:
        pass

    for i in adj_belong_collection:
        if i not in adj_belong_collection_1:
            adj_belong_collection_1.append(i)

    if len(adj_belong_dict) != 0 and len(adj_belong_dict[0]) == 2:
        main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_belong_collection_1]
    elif len(adj_belong_dict) != 0 and len(adj_belong_dict[0]) != 2:
        adj_belong_dict = [adj_belong_dict]
        main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_belong_collection_1]

    if len(adj) == 0:
        main_structure_dict_adj = copy.deepcopy(main_structure_dict_adj_backup)

    flag_empty_content = 0

    #print("d11", adj_belong_dict)
    #print("adj11", adj)
    #print("11", main_structure_dict_adj)

    # 12.处理简单"的之"结构的定语
    index_content = []
    index_adj = 0
    adj_de_single_collection = []
    adj_de_single_collection_1 = []
    try:
        for i in main_structure_dict_adj:
            index_adj_de_single = main_structure_dict_adj.index(i)
            if (i[0][3::] in ["的", "之"]) and (
                    main_structure_dict_adj[index_adj_de_single + 1][1][2:8] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single + 1][1][9:15] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single + 1][1][16:22] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single + 1][1][23:29] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single + 1][1][30:36] in ["000111", "000100", "010111"]):
                adj_de_single_dict_0 = main_structure_dict_adj[0:index_adj_de_single+1]
                if (main_structure_dict_adj[index_adj_de_single - 1][1][2:8] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single - 1][1][9:15] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single - 1][1][16:22] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single - 1][1][23:29] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single - 1][1][30:36] in ["000111", "000100", "010111"]):
                    adj_de_single_dict = main_structure_dict_adj[index_adj_de_single - 1:index_adj_de_single + 1]
                    if (main_structure_dict_adj[index_adj_de_single - 2][1][2:8] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single - 2][1][9:15] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single - 2][1][16:22] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single - 2][1][23:29] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single - 2][1][30:36] in ["000111", "000100", "010111"]):
                        adj_de_single_dict = main_structure_dict_adj[index_adj_de_single - 2:index_adj_de_single + 1]
                        if (main_structure_dict_adj[index_adj_de_single - 3][1][2:8] in ["000111", "000100","010111"] or
                                main_structure_dict_adj[index_adj_de_single - 3][1][9:15] in ["000111", "000100","010111"] or
                                main_structure_dict_adj[index_adj_de_single - 3][1][16:22] in ["000111", "000100","010111"] or
                                main_structure_dict_adj[index_adj_de_single - 3][1][23:29] in ["000111", "000100","010111"] or
                                main_structure_dict_adj[index_adj_de_single - 3][1][30:36] in ["000111", "000100","010111"]):
                            adj_de_single_dict = main_structure_dict_adj[index_adj_de_single - 3:index_adj_de_single + 1]
                            if (main_structure_dict_adj[index_adj_de_single - 4][1][2:8] in ["000111", "000100","010111"] or
                                    main_structure_dict_adj[index_adj_de_single - 4][1][9:15] in ["000111", "000100","010111"] or
                                    main_structure_dict_adj[index_adj_de_single - 4][1][16:22] in ["000111", "000100","010111"] or
                                    main_structure_dict_adj[index_adj_de_single - 4][1][23:29] in ["000111", "000100","010111"] or
                                    main_structure_dict_adj[index_adj_de_single - 4][1][30:36] in ["000111", "000100","010111"]):
                                adj_de_single_dict = main_structure_dict_adj[index_adj_de_single - 4:index_adj_de_single + 1]
                        for g in adj_de_single_dict:
                            adj_de_single_collection.append(g)
                break
            elif (i[0][3::] in ["的", "之"]) and (
                    main_structure_dict_adj[index_adj_de_single + 1][1][2:8] == "000010" or
                    main_structure_dict_adj[index_adj_de_single + 1][1][9:15] == "000010" or
                    main_structure_dict_adj[index_adj_de_single + 1][1][16:22] == "000010" or
                    main_structure_dict_adj[index_adj_de_single + 1][1][23:29] == "000010" or
                    main_structure_dict_adj[index_adj_de_single + 1][1][30:36] == "000010") and (
                    main_structure_dict_adj[index_adj_de_single + 2][1][2:8] == "000011" or
                    main_structure_dict_adj[index_adj_de_single + 2][1][9:15] == "000011" or
                    main_structure_dict_adj[index_adj_de_single + 2][1][16:22] == "000011" or
                    main_structure_dict_adj[index_adj_de_single + 2][1][23:29] == "000011" or
                    main_structure_dict_adj[index_adj_de_single + 2][1][30:36] == "000011"):
                adj_de_single_dict_0 = main_structure_dict_adj[0:index_adj_de_single+1]
                if (main_structure_dict_adj[index_adj_de_single - 1][1][2:8] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single - 1][1][9:15] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single - 1][1][16:22] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single - 1][1][23:29] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single - 1][1][30:36] in ["000111", "000100", "010111"]):
                    adj_de_single_dict = main_structure_dict_adj[index_adj_de_single - 1:index_adj_de_single + 1]
                    if (main_structure_dict_adj[index_adj_de_single - 2][1][2:8] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single - 2][1][9:15] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single - 2][1][16:22] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single - 2][1][23:29] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single - 2][1][30:36] in ["000111", "000100", "010111"]):
                        adj_de_single_dict = main_structure_dict_adj[index_adj_de_single - 2:index_adj_de_single + 1]
                        if (main_structure_dict_adj[index_adj_de_single - 3][1][2:8] in ["000111", "000100","010111"] or
                                main_structure_dict_adj[index_adj_de_single - 3][1][9:15] in ["000111", "000100","010111"] or
                                main_structure_dict_adj[index_adj_de_single - 3][1][16:22] in ["000111", "000100","010111"] or
                                main_structure_dict_adj[index_adj_de_single - 3][1][23:29] in ["000111", "000100","010111"] or
                                main_structure_dict_adj[index_adj_de_single - 3][1][30:36] in ["000111", "000100","010111"]):
                            adj_de_single_dict = main_structure_dict_adj[index_adj_de_single - 3:index_adj_de_single + 1]
                            if (main_structure_dict_adj[index_adj_de_single - 4][1][2:8] in ["000111", "000100","010111"] or
                                    main_structure_dict_adj[index_adj_de_single - 4][1][9:15] in ["000111", "000100","010111"] or
                                    main_structure_dict_adj[index_adj_de_single - 4][1][16:22] in ["000111", "000100","010111"] or
                                    main_structure_dict_adj[index_adj_de_single - 4][1][23:29] in ["000111", "000100","010111"] or
                                    main_structure_dict_adj[index_adj_de_single - 4][1][30:36] in ["000111", "000100","010111"]):
                                adj_de_single_dict = main_structure_dict_adj[index_adj_de_single - 4:index_adj_de_single + 1]
                    for g in adj_de_single_dict:
                        adj_de_single_collection.append(g)
                break
            elif (i[0][3::] in ["的", "之"]) and (
                    main_structure_dict_adj[index_adj_de_single + 1][1][2:8] in ["111101", "110000"] or
                    main_structure_dict_adj[index_adj_de_single + 1][1][9:15] in ["111101", "110000"] or
                    main_structure_dict_adj[index_adj_de_single + 1][1][16:22] in ["111101", "110000"] or
                    main_structure_dict_adj[index_adj_de_single + 1][1][23:29] in ["111101", "110000"] or
                    main_structure_dict_adj[index_adj_de_single + 1][1][30:36] in ["111101", "110000"]) and (
                    main_structure_dict_adj[index_adj_de_single + 2][1][2:8] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single + 2][1][9:15] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single + 2][1][16:22] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single + 2][1][23:29] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single + 2][1][30:36] in ["000111", "000100", "010111"]):
                adj_de_single_dict_0 = main_structure_dict_adj[0:index_adj_de_single+2]
                if (main_structure_dict_adj[index_adj_de_single - 1][1][2:8] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single - 1][1][9:15] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single - 1][1][16:22] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single - 1][1][23:29] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single - 1][1][30:36] in ["000111", "000100", "010111"]):
                    adj_de_single_dict = main_structure_dict_adj[index_adj_de_single - 1:index_adj_de_single + 1]
                    if (main_structure_dict_adj[index_adj_de_single - 2][1][2:8] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single - 2][1][9:15] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single - 2][1][16:22] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single - 2][1][23:29] in ["000111", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_de_single - 2][1][30:36] in ["000111", "000100", "010111"]):
                        adj_de_single_dict = main_structure_dict_adj[index_adj_de_single - 2:index_adj_de_single + 1]
                        if (main_structure_dict_adj[index_adj_de_single - 3][1][2:8] in ["000111", "000100","010111"] or
                                main_structure_dict_adj[index_adj_de_single - 3][1][9:15] in ["000111", "000100","010111"] or
                                main_structure_dict_adj[index_adj_de_single - 3][1][16:22] in ["000111", "000100","010111"] or
                                main_structure_dict_adj[index_adj_de_single - 3][1][23:29] in ["000111", "000100","010111"] or
                                main_structure_dict_adj[index_adj_de_single - 3][1][30:36] in ["000111", "000100","010111"]):
                            adj_de_single_dict = main_structure_dict_adj[index_adj_de_single - 3:index_adj_de_single + 1]
                            if (main_structure_dict_adj[index_adj_de_single - 4][1][2:8] in ["000111", "000100","010111"] or
                                    main_structure_dict_adj[index_adj_de_single - 4][1][9:15] in ["000111", "000100","010111"] or
                                    main_structure_dict_adj[index_adj_de_single - 4][1][16:22] in ["000111", "000100","010111"] or
                                    main_structure_dict_adj[index_adj_de_single - 4][1][23:29] in ["000111", "000100","010111"] or
                                    main_structure_dict_adj[index_adj_de_single - 4][1][30:36] in ["000111", "000100","010111"]):
                                adj_de_single_dict = main_structure_dict_adj[index_adj_de_single - 4:index_adj_de_single + 1]
                    for g in adj_de_single_dict:
                        adj_de_single_collection.append(g)
                break
    except Exception:
        pass

    if len(adj_de_single_dict) != 0:
        index_adj = mark_dict.index(adj_de_single_dict[0])
        adj_de_single_dict.append(index_adj)
        adj.append(adj_de_single_dict)
    #print("adj_de_single_dict_0", adj_de_single_dict_0)
    #print("adj_de_single_dict", adj_de_single_dict)

    count_dictlen = len(adj_de_single_dict_0)

    try:
        if len(adj_de_single_dict) != 0:
            for i in adj_de_single_dict_0:
                index_adj_de_single_start = adj_de_single_dict_0.index(i)
                if (i[1][2:8] == "000001" or i[1][9:15] == "000001" or i[1][16:22] == "000001" or i[1][23:29] == "000001" or i[1][30:36] == "000001"):
                    for j in adj_de_single_dict_0:
                        index_j = adj_de_single_dict_0.index(j)
                        if j[0][3::] == i[0][3::] and i!=j and i[1][0] == j[1][0]:
                            adj_de_single_dict_0[index_j] = "NaN"
                    for j in adj_de_single_dict_0:
                        if j == "NaN":
                            adj_de_single_dict_0.remove(j)
                    index_adj_de_single_start = adj_de_single_dict_0.index(i)
                    if (adj_de_single_dict_0[index_adj_de_single_start + 1][1][2:8] != "110101" and
                        adj_de_single_dict_0[index_adj_de_single_start + 1][1][9:15] != "110101" and
                        adj_de_single_dict_0[index_adj_de_single_start + 1][1][16:22] != "110101" and
                        adj_de_single_dict_0[index_adj_de_single_start + 1][1][23:29] != "110101" and
                        adj_de_single_dict_0[index_adj_de_single_start + 1][1][30:36] != "110101"):
                        adj_de_single_dict = adj_de_single_dict_0[index_adj_de_single_start + 1::]
                        for g in adj_de_single_dict:
                            adj_de_single_collection.append(g)
                        index_content = adj_de_single_dict[-1]
                        if adj_de_single_dict != []:
                            index_adj = mark_dict.index(index_content)
                            adj_de_single_dict.append(index_adj)
                            adj.append(adj_de_single_dict)
                            flag_empty_content += 1
                        #print("1", adj_de_single_dict)
                        break
                    elif (adj_de_single_dict_0[index_adj_de_single_start + 1][1][2:8]  == "110101" or
                          adj_de_single_dict_0[index_adj_de_single_start + 1][1][9:15] == "110101" or
                          adj_de_single_dict_0[index_adj_de_single_start + 1][1][16:22] == "110101" or
                          adj_de_single_dict_0[index_adj_de_single_start + 1][1][23:29] == "110101" or
                          adj_de_single_dict_0[index_adj_de_single_start + 1][1][30:36] == "110101"):
                        adj_de_single_dict = adj_de_single_dict_0[index_adj_de_single_start + 2::]
                        for g in adj_de_single_dict:
                            adj_de_single_collection.append(g)
                        index_content = adj_de_single_dict[-1]
                        if adj_de_single_dict != []:
                            index_adj = mark_dict.index(index_content)
                            adj_de_single_dict.append(index_adj)
                            adj.append(adj_de_single_dict)
                            flag_empty_content += 1
                        #print("2", adj_de_single_dict)
                        break
    except Exception:
        pass

    try:
        if len(adj_de_single_dict) == count_dictlen and flag_empty_content == 0:
            adj_de_single_dict = []
            # 如果找不到结构，则清空这个定语字典

        if len(adj_de_single_dict) != 0:
            for i in adj_de_single_dict:
                for j in main_structure_dict_adj:
                    if i[0][3::] == j[0][3::] and i!=j and i[1][0]==j[1][0]:
                        main_structure_dict_adj.remove(j)
    except Exception:
        pass

    for i in adj_de_single_collection:
        if i not in adj_de_single_collection_1:
            adj_de_single_collection_1.append(i)

    if len(adj_de_single_dict)!=0 and len(adj_de_single_dict[0]) == 2:
        main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_de_single_collection_1]
    elif len(adj_de_single_dict) != 0 and len(adj_de_single_dict[0]) != 2:
        adj_de_single_dict = [adj_de_single_dict]
        main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_de_single_collection_1]

    if len(adj) == 0:
        main_structure_dict_adj = copy.deepcopy(main_structure_dict_adj_backup)

    flag_empty_content = 0

    #print("d12", adj_de_single_dict)
    #print("adj12", adj)
    #print("12", main_structure_dict_adj)

    #13. 处理“近六成人口”的定语
    index_content = []
    index_adj = 0
    adj_near_dict = []
    adj_near_collection = []
    adj_near_collection_1 = []

    try:
        for i in main_structure_dict_adj:
            index_adj_near = main_structure_dict_adj.index(i)
            #print("5", main_structure_dict_adj[index_adj_near + 5])
            if (i[0][3::] in ["近", "几乎", "近乎", "差不多"]) and (
                    main_structure_dict_adj[index_adj_near + 1][1][2:8] in ["000101", "000010"] or
                    main_structure_dict_adj[index_adj_near + 1][1][9:15] in ["000101", "000010"] or
                    main_structure_dict_adj[index_adj_near + 1][1][16:22] in ["000101", "000010"] or
                    main_structure_dict_adj[index_adj_near + 1][1][23:29] in ["000101", "000010"] or
                    main_structure_dict_adj[index_adj_near + 1][1][30:36] in ["000101", "000010"]) and (
                    main_structure_dict_adj[index_adj_near + 2][1][2:8] in ["000011", "000111", "000101", "000010", "111011", "110000", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_near + 2][1][9:15] in ["000011", "000111", "000101", "000010", "111011", "110000", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_near + 2][1][16:22] in ["000011", "000111", "000101", "000010", "111011", "110000", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_near + 2][1][23:29] in ["000011", "000111", "000101", "000010", "111011", "110000", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_near + 2][1][30:36] in ["000011", "000111", "000101", "000010", "111011", "110000", "000100", "010111"]) and (
                    main_structure_dict_adj[index_adj_near + 3][1][2:8] in ["000111", "000101", "000010", "111011", "110000"] or
                    main_structure_dict_adj[index_adj_near + 3][1][9:15] in ["000111", "000101", "000010", "111011", "110000"] or
                    main_structure_dict_adj[index_adj_near + 3][1][16:22] in ["000111", "000101", "000010", "111011", "110000"] or
                    main_structure_dict_adj[index_adj_near + 3][1][23:29] in ["000111", "000101", "000010", "111011", "110000"] or
                    main_structure_dict_adj[index_adj_near + 3][1][30:36] in ["000111", "000101", "000010", "111011", "110000"]) and (
                    main_structure_dict_adj[index_adj_near + 4][1][2:8] in ["000111", "000101", "000010", "111011","110000"] or
                    main_structure_dict_adj[index_adj_near + 4][1][9:15] in ["000111", "000101", "000010", "111011", "110000"] or
                    main_structure_dict_adj[index_adj_near + 4][1][16:22] in ["000111", "000101", "000010", "111011", "110000"] or
                    main_structure_dict_adj[index_adj_near + 4][1][23:29] in ["000111", "000101", "000010", "111011", "110000"] or
                    main_structure_dict_adj[index_adj_near + 4][1][30:36] in ["000111", "000101", "000010", "111011", "110000"]) and (
                    main_structure_dict_adj[index_adj_near + 5][1][2:8] in ["000111", "000101", "000010", "111011","110000"] or
                    main_structure_dict_adj[index_adj_near + 5][1][9:15] in ["000111", "000101", "000010", "111011", "110000"] or
                    main_structure_dict_adj[index_adj_near + 5][1][16:22] in ["000111", "000101", "000010", "111011", "110000"] or
                    main_structure_dict_adj[index_adj_near + 5][1][23:29] in ["000111", "000101", "000010", "111011", "110000"] or
                    main_structure_dict_adj[index_adj_near + 5][1][30:36] in ["000111", "000101", "000010", "111011", "110000"]):
                #print("ok1")
                adj_near_dict = main_structure_dict_adj[index_adj_near:index_adj_near + 4]
                if adj_near_dict != []:
                    for g in adj_near_dict:
                        adj_near_collection.append(g)
                if adj_near_dict != []:
                    index_content = adj_near_dict[-1]
                    index_adj = mark_dict.index(index_content)
                    adj_near_dict.append(index_adj)
                    adj.append(adj_near_dict)
                break
            elif (i[0][3::] in ["近", "几乎", "近乎", "差不多"]) and (
                    main_structure_dict_adj[index_adj_near + 1][1][2:8] in ["000101", "000010"] or
                    main_structure_dict_adj[index_adj_near + 1][1][9:15] in ["000101", "000010"] or
                    main_structure_dict_adj[index_adj_near + 1][1][16:22] in ["000101", "000010"] or
                    main_structure_dict_adj[index_adj_near + 1][1][23:29] in ["000101", "000010"] or
                    main_structure_dict_adj[index_adj_near + 1][1][30:36] in ["000101", "000010"]) and (
                    main_structure_dict_adj[index_adj_near + 2][1][2:8] in ["000111", "000101", "000010", "111011", "110000", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_near + 2][1][9:15] in ["000111", "000101", "000010", "111011", "110000", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_near + 2][1][16:22] in ["000111", "000101", "000010", "111011", "110000", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_near + 2][1][23:29] in ["000111", "000101", "000010", "111011", "110000", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_near + 2][1][30:36] in ["000111", "000101", "000010", "111011", "110000", "000100", "010111"]) and (
                    main_structure_dict_adj[index_adj_near + 3][1][2:8] in ["000111", "000101", "000010", "111011", "110000"] or
                    main_structure_dict_adj[index_adj_near + 3][1][9:15] in ["000111", "000101", "000010", "111011", "110000"] or
                    main_structure_dict_adj[index_adj_near + 3][1][16:22] in ["000111", "000101", "000010", "111011", "110000"] or
                    main_structure_dict_adj[index_adj_near + 3][1][23:29] in ["000111", "000101", "000010", "111011", "110000"] or
                    main_structure_dict_adj[index_adj_near + 3][1][30:36] in ["000111", "000101", "000010", "111011", "110000"]) and (
                    main_structure_dict_adj[index_adj_near + 4][1][2:8] in ["000111", "000101", "000010", "111011","110000"] or
                    main_structure_dict_adj[index_adj_near + 4][1][9:15] in ["000111", "000101", "000010", "111011", "110000"] or
                    main_structure_dict_adj[index_adj_near + 4][1][16:22] in ["000111", "000101", "000010", "111011", "110000"] or
                    main_structure_dict_adj[index_adj_near + 4][1][23:29] in ["000111", "000101", "000010", "111011", "110000"] or
                    main_structure_dict_adj[index_adj_near + 4][1][30:36] in ["000111", "000101", "000010", "111011", "110000"]) and (
                    main_structure_dict_adj[index_adj_near + 5][1][2:8] in ["000001", "000101", "110101", "000110", "111110"] or
                    main_structure_dict_adj[index_adj_near + 5][1][9:15] in ["000001", "000101", "110101", "000110", "111110"] or
                    main_structure_dict_adj[index_adj_near + 5][1][16:22] in ["000001", "000101", "110101", "000110", "111110"] or
                    main_structure_dict_adj[index_adj_near + 5][1][23:29] in ["000001", "000101", "110101", "000110", "111110"] or
                    main_structure_dict_adj[index_adj_near + 5][1][30:36] in ["000001", "000101", "110101", "000110", "111110"]):
                #print("ok2")
                adj_near_dict = main_structure_dict_adj[index_adj_near:index_adj_near + 4]
                if adj_near_dict != []:
                    for g in adj_near_dict:
                        adj_near_collection.append(g)
                if adj_near_dict != []:
                    index_content = adj_near_dict[-1]
                    index_adj = mark_dict.index(index_content)
                    adj_near_dict.append(index_adj)
                    adj.append(adj_near_dict)
                break
            elif (i[0][3::] in ["近", "几乎", "近乎", "差不多"]) and (
                    main_structure_dict_adj[index_adj_near + 1][1][2:8] in ["000101", "000010"] or
                    main_structure_dict_adj[index_adj_near + 1][1][9:15] in ["000101", "000010"] or
                    main_structure_dict_adj[index_adj_near + 1][1][16:22] in ["000101", "000010"] or
                    main_structure_dict_adj[index_adj_near + 1][1][23:29] in ["000101", "000010"] or
                    main_structure_dict_adj[index_adj_near + 1][1][30:36] in ["000101", "000010"]) and (
                    main_structure_dict_adj[index_adj_near + 2][1][2:8] in ["000111", "000101", "000010", "111011", "110000", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_near + 2][1][9:15] in ["000111", "000101", "000010", "111011", "110000", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_near + 2][1][16:22] in ["000111", "000101", "000010", "111011", "110000", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_near + 2][1][23:29] in ["000111", "000101", "000010", "111011", "110000", "000100", "010111"] or
                    main_structure_dict_adj[index_adj_near + 2][1][30:36] in ["000111", "000101", "000010", "111011", "110000", "000100", "010111"]) and (
                    main_structure_dict_adj[index_adj_near + 3][1][2:8] in ["000111", "000101", "000010", "111011", "110000"] or
                    main_structure_dict_adj[index_adj_near + 3][1][9:15] in ["000111", "000101", "000010", "111011", "110000"] or
                    main_structure_dict_adj[index_adj_near + 3][1][16:22] in ["000111", "000101", "000010", "111011", "110000"] or
                    main_structure_dict_adj[index_adj_near + 3][1][23:29] in ["000111", "000101", "000010", "111011", "110000"] or
                    main_structure_dict_adj[index_adj_near + 3][1][30:36] in ["000111", "000101", "000010", "111011", "110000"]) and (
                    main_structure_dict_adj[index_adj_near + 4][1][2:8] in ["000001", "000101", "110101", "000110", "111110"] or
                    main_structure_dict_adj[index_adj_near + 4][1][9:15] in ["000001", "000101", "110101", "000110", "111110"] or
                    main_structure_dict_adj[index_adj_near + 4][1][16:22] in ["000001", "000101", "110101", "000110", "111110"] or
                    main_structure_dict_adj[index_adj_near + 4][1][23:29] in ["000001", "000101", "110101", "000110", "111110"] or
                    main_structure_dict_adj[index_adj_near + 4][1][30:36] in ["000001", "000101", "110101", "000110", "111110"]):
                #print("ok3")
                adj_near_dict = main_structure_dict_adj[index_adj_near:index_adj_near + 3]
                if adj_near_dict != []:
                    for g in adj_near_dict:
                        adj_near_collection.append(g)
                if adj_near_dict != []:
                    index_content = adj_near_dict[-1]
                    index_adj = mark_dict.index(index_content)
                    adj_near_dict.append(index_adj)
                    adj.append(adj_near_dict)
                break
            elif (i[0][3::] in ["近", "几乎", "近乎", "差不多"]) and (
                    main_structure_dict_adj[index_adj_near + 1][1][2:8] in ["000101", "000010"] or
                    main_structure_dict_adj[index_adj_near + 1][1][9:15] in ["000101", "000010"] or
                    main_structure_dict_adj[index_adj_near + 1][1][16:22] in ["000101", "000010"] or
                    main_structure_dict_adj[index_adj_near + 1][1][23:29] in ["000101", "000010"] or
                    main_structure_dict_adj[index_adj_near + 1][1][30:36] in ["000101", "000010"]) and (
                    main_structure_dict_adj[index_adj_near + 2][1][2:8] in ["000100", "010111"] or
                    main_structure_dict_adj[index_adj_near + 2][1][9:15] in ["000100", "010111"] or
                    main_structure_dict_adj[index_adj_near + 2][1][16:22] in ["000100", "010111"] or
                    main_structure_dict_adj[index_adj_near + 2][1][23:29] in ["000100", "010111"] or
                    main_structure_dict_adj[index_adj_near + 2][1][30:36] in ["000100", "010111"]) and (
                    main_structure_dict_adj[index_adj_near + 3][1][2:8] in ["000001", "000101", "110101", "000110", "111110"] or
                    main_structure_dict_adj[index_adj_near + 3][1][9:15] in ["000001", "000101", "110101", "000110", "111110"] or
                    main_structure_dict_adj[index_adj_near + 3][1][16:22] in ["000001", "000101", "110101", "000110", "111110"] or
                    main_structure_dict_adj[index_adj_near + 3][1][23:29] in ["000001", "000101", "110101", "000110", "111110"] or
                    main_structure_dict_adj[index_adj_near + 3][1][30:36] in ["000001", "000101", "110101", "000110", "111110"]):
                #print("ok4")
                adj_near_dict = main_structure_dict_adj[index_adj_near:index_adj_near + 2]
                if adj_near_dict != []:
                    for g in adj_near_dict:
                        adj_near_collection.append(g)
                if adj_near_dict != []:
                    index_content = adj_near_dict[-1]
                    index_adj = mark_dict.index(index_content)
                    adj_near_dict.append(index_adj)
                    adj.append(adj_near_dict)
                break
    except Exception:
        pass

    #print("adj_near_dict", adj_near_dict)

    if len(adj_near_collection) != 0:
        for i in adj_near_collection:
            if i not in adj_near_collection_1:
                adj_near_collection_1.append(i)

    if len(adj_near_dict)!= 0 and len(adj_near_dict[0]) == 2:
        main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_near_collection_1]
    elif len(adj_n_1_dict) != 0 and len(adj_n_1_dict[0]) != 2:
        adj_near_dict = [adj_near_dict]
        main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_near_collection_1]

    if len(adj) == 0:
        main_structure_dict_adj = copy.deepcopy(main_structure_dict_adj_backup)

    #print("main_structure_dict_adj", main_structure_dict_adj)

    flag_empty_content = 0

    #print("d13", adj_near_dict)
    #print("adj13", adj)

    # 13.5 处理无“的之”的定语-前面为代词/形容词/名词/yp词
    index_content = []
    index_adj = 0
    adj_n_1_dict = []
    adj_n_1_collection = []
    adj_n_1_collection_1 = []
    try:
        for i in main_structure_dict_adj:
            index_adj_n_1 = main_structure_dict_adj.index(i)
            if (i[1][2:8] == "000111" or i[1][9:15] == "000111" or i[1][16:22] == "000111" or i[1][23:29] == "000111" or i[1][30:36] == "000111") and (i[1][2:8] != "000001") and (
                    main_structure_dict_adj[index_adj_n_1 - 1][1][2:8] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 1][1][9:15] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 1][1][16:22] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 1][1][23:29] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 1][1][30:36] in ["000111", "000101", "010111", "000010"]) and (
                    main_structure_dict_adj[index_adj_n_1 - 2][1][2:8] in ["000100", "010111"] or
                    main_structure_dict_adj[index_adj_n_1 - 2][1][9:15] in ["000100", "010111"] or
                    main_structure_dict_adj[index_adj_n_1 - 2][1][16:22] in ["000100", "010111"] or
                    main_structure_dict_adj[index_adj_n_1 - 2][1][23:29] in ["000100", "010111"] or
                    main_structure_dict_adj[index_adj_n_1 - 2][1][30:36] in ["000100", "010111"]) and (
                    main_structure_dict_adj[index_adj_n_1 + 1][1][2:8] not in ["000001", "000101", "000111", "010111", "000010"] and
                    main_structure_dict_adj[index_adj_n_1 + 1][1][9:15] not in ["000001", "000101", "000111", "010111", "000010"] and
                    main_structure_dict_adj[index_adj_n_1 + 1][1][16:22] not in ["000001", "000101", "000111", "010111", "000010"] and
                    main_structure_dict_adj[index_adj_n_1 + 1][1][23:29] not in ["000001", "000101", "000111", "010111", "000010"] and
                    main_structure_dict_adj[index_adj_n_1 + 1][1][30:36] not in ["000001", "000101", "000111", "010111", "000010"]):
                #print("ok1")
                adj_n_1_dict = main_structure_dict_adj[index_adj_n_1 -2:index_adj_n_1]
                for g in adj_n_1_dict:
                    if g[1][2:8] == "000001" or g[1][9:15] == "000001" or g[1][16:22] == "000001" or g[1][23:29] == "000001" or g[1][30:36] == "000001":
                        adj_n_1_dict = []
                        break
                if adj_n_1_dict != []:
                    for g in adj_n_1_dict:
                        adj_n_1_collection.append(g)
                if adj_n_1_dict != []:
                    index_content = adj_n_1_dict[-1]
                    index_adj = mark_dict.index(index_content)
                    adj_n_1_dict.append(index_adj)
                    adj.append(adj_n_1_dict)
                #print("2",adj_n_1_dict)
            elif (i[1][2:8] == "000111" or i[1][9:15] == "000111" or i[1][16:22] == "000111" or i[1][23:29] == "000111" or i[1][30:36] == "000111") and (i[1][2:8] != "000001") and (
                    main_structure_dict_adj[index_adj_n_1 - 1][1][2:8] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 1][1][9:15] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 1][1][16:22] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 1][1][23:29] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 1][1][30:36] in ["000111", "000101", "010111", "000010"]) and (
                    main_structure_dict_adj[index_adj_n_1 - 2][1][2:8] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 2][1][9:15] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 2][1][16:22] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 2][1][23:29] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 2][1][30:36] in ["000111", "000101", "010111", "000010"]) and (
                    main_structure_dict_adj[index_adj_n_1 - 3][1][2:8] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 3][1][9:15] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 3][1][16:22] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 3][1][23:29] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 3][1][30:36] in ["000111", "000101", "010111", "000010"]) and (main_structure_dict_adj[index_adj_n_1 - 4][1][2:8] not in ["110011", "110101", "000110", "111110"] and
                    main_structure_dict_adj[index_adj_n_1 - 4][1][9:15] not in ["110011", "110101", "000110", "111110"] and
                    main_structure_dict_adj[index_adj_n_1 - 4][1][16:22] not in ["110011", "110101", "000110", "111110"] and
                    main_structure_dict_adj[index_adj_n_1 - 4][1][23:29] not in ["110011", "110101", "000110", "111110"] and
                    main_structure_dict_adj[index_adj_n_1 - 4][1][30:36] not in ["110011", "110101", "000110", "111110"]) and (
                    main_structure_dict_adj[index_adj_n_1 + 1][1][2:8] in ["000001", "000110", "110101", "000101"] or
                    main_structure_dict_adj[index_adj_n_1 + 1][1][9:15] in ["000001", "000110", "110101", "000101"] or
                    main_structure_dict_adj[index_adj_n_1 + 1][1][16:22] in ["000001", "000110", "110101", "000101"] or
                    main_structure_dict_adj[index_adj_n_1 + 1][1][23:29] in ["000001", "000110", "110101", "000101"] or
                    main_structure_dict_adj[index_adj_n_1 + 1][1][30:36] in ["000001", "000110", "110101", "000101"]):
                #print("ok2")
                adj_n_1_dict = main_structure_dict_adj[index_adj_n_1 -3:index_adj_n_1]
                #print("adj_n_1_dict", adj_n_1_dict)
                for g in adj_n_1_dict:
                    if g[1][2:8] == "000001" or g[1][9:15] == "000001" or g[1][16:22] == "000001" or g[1][23:29] == "000001" or g[1][30:36] == "000001":
                        adj_n_1_dict = []
                        break
                if adj_n_1_dict != []:
                    for g in adj_n_1_dict:
                        adj_n_1_collection.append(g)
                if adj_n_1_dict != []:
                    index_content = adj_n_1_dict[-1]
                    index_adj = mark_dict.index(index_content)
                    adj_n_1_dict.append(index_adj)
                    adj.append(adj_n_1_dict)
                #print("-1", adj_n_1_dict)
            elif (i[1][2:8] == "000111" or i[1][9:15] == "000111" or i[1][16:22] == "000111" or i[1][23:29] == "000111" or i[1][30:36] == "000111") and (i[1][2:8] != "000001") and (
                    main_structure_dict_adj[index_adj_n_1 - 1][1][2:8] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 1][1][9:15] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 1][1][16:22] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 1][1][23:29] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 1][1][30:36] in ["000111", "000101", "010111", "000010"]
            ) and (index_adj_n_1 - 1 == 0) and (main_structure_dict_adj[index_adj_n_1 + 1][1][2:8] in ["000001", "110101", "000011", "111110"] or
                    main_structure_dict_adj[index_adj_n_1 + 1][1][9:15] in ["000001", "110101", "000011", "111110"] or
                    main_structure_dict_adj[index_adj_n_1 + 1][1][16:22] in ["000001", "110101", "000011", "111110"] or
                    main_structure_dict_adj[index_adj_n_1 + 1][1][23:29] in ["000001", "110101", "000011", "111110"] or
                    main_structure_dict_adj[index_adj_n_1 + 1][1][30:36] in ["000001", "110101", "000011", "111110"]):
                #print("ok3")
                adj_n_1_dict = main_structure_dict_adj[index_adj_n_1 -1:index_adj_n_1]
                for g in adj_n_1_dict:
                    if g[1][2:8] == "000001" or g[1][9:15] == "000001" or g[1][16:22] == "000001" or g[1][23:29] == "000001" or g[1][30:36] == "000001":
                        adj_n_1_dict = []
                        break
                if adj_n_1_dict != []:
                    for g in adj_n_1_dict:
                        adj_n_1_collection.append(g)
                if adj_n_1_dict != []:
                    index_content = adj_n_1_dict[-1]
                    index_adj = mark_dict.index(index_content)
                    adj_n_1_dict.append(index_adj)
                    adj.append(adj_n_1_dict)
                #print("0", adj_n_1_dict)
            elif (i[1][2:8] == "000111" or i[1][9:15] == "000111" or i[1][16:22] == "000111" or i[1][23:29] == "000111" or i[1][30:36] == "000111") and (i[1][2:8] != "000001") and (
                    main_structure_dict_adj[index_adj_n_1 - 1][1][2:8] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 1][1][9:15] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 1][1][16:22] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 1][1][23:29] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 1][1][30:36] in ["000111", "000101", "010111", "000010"]
            ) and (index_adj_n_1 - 1 == 0) and (
                    main_structure_dict_adj[index_adj_n_1 + 1][1][2:8] in ["000111", "000101", "010111"] or
                    main_structure_dict_adj[index_adj_n_1 + 1][1][9:15] in ["000111", "000101", "010111"] or
                    main_structure_dict_adj[index_adj_n_1 + 1][1][16:22] in ["000111", "000101", "010111"] or
                    main_structure_dict_adj[index_adj_n_1 + 1][1][23:29] in ["000111", "000101", "010111"] or
                    main_structure_dict_adj[index_adj_n_1 + 1][1][30:36] in ["000111", "000101", "010111"]) and (main_structure_dict_adj[index_adj_n_1 + 2][1][2:8] in ["000001", "110101", "000011", "111110"] or
                    main_structure_dict_adj[index_adj_n_1 + 2][1][9:15] in ["000001", "110101", "000011", "111110"] or
                    main_structure_dict_adj[index_adj_n_1 + 2][1][16:22] in ["000001", "110101", "000011", "111110"] or
                    main_structure_dict_adj[index_adj_n_1 + 2][1][23:29] in ["000001", "110101", "000011", "111110"] or
                    main_structure_dict_adj[index_adj_n_1 + 2][1][30:36] in ["000001", "110101", "000011", "111110"]):
                #print("ok4")
                adj_n_1_dict = main_structure_dict_adj[index_adj_n_1 -1:index_adj_n_1+1]
                for g in adj_n_1_dict:
                    if g[1][2:8] == "000001" or g[1][9:15] == "000001" or g[1][16:22] == "000001" or g[1][23:29] == "000001" or g[1][30:36] == "000001":
                        adj_n_1_dict = []
                        break
                if adj_n_1_dict != []:
                    for g in adj_n_1_dict:
                        adj_n_1_collection.append(g)
                if adj_n_1_dict != []:
                    index_content = adj_n_1_dict[-1]
                    index_adj = mark_dict.index(index_content)
                    adj_n_1_dict.append(index_adj)
                    adj.append(adj_n_1_dict)
                #print("0.1", adj_n_1_dict)
            elif (i[1][2:8] == "000111" or i[1][9:15] == "000111" or i[1][16:22] == "000111" or i[1][23:29] == "000111" or i[1][30:36] == "000111") and (i[1][2:8] != "000001") and (
                    main_structure_dict_adj[index_adj_n_1 - 1][1][2:8] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 1][1][9:15] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 1][1][16:22] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 1][1][23:29] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 1][1][30:36] in ["000111", "000101", "010111", "000010"]
            ) and (index_adj_n_1 - 1 == 0) and (
                    main_structure_dict_adj[index_adj_n_1 + 1][1][2:8] in ["000111", "000101", "010111"] or
                    main_structure_dict_adj[index_adj_n_1 + 1][1][9:15] in ["000111", "000101", "010111"] or
                    main_structure_dict_adj[index_adj_n_1 + 1][1][16:22] in ["000111", "000101", "010111"] or
                    main_structure_dict_adj[index_adj_n_1 + 1][1][23:29] in ["000111", "000101", "010111"] or
                    main_structure_dict_adj[index_adj_n_1 + 1][1][30:36] in ["000111", "000101", "010111"]) and (
                    main_structure_dict_adj[index_adj_n_1 + 2][1][2:8] in ["000111", "000101", "010111"] or
                    main_structure_dict_adj[index_adj_n_1 + 2][1][9:15] in ["000111", "000101", "010111"] or
                    main_structure_dict_adj[index_adj_n_1 + 2][1][16:22] in ["000111", "000101", "010111"] or
                    main_structure_dict_adj[index_adj_n_1 + 2][1][23:29] in ["000111", "000101", "010111"] or
                    main_structure_dict_adj[index_adj_n_1 + 2][1][30:36] in ["000111", "000101", "010111"]
            ) and (main_structure_dict_adj[index_adj_n_1 + 3][1][2:8] in ["000001", "110101", "000011", "111110"] or
                    main_structure_dict_adj[index_adj_n_1 + 3][1][9:15] in ["000001", "110101", "000011", "111110"] or
                    main_structure_dict_adj[index_adj_n_1 + 3][1][16:22] in ["000001", "110101", "000011", "111110"] or
                    main_structure_dict_adj[index_adj_n_1 + 3][1][23:29] in ["000001", "110101", "000011", "111110"] or
                    main_structure_dict_adj[index_adj_n_1 + 3][1][30:36] in ["000001", "110101", "000011", "111110"]):
                #print("ok5")
                adj_n_1_dict = main_structure_dict_adj[index_adj_n_1 -1:index_adj_n_1+2]
                for g in adj_n_1_dict:
                    if g[1][2:8] == "000001" or g[1][9:15] == "000001" or g[1][16:22] == "000001" or g[1][23:29] == "000001" or g[1][30:36] == "000001":
                        adj_n_1_dict = []
                        break
                if adj_n_1_dict != []:
                    index_content = adj_n_1_dict[-1]
                    index_adj = mark_dict.index(index_content)
                    adj_n_1_dict.append(index_adj)
                    adj.append(adj_n_1_dict)
                #print("0.2", adj_n_1_dict)
            elif (i[1][2:8] == "000111" or i[1][9:15] == "000111" or i[1][16:22] == "000111" or i[1][23:29] == "000111" or i[1][30:36] == "000111") and (i[1][2:8] != "000001") and (
                    main_structure_dict_adj[index_adj_n_1 - 1][1][2:8] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 1][1][9:15] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 1][1][16:22] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 1][1][23:29] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 1][1][30:36] in ["000111", "000101", "010111", "000010"]
            ) and (
                    main_structure_dict_adj[index_adj_n_1 - 2][1][2:8] in ["000100", "010111"] or
                    main_structure_dict_adj[index_adj_n_1 - 2][1][9:15] in ["000100", "010111"] or
                    main_structure_dict_adj[index_adj_n_1 - 2][1][16:22] in ["000100", "010111"] or
                    main_structure_dict_adj[index_adj_n_1 - 2][1][23:29] in ["000100", "010111"] or
                    main_structure_dict_adj[index_adj_n_1 - 2][1][30:36] in ["000100", "010111"]) and (
                    main_structure_dict_adj[index_adj_n_1 + 1][1][2:8] in ["000001", "000101"] or
                    main_structure_dict_adj[index_adj_n_1 + 1][1][9:15] in ["000001", "000101"] or
                    main_structure_dict_adj[index_adj_n_1 + 1][1][16:22] in ["000001", "000101"] or
                    main_structure_dict_adj[index_adj_n_1 + 1][1][23:29] in ["000001", "000101"] or
                    main_structure_dict_adj[index_adj_n_1 + 1][1][30:36] in ["000001", "000101"]):
                #print("ok6")
                adj_n_1_dict = main_structure_dict_adj[index_adj_n_1 -2:index_adj_n_1]
                for g in adj_n_1_dict:
                    if g[1][2:8] == "000001" or g[1][9:15] == "000001" or g[1][16:22] == "000001" or g[1][23:29] == "000001" or g[1][30:36] == "000001":
                        adj_n_1_dict = []
                        break
                if adj_n_1_dict != []:
                    for g in adj_n_1_dict:
                        adj_n_1_collection.append(g)
                if adj_n_1_dict != []:
                    index_content = adj_n_1_dict[-1]
                    index_adj = mark_dict.index(index_content)
                    adj_n_1_dict.append(index_adj)
                    adj.append(adj_n_1_dict)
                #print("3",adj_n_1_dict)
            elif (i[1][2:8] == "000111" or i[1][9:15] == "000111" or i[1][16:22] == "000111" or i[1][23:29] == "000111" or i[1][30:36] == "000111") and (i[1][2:8] != "000001") and (
                    main_structure_dict_adj[index_adj_n_1 - 1][1][2:8] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 1][1][9:15] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 1][1][16:22] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 1][1][23:29] in ["000111", "000101", "010111", "000010"] or
                    main_structure_dict_adj[index_adj_n_1 - 1][1][30:36] in ["000111", "000101", "010111", "000010"]
            ) and (
                    main_structure_dict_adj[index_adj_n_1 - 2][1][2:8] in ["000100", "010111"] or
                    main_structure_dict_adj[index_adj_n_1 - 2][1][9:15] in ["000100", "010111"] or
                    main_structure_dict_adj[index_adj_n_1 - 2][1][16:22] in ["000100", "010111"] or
                    main_structure_dict_adj[index_adj_n_1 - 2][1][23:29] in ["000100", "010111"] or
                    main_structure_dict_adj[index_adj_n_1 - 2][1][30:36] in ["000100", "010111"]) and (
                    main_structure_dict_adj[index_adj_n_1 - 3][1][2:8] == "000010" or
                    main_structure_dict_adj[index_adj_n_1 - 3][1][9:15] == "000010" or
                    main_structure_dict_adj[index_adj_n_1 - 3][1][16:22] == "000010" or
                    main_structure_dict_adj[index_adj_n_1 - 3][1][23:29] == "000010" or
                    main_structure_dict_adj[index_adj_n_1 - 3][1][30:36] == "000010"
            ) and (
                    main_structure_dict_adj[index_adj_n_1 + 1][1][2:8] not in ["000001", "000101"] and
                    main_structure_dict_adj[index_adj_n_1 + 1][1][9:15] not in ["000001", "000101"] and
                    main_structure_dict_adj[index_adj_n_1 + 1][1][16:22] not in ["000001", "000101"] and
                    main_structure_dict_adj[index_adj_n_1 + 1][1][23:29] not in ["000001", "000101"] and
                    main_structure_dict_adj[index_adj_n_1 + 1][1][30:36] not in ["000001", "000101"]):
                #print("ok7")
                adj_n_1_dict = main_structure_dict_adj[index_adj_n_1 -3:index_adj_n_1]
                for g in adj_n_1_dict:
                    if g[1][2:8] == "000001" or g[1][9:15] == "000001" or g[1][16:22] == "000001" or g[1][23:29] == "000001" or g[1][30:36] == "000001":
                        adj_n_1_dict = []
                        break
                if adj_n_1_dict != []:
                    for g in adj_n_1_dict:
                        adj_n_1_collection.append(g)
                if adj_n_1_dict != []:
                    index_content = adj_n_1_dict[-1]
                    index_adj = mark_dict.index(index_content)
                    adj_n_1_dict.append(index_adj)
                    adj.append(adj_n_1_dict)
                #print("4", adj_n_1_dict)
    except Exception:
        pass

    #print("adj_n_1_dict", adj_n_1_dict)

    if len(adj_n_1_collection) != 0:
        for i in adj_n_1_collection:
            if i not in adj_n_1_collection_1:
                adj_n_1_collection_1.append(i)

    if len(adj_n_1_dict)!= 0 and len(adj_n_1_dict[0]) == 2:
        main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_n_1_collection_1]
    elif len(adj_n_1_dict) != 0 and len(adj_n_1_dict[0]) != 2:
        adj_n_1_dict = [adj_n_1_dict]
        main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_n_1_collection_1]


    if len(adj) == 0:
        main_structure_dict_adj = copy.deepcopy(main_structure_dict_adj_backup)

    #print("main_structure_dict_adj", main_structure_dict_adj)

    flag_empty_content = 0

    #print("d13.1", adj_n_1_dict)
    #print("adj13.5", adj)

    # 14.动词和名词中间的部分作为定语
    index_content = []
    index_adj = 0
    flag_empty_content = 0
    adj_between_dict_0 = []
    adj_between_dict_1 = []
    adj_between_dict_2 = []
    adj_between_collection = []
    adj_between_collection_1 = []
    #print("main_structure_dict_adj", main_structure_dict_adj)
    try:
        for i in main_structure_dict_adj:
            if i[1][2:8] == "000001" or i[1][9:15] == "000001" or i[1][16:22] == "000001" or i[1][23:29] == "000001" or i[1][30:36] == "000001":
                index_adj_between = main_structure_dict_adj.index(i)
                adj_between_dict_0 = main_structure_dict_adj[index_adj_between + 1::]
                break
    except Exception:
        pass

    #print("adj_between_dict_0", adj_between_dict_0)
    count_dictlen = len(adj_between_dict_0)

    try:
        # if count_dictlen == 1:
        #     adj_between_dict_0 = []
        # elif count_dictlen > 1:
        for i in adj_between_dict_0:
            index_adj_between_end = adj_between_dict_0.index(i)
            #print("index_adj_between_end", index_adj_between_end)
            if (i[1][2:8] in ["000001", "110011"] or i[1][9:15] in ["000001", "110011"] or i[1][16:22] in ["000001", "110011"] or i[1][23:29] in ["000001", "110011"] or i[1][30:36] in ["000001", "110011"]) and (
                    adj_between_dict_0[index_adj_between_end - 1][1][2:8] in ["110101", "000110", "111110"] or
                    adj_between_dict_0[index_adj_between_end - 1][1][9:15] in ["110101", "000110", "111110"] or
                    adj_between_dict_0[index_adj_between_end - 1][1][16:22] in ["110101", "000110", "111110"] or
                    adj_between_dict_0[index_adj_between_end - 1][1][23:29] in ["110101", "000110", "111110"] or
                    adj_between_dict_0[index_adj_between_end - 1][1][30:36] in ["110101", "000110", "111110"]) and (
                    adj_between_dict_0[index_adj_between_end - 2][1][2:8] in ["000111", "000100", "010111"] or
                    adj_between_dict_0[index_adj_between_end - 2][1][9:15] in ["000111", "000100", "010111"] or
                    adj_between_dict_0[index_adj_between_end - 2][1][16:22] in ["000111", "000100", "010111"] or
                    adj_between_dict_0[index_adj_between_end - 2][1][23:29] in ["000111", "000100", "010111"] or
                    adj_between_dict_0[index_adj_between_end - 2][1][30:36] in ["000111", "000100", "010111"]) \
                    and (adj_between_dict_0.index(adj_between_dict_0[index_adj_between_end]) > 2):
                adj_between_dict_1 = adj_between_dict_0[0:index_adj_between_end - 3]
                for g in adj_between_dict_1:
                    adj_between_collection.append(g)
                index_content = adj_between_dict_1[-1]
                if adj_between_dict_1 != []:
                    index_adj = mark_dict.index(index_content)
                    adj_between_dict.append(index_adj)
                    flag_empty_content += 1
                    adj.append(adj_between_dict)
                if (adj_between_dict_0[index_adj_between_end + 1][1][2:8] != "110011" and
                adj_between_dict_0[index_adj_between_end + 1][1][9:15] != "110011" and
                adj_between_dict_0[index_adj_between_end + 1][1][16:22] != "110011" and
                adj_between_dict_0[index_adj_between_end + 1][1][23:29] != "110011" and
                adj_between_dict_0[index_adj_between_end + 1][1][30:36] != "110011") and (
                adj_between_dict_0[-1][1][2:8] in ["000111", "000100", "010111"] or
                adj_between_dict_0[-1][1][9:15] in ["000111", "000100", "010111"] or
                adj_between_dict_0[-1][1][16:22] in ["000111", "000100", "010111"] or
                adj_between_dict_0[-1][1][23:29] in ["000111", "000100", "010111"] or
                adj_between_dict_0[-1][1][30:36] in ["000111", "000100", "010111"]):
                    adj_between_dict_2 = adj_between_dict_0[index_adj_between_end+1:-1]
                    for g in adj_between_dict_2:
                        adj_between_collection.append(g)
                    index_content = adj_between_dict_2[-1]
                    if adj_between_dict_2 != []:
                        index_adj = mark_dict.index(index_content)
                        adj_between_dict.append(index_adj)
                        flag_empty_content += 1
                        adj.append(adj_between_dict)
                #print("1ok", adj_between_dict)
            elif (i[1][2:8] in ["000001", "110011"] or i[1][9:15] in ["000001", "110011"] or i[1][16:22] in ["000001", "110011"] or i[1][23:29] in ["000001", "110011"] or i[1][30:36] in ["000001", "110011"]) and (
                    adj_between_dict_0[index_adj_between_end - 1][1][2:8] in ["000111", "000100", "010111"] or
                    adj_between_dict_0[index_adj_between_end - 1][1][9:15] in ["000111", "000100", "010111"] or
                    adj_between_dict_0[index_adj_between_end - 1][1][16:22] in ["000111", "000100", "010111"] or
                    adj_between_dict_0[index_adj_between_end - 1][1][23:29] in ["000111", "000100", "010111"] or
                    adj_between_dict_0[index_adj_between_end - 1][1][30:36] in ["000111", "000100", "010111"]) and (adj_between_dict_0.index(i) > 1):
                adj_between_dict_1 = adj_between_dict_0[0:index_adj_between_end - 1]
                for g in adj_between_dict_1:
                    adj_between_collection.append(g)
                index_content = adj_between_dict_1[-1]
                if adj_between_dict_1 != []:
                    index_adj = mark_dict.index(index_content)
                    adj_between_dict_1.append(index_adj)
                    flag_empty_content += 1
                    adj.append(adj_between_dict_1)
                if (adj_between_dict_0[index_adj_between_end + 1][1][2:8] != "110011" and
                adj_between_dict_0[index_adj_between_end + 1][1][9:15] != "110011" and
                adj_between_dict_0[index_adj_between_end + 1][1][16:22] != "110011" and
                adj_between_dict_0[index_adj_between_end + 1][1][23:29] != "110011" and
                adj_between_dict_0[index_adj_between_end + 1][1][30:36] != "110011") and (
                adj_between_dict_0[-1][1][2:8] in ["000111", "000100", "010111"] or
                adj_between_dict_0[-1][1][9:15] in ["000111", "000100", "010111"] or
                adj_between_dict_0[-1][1][16:22] in ["000111", "000100", "010111"] or
                adj_between_dict_0[-1][1][23:29] in ["000111", "000100", "010111"] or
                adj_between_dict_0[-1][1][30:36] in ["000111", "000100", "010111"]):
                    adj_between_dict_2 = adj_between_dict_0[index_adj_between_end+1:-2]
                    for g in adj_between_dict_2:
                        adj_between_collection.append(g)
                    index_content = adj_between_dict_2[-1]
                    if adj_between_dict_2 != []:
                        index_adj = mark_dict.index(index_content)
                        adj_between_dict_2.append(index_adj)
                        flag_empty_content += 1
                        adj.append(adj_between_dict_2)
                #print("2ok", adj_between_dict)
            elif (i[1][2:8] in ["000001", "110011"] or i[1][9:15] in ["000001", "110011"] or i[1][16:22] in ["000001", "110011"] or i[1][23:29] in ["000001", "110011"] or i[1][30:36] in ["000001", "110011"]) and (
                adj_between_dict_0[index_adj_between_end + 1][1][2:8] in ["000111", "000100", "010111"] or
                adj_between_dict_0[index_adj_between_end + 1][1][9:15] in ["000111", "000100", "010111"] or
                adj_between_dict_0[index_adj_between_end + 1][1][16:22] in ["000111", "000100", "010111"] or
                adj_between_dict_0[index_adj_between_end + 1][1][23:29] in ["000111", "000100", "010111"] or
                adj_between_dict_0[index_adj_between_end + 1][1][30:36] in ["000111", "000100", "010111"]) and (
                adj_between_dict_0[index_adj_between_end + 1][0][3::] == "的"):
                #print("3ok", adj_between_dict)
                pass
            elif (i[1][2:8] in ["000001"] and i[1][9:15] != "110011" and i[1][16:22] != "110011" and i[1][23:29] != "110011" and i[1][30:36] != "110011") and (
                    adj_between_dict_0[-1][1][2:8] in ["000111", "000100", "010111"] or
                    adj_between_dict_0[-1][1][9:15] in ["000111", "000100", "010111"] or
                    adj_between_dict_0[-1][1][16:22] in ["000111", "000100", "010111"] or
                    adj_between_dict_0[-1][1][23:29] in ["000111", "000100", "010111"] or
                    adj_between_dict_0[-1][1][30:36] in ["000111", "000100", "010111"]):
                adj_between_dict = adj_between_dict_0[index_adj_between_end + 1:-1]
                for g in adj_between_dict:
                    adj_between_collection.append(g)
                index_content = adj_between_dict[-1]
                if adj_between_dict != []:
                    index_adj = mark_dict.index(index_content)
                    adj_between_dict.append(index_adj)
                    flag_empty_content += 1
                    adj.append(adj_between_dict)
                #print("4ok", adj_between_dict)
            elif (i[1][2:8] in ["000111", "000100", "010111"] or i[1][9:15] in ["000111", "000100", "010111"] or i[1][16:22] in ["000111", "000100", "010111"] or i[1][23:29] in ["000111", "000100", "010111"] or i[1][30:36] in ["000111", "000100", "010111"]) and (
                    adj_between_dict_0[index_adj_between_end -1][1][2:8] in ["000111", "000100", "010111"] or
                    adj_between_dict_0[index_adj_between_end -1][1][9:15] in ["000111", "000100", "010111"] or
                    adj_between_dict_0[index_adj_between_end -1][1][16:22] in ["000111", "000100", "010111"] or
                    adj_between_dict_0[index_adj_between_end -1][1][23:29] in ["000111", "000100", "010111"] or
                    adj_between_dict_0[index_adj_between_end -1][1][30:36] in ["000111", "000100", "010111"]) and (adj_between_dict_0[index_adj_between_end -1] == adj_between_dict_0[0]) and (
                    adj_between_dict_0[index_adj_between_end + 1][1][2:8] not in ["110000", "111011"] and
                    adj_between_dict_0[index_adj_between_end + 1][1][9:15] not in ["110000", "111011"] and
                    adj_between_dict_0[index_adj_between_end + 1][1][16:22] not in ["110000", "111011"] and
                    adj_between_dict_0[index_adj_between_end + 1][1][23:29] not in ["110000", "111011"] and
                    adj_between_dict_0[index_adj_between_end + 1][1][30:36] not in ["110000", "111011"]) and (adj_between_dict_0[index_adj_between_end + 1] != adj_between_dict_0[-1]):
                adj_between_dict = adj_between_dict_0[0:index_adj_between_end+1]
                for g in adj_between_dict:
                    adj_between_collection.append(g)
                index_content = adj_between_dict[-1]
                if adj_between_dict != []:
                    index_adj = mark_dict.index(index_content)
                    adj_between_dict.append(index_adj)
                    flag_empty_content += 1
                    adj.append(adj_between_dict)
                #print("5ok", adj_between_dict)
            elif (i[1][2:8] in ["000111", "000100", "010111"] or i[1][9:15] in ["000111", "000100", "010111"] or i[1][16:22] in ["000111", "000100", "010111"] or i[1][23:29] in ["000111", "000100", "010111"] or i[1][30:36] in ["000111", "000100", "010111"]) and (
                    adj_between_dict_0[index_adj_between_end -1][1][2:8] in ["000111", "000100", "010111"] or
                    adj_between_dict_0[index_adj_between_end -1][1][9:15] in ["000111", "000100", "010111"] or
                    adj_between_dict_0[index_adj_between_end -1][1][16:22] in ["000111", "000100", "010111"] or
                    adj_between_dict_0[index_adj_between_end -1][1][23:29] in ["000111", "000100", "010111"] or
                    adj_between_dict_0[index_adj_between_end -1][1][30:36] in ["000111", "000100", "010111"]) and i == adj_between_dict_0[-2] and adj_between_dict_0[-1][0][3::] in dot_dict:
                adj_between_dict = adj_between_dict_0[index_adj_between_end-1:index_adj_between_end]
                for g in adj_between_dict:
                    adj_between_collection.append(g)
                index_content = adj_between_dict[-1]
                if adj_between_dict != []:
                    index_adj = mark_dict.index(index_content)
                    adj_between_dict.append(index_adj)
                    flag_empty_content += 1
                    adj.append(adj_between_dict)
                #print("6ok", adj_between_dict)
    except Exception:
        pass

    #print("adj_between_dict1", adj_between_dict)

    try:
        if len(adj_between_dict) == count_dictlen and flag_empty_content == 0:
            adj_between_dict = []
            for i in adj:
                for j in adj_between_dict:
                    if i == j:
                        adj.remove(i)
    except Exception:
        pass

    for i in adj_between_collection:
        if i not in adj_between_collection_1:
            adj_between_collection_1.append(i)

    try:
        if len(adj_between_dict) != 0 and len(adj_between_dict[0]) == 2:
            main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_between_collection_1]
        elif len(adj_between_dict) != 0 and len(adj_between_dict[0]) != 2:
            adj_between_dict = [adj_between_dict]
            main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_between_collection_1]

    except Exception:
        pass

    adj_between_dict_1 = copy.deepcopy(adj_between_dict)
    remove = []

    try:
        if len(adj_between_dict_1) == 2:
            for i in adj_between_dict_1:
                if i[1][2:8] in ["000110", "011000", "010101", "110011", "001110", "110101", "101000", "111110", "100110"] or i[1][9:15] in ["000110", "011000", "010101", "110011", "001110", "110101", "101000", "111110", "100110"] or i[1][16:22] ["000110", "011000", "010101", "110011", "001110", "110101", "101000", "111110", "100110"] or i[1][23:29] ["000110", "011000", "010101", "110011", "001110", "110101", "101000", "111110", "100110"] or i[1][30:36] ["000110", "011000", "010101", "110011", "001110", "110101", "101000", "111110", "100110"]:
                    #print("ok")
                    remove.append(adj_between_dict)
                    adj_between_dict = []
                    #print("ok2")
    except Exception:
        pass

    #print("remove", remove)
    #print("adj", adj)

    try:
        for i in remove:
            #print("i", i)
            for j in adj:
                #print("j", j)
                if i == j:
                    #print("ok3")
                    adj.remove(j)

    except Exception:
        pass

    if len(adj) == 0:
        main_structure_dict_adj = copy.deepcopy(main_structure_dict_adj_backup)

    flag_empty_content = 0

    #print("d14", adj_between_dict)
    #print("adj14", adj)
    #print("a14", main_structure_dict_adj)

    # 15."由...派生出来的"作为定语
    index_content = []
    index_adj = 0
    adj_prep_dict_0 = []
    adj_prep_collection = []
    adj_prep_collection_1 = []
    try:
        for i in main_structure_dict_adj:
            index_adj_prep = main_structure_dict_adj.index(i)
            if i[1][2:8] == "110011" or i[1][9:15] == "110011" or i[1][16:22] == "110011" or i[1][23:29] == "110011" or \
                    i[1][30:36] == "110011":
                adj_prep_dict_0 = main_structure_dict_adj[index_adj_prep::]
                break

        count_dictlen = len(adj_prep_dict_0)

        for i in adj_prep_dict_0:
            index_adj_prep_end = adj_prep_dict_0.index(i)
            if (index_adj_prep_end == len(adj_prep_dict_0) - 1) and (
                    i[1][2:8] in ["000111", "000100", "010111"] or i[1][9:15] in ["000111", "000100", "010111"] or i[1][16:22] in ["000111",
                                                                                                               "000100", "010111"] or
                    i[1][23:29] in ["000111", "000100", "010111"] or i[1][30:36] in ["000111", "000100", "010111"]) and (
                    adj_prep_dict_0[index_adj_prep_end - 1][1][3::] in ["的", "之"]) and (adj_prep_dict_0[index_adj_prep_end - 1] != main_structure_dict_adj[-1]):
                adj_prep_dict = adj_prep_dict_0[0:-1]
                for g in adj_prep_dict:
                    adj_prep_collection.append(g)
                index_content = adj_prep_dict[-1]
                if adj_prep_dict != []:
                    index_adj = mark_dict.index(index_content)
                    adj_prep_dict.append(index_adj)
                    adj.append(adj_prep_dict)
                    flag_empty_content += 1
        for i in adj_prep_dict_0:
            index_adj_prep_end = adj_prep_dict_0.index(i)
            if (i[1][2:8] in ["000001", "110011"] or i[1][9:15] in ["000001", "110011"] or i[1][16:22] in ["000001",
                                                                                                           "110011"] or
                i[1][23:29] in ["000001", "110011"] or i[1][30:36] in ["000001", "110011"]) and (
                    adj_prep_dict_0[index_adj_prep_end - 1][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_prep_dict_0[index_adj_prep_end - 1][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_prep_dict_0[index_adj_prep_end - 1][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_prep_dict_0[index_adj_prep_end - 1][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_prep_dict_0[index_adj_prep_end - 1][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]) and (
                    adj_prep_dict_0[index_adj_prep_end + 1][0][3::] == "的") and (adj_prep_dict_0[index_adj_prep_end + 1] != main_structure_dict_adj[-1]):
                adj_prep_dict = adj_prep_dict_0[0:index_adj_prep_end + 2]
                for g in adj_prep_dict:
                    adj_prep_collection.append(g)
                index_content = adj_prep_dict[-1]
                if adj_prep_dict != []:
                    index_adj = mark_dict.index(index_content)
                    adj_prep_dict.append(index_adj)
                    adj.append(adj_prep_dict)
                    flag_empty_content += 1
            elif (i[1][2:8] in ["000001", "110011"] or i[1][9:15] in ["000001", "110011"] or i[1][16:22] in ["000001", "110011"] or
                i[1][23:29] in ["000001", "110011"] or i[1][30:36] in ["000001", "110011"]) and (
                    adj_prep_dict_0[index_adj_prep_end - 1][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_prep_dict_0[index_adj_prep_end - 1][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_prep_dict_0[index_adj_prep_end - 1][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_prep_dict_0[index_adj_prep_end - 1][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_prep_dict_0[index_adj_prep_end - 1][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]) and (
                    adj_prep_dict_0[index_adj_prep_end + 1][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_prep_dict_0[index_adj_prep_end + 1][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_prep_dict_0[index_adj_prep_end + 1][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_prep_dict_0[index_adj_prep_end + 1][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                    adj_prep_dict_0[index_adj_prep_end + 1][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]
            ) and (adj_prep_dict_0[index_adj_prep_end + 2][0][3::] == "的") and (adj_prep_dict_0[index_adj_prep_end +2] != main_structure_dict_adj[-1]):
                adj_prep_dict = adj_prep_dict_0[0:index_adj_prep_end + 3]
                for g in adj_prep_dict:
                    adj_prep_collection.append(g)
                index_content = adj_prep_dict[-1]
                if adj_prep_dict != []:
                    index_adj = mark_dict.index(index_content)
                    adj_prep_dict.append(index_adj)
                    adj.append(adj_prep_dict)
                    flag_empty_content += 1
    except Exception:
        pass

    try:
        if len(adj_prep_dict) == count_dictlen  and flag_empty_content == 0:
            adj_prep_dict = []
            for i in adj:
                for j in adj_prep_dict:
                    if i == j:
                        adj.remove(i)

    except Exception:
        pass

    for i in adj_prep_collection:
        if i not in adj_prep_collection_1:
            adj_prep_collection_1.append(i)
    try:
        if len(adj_prep_dict) != 0 and len(adj_prep_dict[0]) == 2:
            main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_prep_collection_1]
        elif len(adj_prep_dict) != 0 and len(adj_prep_dict[0]) != 2:
            adj_prep_dict = [adj_prep_dict]
            main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_prep_collection_1]

    except Exception:
        pass

    if len(adj) == 0:
        main_structure_dict_adj = copy.deepcopy(main_structure_dict_adj_backup)

    flag_empty_content = 0

    #print("d15", adj_prep_dict)
    #print("adj15", adj)
    #print("a15", main_structure_dict_adj)

    # 16.句子开头部分如为noun/proun/num/quan/tp，最后一个noun/proun/tp前的部分为定语
    index_content = []
    index_adj_begin = 0
    index_adj_end = 0
    index_adj_begin_end = 0
    index_adj_begin_end_main = 0
    adj_begin_dict_0 = []
    adj_begin_collection = []
    adj_begin_collection_1 = []
    try:
        for i in main_structure_dict_adj:
            index_adj_begin = main_structure_dict_adj.index(i)
            if (i[1][2:8] in ["000111", "000100", "110000", "111011"] or i[1][9:15] in ["000111", "000100", "110000", "111011"] or i[1][16:22] in ["000111", "000100", "110000", "111011"] or i[1][23:29] in ["000111", "000100", "110000", "111011"] or i[1][30:36] in ["000111", "000100", "110000", "111011"]) and (
                    main_structure_dict_adj[index_adj_begin + 1][1][2:8] not in ["000111", "000100", "110000", "111011", "010111"] and
                    main_structure_dict_adj[index_adj_begin + 1][1][9:15] not in ["000111", "000100", "110000", "111011", "010111"] and
                    main_structure_dict_adj[index_adj_begin + 1][1][16:22] not in ["000111", "000100", "110000", "111011", "010111"] and
                    main_structure_dict_adj[index_adj_begin + 1][1][23:29] not in ["000111", "000100", "110000", "111011", "010111"] and
                    main_structure_dict_adj[index_adj_begin + 1][1][30:36] not in ["000111", "000100", "110000", "111011", "010111"]):
                adj_begin_dict_0 = main_structure_dict_adj[0:index_adj_begin + 1]
                break
    except Exception:
        pass

    count_dictlen = len(adj_begin_dict_0)

    #print("adj_begin_dict_0", adj_begin_dict_0)

    try:
        for i in adj_begin_dict_0:
            index_adj_begin_end = adj_begin_dict_0.index(i)
            index_adj_begin_end_main = main_structure_dict_adj.index(i)
            if (i[1][2:8] == "110011" or i[1][9:15] == "110011" or i[1][16:22] == "110011" or i[1][23:29] == "110011" or i[1][30:36] == "110011") and (
                adj_begin_dict_0[index_adj_begin_end-1][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                adj_begin_dict_0[index_adj_begin_end - 1][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                adj_begin_dict_0[index_adj_begin_end - 1][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                adj_begin_dict_0[index_adj_begin_end - 1][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                adj_begin_dict_0[index_adj_begin_end - 1][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]):
                adj_begin_dict = adj_begin_dict_0[0:index_adj_begin_end]
                for g in adj_begin_dict:
                    adj_begin_collection.append(g)
                index_content = adj_begin_dict[-1]
                if adj_begin_dict != []:
                    index_adj = mark_dict.index(index_content)
                    adj_begin_dict.append(index_adj)
                    adj.append(adj_begin_dict)
                    flag_empty_content += 1
            elif (i[1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or i[1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or i[1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or i[1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or i[1][30:36] in ["000111", "000100", "110000", "111011", "010111"]) and (
                    main_structure_dict_adj[index_adj_begin_end_main + 1][1][2:8] in ["000001", "000101", "000110", "110101", "010111", "010111"] and
                    main_structure_dict_adj[index_adj_begin_end_main + 1][1][9:15] in ["000001", "000101", "000110", "110101", "010111", "010111"] and
                    main_structure_dict_adj[index_adj_begin_end_main + 1][1][16:22] in ["000001", "000101", "000110", "110101", "010111"] and
                    main_structure_dict_adj[index_adj_begin_end_main + 1][1][23:29] in ["000001", "000101", "000110", "110101", "010111"] and
                    main_structure_dict_adj[index_adj_begin_end_main + 1][1][30:36] in ["000001", "000101", "000110", "110101", "010111"]):
                adj_begin_dict = []
    except Exception:
        pass

    #print("adj_begin_dict", adj_begin_dict)

    try:
        if len(adj_begin_dict) == count_dictlen and flag_empty_content == 0:
            adj_begin_dict = []
            for i in adj:
                for j in adj_begin_dict:
                    if i == j:
                        adj.remove(i)

    except Exception:
        pass

    for i in adj_begin_collection:
        if i not in adj_begin_collection_1:
            adj_begin_collection_1.append(i)

    try:
        if len(adj_begin_dict) != 0 and len(adj_begin_dict[0]) == 2:
            main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_begin_collection_1]
        elif len(adj_begin_dict) != 0 and len(adj_begin_dict[0]) != 2:
            adj_begin_dict = [adj_begin_dict]
            main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_begin_collection_1]

    except Exception:
        pass

    if len(adj) == 0:
        main_structure_dict_adj = copy.deepcopy(main_structure_dict_adj_backup)

    flag_empty_content = 0

    #print("d16", adj_begin_dict)
    #print("adj16", adj)
    #print("a16", main_structure_dict_adj)

    #17. 注释作为定语后置
    index_content = []
    index_adj_note = 0
    adj_note_collection = []
    adj_note_collection_1 = []
    try:
        for i in main_structure_dict_adj:
            index_adj_note = main_structure_dict_adj.index(i)
            if (i[1][2:8] == "001010" or i[1][9:15] == "001010" or i[1][16:22] == "001010" or i[1][23:29] == "001010" or i[1][30:36] == "001010") and (
                    main_structure_dict_adj[index_adj_note - 1][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                    main_structure_dict_adj[index_adj_note - 1][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                    main_structure_dict_adj[index_adj_note - 1][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                    main_structure_dict_adj[index_adj_note - 1][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                    main_structure_dict_adj[index_adj_note - 1][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]):
                adj_note_dict = main_structure_dict_adj[index_adj_note:index_adj_note+1]
                for g in adj_note_dict:
                    adj_note_collection.append(g)
                index_content = adj_note_dict[-1]
                if adj_note_dict != []:
                    index_adj = mark_dict.index(index_content)
                    adj_note_dict.append(index_adj)
                    adj.append(adj_note_dict)
                    flag_empty_content = 1
                if (main_structure_dict_adj[index_adj_note + 1][1][2:8] == "001010" or
                    main_structure_dict_adj[index_adj_note + 1][1][9:15] == "001010" or
                    main_structure_dict_adj[index_adj_note + 1][1][16:22] == "001010" or
                    main_structure_dict_adj[index_adj_note + 1][1][23:29] == "001010" or
                    main_structure_dict_adj[index_adj_note + 1][1][30:36] == "001010"):
                    adj_note_dict = main_structure_dict_adj[index_adj_note:index_adj_note+2]
                    for g in adj_note_dict:
                        adj_note_collection.append(g)
                    index_content = adj_note_dict[-1]
                    if adj_note_dict != []:
                        index_adj = mark_dict.index(index_content)
                        adj_note_dict.append(index_adj)
                        adj.append(adj_note_dict)
                    if (main_structure_dict_adj[index_adj_note + 2][1][2:8] == "001010" or
                            main_structure_dict_adj[index_adj_note + 2][1][9:15] == "001010" or
                            main_structure_dict_adj[index_adj_note + 2][1][16:22] == "001010" or
                            main_structure_dict_adj[index_adj_note + 2][1][23:29] == "001010" or
                            main_structure_dict_adj[index_adj_note + 2][1][30:36] == "001010"):
                        adj_note_dict = main_structure_dict_adj[index_adj_note:index_adj_note + 3]
                        for g in adj_note_dict:
                            adj_note_collection.append(g)
                        index_content = adj_note_dict[-1]
                        if adj_note_dict != []:
                            index_adj = mark_dict.index(index_content)
                            adj_note_dict.append(index_adj)
                            adj.append(adj_note_dict)
                        if (main_structure_dict_adj[index_adj_note + 3][1][2:8] == "001010" or
                                main_structure_dict_adj[index_adj_note + 3][1][9:15] == "001010" or
                                main_structure_dict_adj[index_adj_note + 3][1][16:22] == "001010" or
                                main_structure_dict_adj[index_adj_note + 3][1][23:29] == "001010" or
                                main_structure_dict_adj[index_adj_note + 3][1][30:36] == "001010"):
                            adj_note_dict = main_structure_dict_adj[index_adj_note:index_adj_note + 4]
                            for g in adj_note_dict:
                                adj_note_collection.append(g)
                            index_content = adj_note_dict[-1]
                            if adj_note_dict != []:
                                index_adj = mark_dict.index(index_content)
                                adj_note_dict.append(index_adj)
                                adj.append(adj_note_dict)
                            if (main_structure_dict_adj[index_adj_note + 4][1][2:8] == "001010" or
                                    main_structure_dict_adj[index_adj_note + 4][1][9:15] == "001010" or
                                    main_structure_dict_adj[index_adj_note + 4][1][16:22] == "001010" or
                                    main_structure_dict_adj[index_adj_note + 4][1][23:29] == "001010" or
                                    main_structure_dict_adj[index_adj_note + 4][1][30:36] == "001010"):
                                adj_note_dict = main_structure_dict_adj[index_adj_note:index_adj_note + 5]
                                for g in adj_note_dict:
                                    adj_note_collection.append(g)
                                index_content = adj_note_dict[-1]
                                if adj_note_dict != []:
                                    index_adj = mark_dict.index(index_content)
                                    adj_note_dict.append(index_adj)
                                    adj.append(adj_note_dict)
                                if (main_structure_dict_adj[index_adj_note + 5][1][2:8] == "001010" or
                                        main_structure_dict_adj[index_adj_note + 5][1][9:15] == "001010" or
                                        main_structure_dict_adj[index_adj_note + 5][1][16:22] == "001010" or
                                        main_structure_dict_adj[index_adj_note + 5][1][23:29] == "001010" or
                                        main_structure_dict_adj[index_adj_note + 5][1][30:36] == "001010"):
                                    adj_note_dict = main_structure_dict_adj[index_adj_note:index_adj_note + 6]
                                    for g in adj_note_dict:
                                        adj_note_collection.append(g)
                                    index_content = adj_note_dict[-1]
                                    if adj_note_dict != []:
                                        index_adj = mark_dict.index(index_content)
                                        adj_note_dict.append(index_adj)
                                        adj.append(adj_note_dict)
                                    break
    except Exception:
        pass

    #print("adj_note_dict", adj_note_dict)

    try:
        if len(adj_note_dict) == count_dictlen and flag_empty_content == 0:
            adj_note_dict = []
            for i in adj:
                for j in adj_note_dict:
                    if i == j:
                        adj.remove(i)

    except Exception:
        pass

    for i in adj_note_collection:
        if i not in adj_note_collection_1:
            adj_note_collection_1.append(i)

    try:
        if len(adj_note_dict) != 0 and len(adj_note_dict[0]) == 2:
            main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_note_collection_1]
        elif len(adj_note_dict) != 0 and len(adj_note_dict[0]) != 2:
            adj_note_dict = [adj_note_dict]
            main_structure_dict_adj = [x for x in main_structure_dict_adj if x not in adj_note_collection_1]

    except Exception:
        pass

    if len(adj) == 0:
        main_structure_dict_adj = copy.deepcopy(main_structure_dict_adj_backup)

    flag_empty_content = 0

    #print("d17", adj_note_dict)
    #print("adj17", adj)
    #print("a17", main_structure_dict_adj)

    #18. 去重
    adj_1 = []

    for i in adj:
        if i not in adj_1:
            adj_1.append(i)

    adj = copy.deepcopy(adj_1)

    #print("adj18", adj)

    #19. 如果长定语包含短定语的一部分，则清空短定语
    index_adj = 0
    index_adv = 0
    remove_dict = []

    for i in adj:
        for k in i:
            for j in adj:
                if (k in j) and (len(i) < len(j)) and (i not in remove_dict):
                    remove_dict.append(i)

    # print("remove", remove_dict)

    for i in remove_dict:
        for j in adj:
            if i == j:
                adj.remove(j)

    #print("adj19", adj)

def Treat_adv_complement():
    global mark_dict
    global index_i_prep
    global index_i_p
    global index_i_d
    global index_i_c
    global index_i_tp_single
    global index_i_from
    global index_i_to
    global index_i_from_single
    global index_i_to_single
    global index_i_from_tpc
    global index_i_as
    global index_i_complement_to
    global index_i_adj_le
    global index_i_complement_degree
    global index_i_complement_specialuse
    global index_i_adv_simple
    global index_i_adv_middle
    global index_i_adv_with_sb
    global index_i_adv_inorderto
    global index_i_adv_through
    global index_i_adv_through_end
    global index_i_adv_until

    global main_structure_dict_adv
    global dot_dict
    global tp_adv_dict
    global tp_adv_dict_single
    global tp_adv_dict_ft
    global tp_adv_dict_ft_single
    global adv_sigh_dict
    global adv_as_dict
    global complement_degree_to_dict
    global complement_adj_le_dict
    global complement_degree_dict
    global complement_specialuse_dict
    global complement_specialtreat_dict
    global complement_degree_de_dict
    global complement_simple_dict
    global adv_simple_dict
    global adv_middle_dict
    global adv_with_sb_dict
    global adv_inorderto_dict
    global adv_through_dict
    global adv_until_dict
    global adv_there_be_dict
    global middle_adv_dict
    global adj
    global adv
    global complement
    global mark_dict_backup

    tp_adv_dict_0 = []
    tp_adv_dict_single_0 = []
    tp_adv_dict_ft_0 = []
    tp_adv_dict_ft_single_0 = []
    adv_sigh_dict_0 = []
    adv_as_dict_0 = []
    complement_degree_to_dict_0 = []
    complement_adj_le_dict_0 = []
    complement_degree_dict_0 = []
    complement_specialuse_dict_0 = []
    complement_specialtreat_dict_0 = []
    complement_degree_de_dict_0 = []
    adv_simple_dict_0 = []
    adv_middle_dict_0 = []
    adv_with_sb_dict_0 = []
    adv_inorderto_dict_0 = []
    adv_through_dict_0 = []
    adv_until_dict_0 = []
    adv_there_be_dict_0 = []

    main_structure_dict_adv = copy.deepcopy(mark_dict)
    flag_empty_content = 0
    index_j = 0

    list_duplicate = copy.deepcopy(main_structure_dict_adv)

    #1.处理句末标点
    for i in main_structure_dict_adv:
        if i[0][3::] in dot_dict:
            main_structure_dict_adv.remove(i)

    #print("main_structure_dict_adv", main_structure_dict_adv)

    #2.处理介+ 时间地点词的状语
    index_content = []
    index_adv = 0

    try:
        for i in main_structure_dict_adv:
            index_i_prep = main_structure_dict_adv.index(i)
            if (i[1][2:8] == "110011" or i[1][9:15] == "110011" or i[1][16:22] == "110011" or i[1][23:29] == "110011" or i[1][30:36] == "110011"):
                tp_adv_dict_0 = main_structure_dict_adv[index_i_prep::]
                break
    except Exception:
        pass #确定介词以后覆盖的部分

    count_dictlen = len(tp_adv_dict_0)
    #print("tp_adv_dict_0", tp_adv_dict_0)

    try:
        for i in tp_adv_dict_0:
            index_i_p = tp_adv_dict_0.index(i)
            if (i[1][2:8] in ["110000", "111011", "010111"] or i[1][9:15] in ["110000", "111011", "010111"] or i[1][16:22] in ["110000", "111011", "010111"] or i[1][23:29] in ["110000", "111011", "010111"] or i[1][30:36] in ["110000", "111011", "010111"]) and (tp_adv_dict_0[index_i_p + 1][0][3::] not in ["的", "之", "起", "开始", "始", "止", "为止", "截止"]):
                tp_adv_dict = tp_adv_dict_0[0:index_i_p+1]
                index_content = tp_adv_dict[-1]
                if tp_adv_dict != []:
                    index_adv = mark_dict.index(index_content)
                    tp_adv_dict.append(index_adv)
                    flag_empty_content += 1
                    break
            elif (i[1][2:8] in ["110000", "111011", "010111"] or i[1][9:15] in ["110000", "111011", "010111"] or i[1][16:22] in ["110000", "111011", "010111"] or i[1][23:29] in ["110000", "111011", "010111"] or i[1][30:36] in ["110000", "111011", "010111"]) and (tp_adv_dict_0[index_i_p + 1][0][3::] in ["起", "开始", "始", "止", "为止", "截止"]):
                tp_adv_dict = tp_adv_dict_0[0:index_i_p+2]
                index_content = tp_adv_dict[-1]
                if tp_adv_dict != []:
                    index_adv = mark_dict.index(index_content)
                    tp_adv_dict.append(index_adv)
                    flag_empty_content += 1
                    break
            elif (i[1][2:8] in ["110000", "111011", "000111", "010111"] or i[1][9:15] in ["110000", "111011", "000111", "010111"] or i[1][16:22] in ["110000", "111011", "000111", "010111"] or i[1][23:29] in ["110000", "111011", "000111", "010111"] or i[1][30:36] in ["110000", "111011", "000111", "010111"]) and (tp_adv_dict_0[index_i_p + 1][1][2:8] in ["000001", "000101", "110101", "000110"] or tp_adv_dict_0[index_i_p + 1][1][9:15] in ["000001", "000101", "110101", "000110"] or tp_adv_dict_0[index_i_p + 1][1][16:22] in ["000001", "000101", "110101", "000110"] or tp_adv_dict_0[index_i_p + 1][1][23:29] in ["000001", "000101", "110101", "000110"] or tp_adv_dict_0[index_i_p + 1][1][30:36] in ["000001", "000101", "110101", "000110"]):
                tp_adv_dict = tp_adv_dict_0[0:index_i_p+1]
                index_content = tp_adv_dict[-1]
                if tp_adv_dict != []:
                    index_adv = mark_dict.index(index_content)
                    tp_adv_dict.append(index_adv)
                    flag_empty_content += 1
                    break

    #如果有方位时间词随后，则整个部分作为时间地点状语
    except Exception:
        pass

    if len(tp_adv_dict) == 0:
        try:
            for i in tp_adv_dict_0:
                index_i_tp = tp_adv_dict_0.index(i)
                if i[1][2:8] in ["111011", "110000"] and (
                        tp_adv_dict_0[index_i_tp + 1][1][2:8] == "000001" or
                        tp_adv_dict_0[index_i_tp + 1][1][9:15] == "000001" or
                        tp_adv_dict_0[index_i_tp + 1][1][16:22] == "000001" or
                        tp_adv_dict_0[index_i_tp + 1][1][23:29] == "000001" or
                        tp_adv_dict_0[index_i_tp + 1][1][30:36] == "000001"):
                    tp_adv_dict = tp_adv_dict_0[0:index_i_tp+1]
                    index_content = tp_adv_dict[-1]
                    if tp_adv_dict != []:
                        index_adv = mark_dict.index(index_content)
                        tp_adv_dict.append(index_adv)
                        flag_empty_content += 1
                        break
        except Exception:
            pass

    if len(tp_adv_dict) != 0:
        adv.append(tp_adv_dict)

    #print("tp_adv_dict", tp_adv_dict)
    #print("1", adv)

    try:
        if len(tp_adv_dict) != 0:
            for i in tp_adv_dict:
                for j in main_structure_dict_adv:
                    #if i[0][3::] == j[0][3::] and i!=j and i[1][0] == j[1][0]:
                    if i == j:
                        main_structure_dict_adv.remove(j)
    except Exception:
        pass

    #print("2adv", adv)

    if len(tp_adv_dict) == count_dictlen and flag_empty_content == 0:
        tp_adv_dict = []

    if len(tp_adv_dict) != 0 and len(tp_adv_dict[0]) == 2:
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in tp_adv_dict]
    elif len(tp_adv_dict) != 0 and len(tp_adv_dict[0]) != 2:
        tp_adv_dict = [tp_adv_dict]
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in tp_adv_dict]

    if len(adv) == 0 and len(complement) == 0:
        main_structure_dict_adv = copy.deepcopy(mark_dict)

    flag_empty_content = 0

    #print("2", main_structure_dict_adv)
    #print("z2", tp_adv_dict)
    #print("2", adv)

    # 2.5.处理noun+“中”/“里”/“当前”的状语
    index_content = []
    index_adv = 0
    middle_adv_dict_0 = []

    try:
        for i in main_structure_dict_adv:
            index_i_middle = main_structure_dict_adv.index(i)
            if (i[1][2:8] in ["110000", "111011"] or i[1][9:15] in ["110000", "111011"] or i[1][16:22] in ["110000", "111011"] or i[1][23:29] in ["110000", "111011"] or
                    i[1][30:36] in ["110000", "111011"]) and (
                    main_structure_dict_adv[index_i_middle - 1][1][2:8] in ["000111", "000100", "010111"] or
                    main_structure_dict_adv[index_i_middle - 1][1][9:15] in [ "000111", "000100", "010111"] or
                    main_structure_dict_adv[index_i_middle - 1][1][16:22] in ["000111", "000100", "010111"] or
                    main_structure_dict_adv[index_i_middle - 1][1][23:29] in ["000111", "000100", "010111"] or
                    main_structure_dict_adv[index_i_middle - 1][1][30:36] in ["000111", "000100", "010111"]) and (
                    main_structure_dict_adv[index_i_middle - 2][1][2:8] == "000001" or
                    main_structure_dict_adv[index_i_middle - 2][1][9:15] == "000001" or
                    main_structure_dict_adv[index_i_middle - 2][1][16:22] == "000001" or
                    main_structure_dict_adv[index_i_middle - 2][1][23:29] == "000001" or
                    main_structure_dict_adv[index_i_middle - 2][1][30:36] == "000001"):
                middle_adv_dict = main_structure_dict_adv[index_i_middle - 2:index_i_middle+1]
                index_content = middle_adv_dict[-1]
                if middle_adv_dict != []:
                    index_adv = mark_dict.index(index_content)
                    middle_adv_dict.append(index_adv)
                    adv.append(middle_adv_dict)
                    flag_empty_content += 1
                #print("1", middle_adv_dict)
            elif (i[1][2:8] in ["110000", "111011"] or i[1][9:15] in ["110000", "111011"] or i[1][16:22] in ["110000", "111011"] or i[1][23:29] in ["110000", "111011"] or
                    i[1][30:36] in ["110000", "111011"]) and (
                    main_structure_dict_adv[index_i_middle - 2][1][2:8] in ["000101", "000111", "000100"] or
                    main_structure_dict_adv[index_i_middle - 2][1][9:15] in ["000101", "000111", "000100"] or
                    main_structure_dict_adv[index_i_middle - 2][1][16:22] in ["000101", "000111", "000100"] or
                    main_structure_dict_adv[index_i_middle - 2][1][23:29] in ["000101", "000111", "000100"] or
                    main_structure_dict_adv[index_i_middle - 2][1][30:36] in ["000101", "000111", "000100"]) and (
                    main_structure_dict_adv[index_i_middle - 1][1][2:8] in ["000111", "000100", "010111"] or
                    main_structure_dict_adv[index_i_middle - 1][1][9:15] in ["000111", "000100", "010111"] or
                    main_structure_dict_adv[index_i_middle - 1][1][16:22] in ["000111", "000100", "010111"] or
                    main_structure_dict_adv[index_i_middle - 1][1][23:29] in ["000111", "000100", "010111"] or
                    main_structure_dict_adv[index_i_middle - 1][1][30:36] in ["000111", "000100", "010111"]) and (
                    main_structure_dict_adv[index_i_middle - 3][1][2:8] not in ["000101", "000111", "000100", "110000", "111011", "010111"] and
                    main_structure_dict_adv[index_i_middle - 3][1][9:15] not in ["000101", "000111", "000100", "110000", "111011", "010111"] and
                    main_structure_dict_adv[index_i_middle - 3][1][16:22] not in ["000101", "000111", "000100", "110000", "111011", "010111"] and
                    main_structure_dict_adv[index_i_middle - 3][1][23:29] not in ["000101", "000111", "000100", "110000", "111011", "010111"] and
                    main_structure_dict_adv[index_i_middle - 3][1][30:36] not in ["000101", "000111", "000100", "110000", "111011", "010111"]):
                middle_adv_dict = main_structure_dict_adv[index_i_middle - 2:index_i_middle]
                index_content = middle_adv_dict[-1]
                if middle_adv_dict != []:
                    index_adv = mark_dict.index(index_content)
                    middle_adv_dict.append(index_adv)
                    adv.append(middle_adv_dict)
                    flag_empty_content += 1
                #print("2", i)
    except Exception:
        pass

    try:
        if len(middle_adv_dict) != 0:
            for i in tp_adv_dict:
                for j in main_structure_dict_adv:
                    #if i[0][3::] == j[0][3::] and i != j and i[1][0] == j[1][0]:
                    if i == j:
                        main_structure_dict_adv.remove(j)
    except Exception:
        pass

    if len(middle_adv_dict) == count_dictlen and flag_empty_content == 0:
        middle_adv_dict = []

    if len(middle_adv_dict) != 0 and len(middle_adv_dict[0]) == 2:
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in middle_adv_dict]
    elif len(middle_adv_dict) != 0 and len(middle_adv_dict[0]) != 2:
        middle_adv_dict = [middle_adv_dict]
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in middle_adv_dict]

    if len(adv) == 0 and len(complement) == 0:
        main_structure_dict_adv = copy.deepcopy(mark_dict)

    flag_empty_content = 0

    #print("2.5", main_structure_dict_adv)
    #print("z2.5", middle_adv_dict)
    #print("2.5", adv)

    # 3.处理“截至。。为止”结构的状语、补语
    index_content = []
    index_adv = 0
    try:
        for i in main_structure_dict_adv:
            if i[0][3::] in ["截至", "截止", "截止到", "到", "自", "自从", "至", "过了", "又过", "又过了", "经过", "经过了"]:
                index_i_from = main_structure_dict_adv.index(i)
                tp_adv_dict_ft_0 = main_structure_dict_adv[index_i_from::]
                break
    except Exception:
        pass  # 确定介词From以后覆盖的部分

    count_dictlen = len(tp_adv_dict_ft_0)

    try:
        for i in tp_adv_dict_ft_0:
            if i[0][3::] in ["为止", "止", "后", "之后"]:
                index_i_to = tp_adv_dict_ft_0.index(i)
                tp_adv_dict_ft = tp_adv_dict_ft_0[0:index_i_to + 1]
                index_content = tp_adv_dict_ft[-1]
                if tp_adv_dict_ft != []:
                    index_adv = mark_dict.index(index_content)
                    tp_adv_dict_ft.append(index_adv)
                    adv.append(tp_adv_dict_ft)
                    flag_empty_content += 1
                break

    # 如果有to随后，则整个部分作为时间地点状语
    except Exception:
        pass

    #print("adv", adv)

    #print("tp_adv_dict_ft", tp_adv_dict_ft)

    if len(tp_adv_dict_ft) != 0:
        adv.append(tp_adv_dict_ft)

    #print("adv", adv)

    try:
        if len(tp_adv_dict_ft) != 0:
            for i in tp_adv_dict_ft:
                for j in main_structure_dict_adv:
                    #if i[0][3::] == j[0][3::] and i!=j and i[1][0] == j[1][0]:
                    if i == j:
                        main_structure_dict_adv.remove(j)
    except Exception:
        pass

    if len(tp_adv_dict_ft) == count_dictlen and flag_empty_content == 0:
        tp_adv_dict_ft = []

    if len(tp_adv_dict_ft) != 0 and len(adv_simple_dict[0]) == 2:
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in tp_adv_dict_ft]
    elif len(tp_adv_dict_ft) != 0 and len(tp_adv_dict_ft[0]) != 2:
        tp_adv_dict_ft = [tp_adv_dict_ft]
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in tp_adv_dict_ft]

    if len(adv) == 0 and len(complement) == 0:
        main_structure_dict_adv = copy.deepcopy(mark_dict)

    flag_empty_content = 0

    #print("3", main_structure_dict_adv)
    #print("z3", tp_adv_dict_ft)
    #print("3", adv)

    #4. 处理程度补语“缩短到三寸”等
    index_content = []
    index_adv = 0
    try:
        for i in main_structure_dict_adv:
            index_i_complement_to = main_structure_dict_adv.index(i)
            if (i[0][3::] == "到" or i[0][3::] == "至") and (i[1][2:8] == "000110" or i[1][9:15] == "000110" or i[1][16:22] == "000110" or i[1][23:29] == "000110" or i[1][30:36] == "000110"):
                    for j in main_structure_dict_adv:
                        index_j = main_structure_dict_adv.index(j)
                        if j[0][3::] == i[0][3::] and i!=j and i[1][0] == j[1][0]:
                            main_structure_dict_adv[index_j] = "NaN"
                    for j in main_structure_dict_adv:
                        if j == "NaN":
                            main_structure_dict_adv.remove(j)
                    index_i_complement_to = main_structure_dict_adv.index(i)
                    if (main_structure_dict_adv[index_i_complement_to + 1][1][2:8] == "000010" or
                        main_structure_dict_adv[index_i_complement_to + 1][1][9:15] == "000010" or
                        main_structure_dict_adv[index_i_complement_to + 1][1][16:22] == "000010" or
                        main_structure_dict_adv[index_i_complement_to + 1][1][23:29] == "000010" or
                        main_structure_dict_adv[index_i_complement_to + 1][1][30:36] == "000010")\
                    and (main_structure_dict_adv[index_i_complement_to + 2][1][2:8] != "000011" and
                        main_structure_dict_adv[index_i_complement_to + 2][1][9:15] != "000011" and
                        main_structure_dict_adv[index_i_complement_to + 2][1][16:22] != "000011" and
                        main_structure_dict_adv[index_i_complement_to + 2][1][23:29] != "000011" and
                        main_structure_dict_adv[index_i_complement_to + 2][1][30:36] != "000011"):
                        complement_degree_to_dict = main_structure_dict_adv[index_i_complement_to:index_i_complement_to + 2]
                        index_content = complement_degree_to_dict[-1]
                        if complement_degree_to_dict != []:
                            index_adv = mark_dict.index(index_content)
                            complement_degree_to_dict.append(index_adv)
                            complement.append(complement_degree_to_dict)
                            flag_empty_content += 1
                    elif (main_structure_dict_adv[index_i_complement_to + 1][1][2:8] == "000010" or
                        main_structure_dict_adv[index_i_complement_to + 1][1][9:15] == "000010" or
                        main_structure_dict_adv[index_i_complement_to + 1][1][16:22] == "000010" or
                        main_structure_dict_adv[index_i_complement_to + 1][1][23:29] == "000010" or
                        main_structure_dict_adv[index_i_complement_to + 1][1][30:36] == "000010")\
                    and (main_structure_dict_adv[index_i_complement_to + 2][1][2:8] == "000011" or
                        main_structure_dict_adv[index_i_complement_to + 2][1][9:15] == "000011" or
                        main_structure_dict_adv[index_i_complement_to + 2][1][16:22] == "000011" or
                        main_structure_dict_adv[index_i_complement_to + 2][1][23:29] == "000011" or
                        main_structure_dict_adv[index_i_complement_to + 2][1][30:36] == "000011"):
                        complement_degree_to_dict = main_structure_dict_adv[index_i_complement_to:index_i_complement_to + 3]
                        index_content = complement_degree_to_dict[-1]
                        if complement_degree_to_dict != []:
                            index_adv = mark_dict.index(index_content)
                            complement_degree_to_dict.append(index_adv)
                            complement.append(complement_degree_to_dict)
                            flag_empty_content += 1
                    elif (main_structure_dict_adv[index_i_complement_to + 1][0][3::] == "了")\
                    and (main_structure_dict_adv[index_i_complement_to + 2][1][2:8] == "000110" or
                        main_structure_dict_adv[index_i_complement_to + 2][1][9:15] == "000110" or
                        main_structure_dict_adv[index_i_complement_to + 2][1][16:22] == "000110" or
                        main_structure_dict_adv[index_i_complement_to + 2][1][23:29] == "000110" or
                        main_structure_dict_adv[index_i_complement_to + 2][1][30:36] == "000110") and (
                            main_structure_dict_adv[index_i_complement_to + 3][1][2:8] != "000011" and
                            main_structure_dict_adv[index_i_complement_to + 3][1][9:15] != "000011" and
                            main_structure_dict_adv[index_i_complement_to + 3][1][16:22] != "000011" and
                            main_structure_dict_adv[index_i_complement_to + 3][1][23:29] != "000011" and
                            main_structure_dict_adv[index_i_complement_to + 3][1][30:36] != "000011"):
                        complement_degree_to_dict = main_structure_dict_adv[index_i_complement_to:index_i_complement_to + 3]
                        index_content = complement_degree_to_dict[-1]
                        if complement_degree_to_dict != []:
                            index_adv = mark_dict.index(index_content)
                            complement_degree_to_dict.append(index_adv)
                            complement.append(complement_degree_to_dict)
                            flag_empty_content += 1
                    elif (main_structure_dict_adv[index_i_complement_to + 1][0][3::] == "了")\
                    and (main_structure_dict_adv[index_i_complement_to + 2][1][2:8] == "000110" or
                        main_structure_dict_adv[index_i_complement_to + 2][1][9:15] == "000110" or
                        main_structure_dict_adv[index_i_complement_to + 2][1][16:22] == "000110" or
                        main_structure_dict_adv[index_i_complement_to + 2][1][23:29] == "000110" or
                        main_structure_dict_adv[index_i_complement_to + 2][1][30:36] == "000110") and (
                            main_structure_dict_adv[index_i_complement_to + 3][1][2:8] == "000011" or
                            main_structure_dict_adv[index_i_complement_to + 3][1][9:15] == "000011" or
                            main_structure_dict_adv[index_i_complement_to + 3][1][16:22] == "000011" or
                            main_structure_dict_adv[index_i_complement_to + 3][1][23:29] == "000011" or
                            main_structure_dict_adv[index_i_complement_to + 3][1][30:36] == "000011"):
                        complement_degree_to_dict = main_structure_dict_adv[index_i_complement_to:index_i_complement_to + 4]
                        index_content = complement_degree_to_dict[-1]
                        if complement_degree_to_dict != []:
                            index_adv = mark_dict.index(index_content)
                            complement_degree_to_dict.append(index_adv)
                            complement.append(complement_degree_to_dict)
                            flag_empty_content += 1
     #后为数+量词，或者“到了”+副词，则后面部分一起入补语
    except Exception:
        pass

    try:
        if len(complement_degree_to_dict) == count_dictlen and flag_empty_content == 0:
            complement_degree_to_dict = []  # 如果没有，则清空

        if len(complement_degree_to_dict) != 0:
            for i in complement_degree_to_dict:
                for j in main_structure_dict_adv:
                    #if i[0][3::] == j[0][3::] and i!=j and i[1][0] == j[1][0]:
                    if i == j:
                        main_structure_dict_adv.remove(j)
    except Exception:
        pass

    if len(complement_degree_to_dict) != 0 and len(complement_degree_to_dict[0]) == 2:
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in complement_degree_to_dict]
    elif len(complement_degree_to_dict) != 0 and len(complement_degree_to_dict[0]) != 2:
        complement_degree_to_dict = [complement_degree_to_dict]
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in complement_degree_to_dict]

    if len(adv) == 0 and len(complement) == 0:
        main_structure_dict_adv = copy.deepcopy(mark_dict)

    flag_empty_content = 0

    #print("z4", complement_degree_to_dict)
    #print("4", complement)
    #print("4", main_structure_dict_adv)

    # 5.处理只有From结构的状语
    index_content = []
    index_adv = 0
    if tp_adv_dict_ft == []:
        try:
            for i in main_structure_dict_adv:
                if i[0][3::] in ["截至", "截止", "截止到", "自", "自从", "过了", "又过了", "经过了", "不到"] and (i[1][2:8] == "110011" or i[1][9:15] == "110011" or i[1][16:22] == "110011" or \
                        i[1][23:29] == "110011" or i[1][30:36] == "110011"):
                    index_i_from_single = main_structure_dict_adv.index(i)
                    tp_adv_dict_ft_single_0 = main_structure_dict_adv[index_i_from_single::]
        except Exception:
            pass  # 确定介词From以后覆盖的部分

        count_dictlen = len(tp_adv_dict_ft_single_0)

        try:
            for i in tp_adv_dict_ft_single_0:
                if i[1][2:8] in ["110000", "000011"] or i[1][9:15] in ["110000", "000011", "111011"] or i[1][16:22] in ["110000",
                                                                                                              "000011", "111011"] or \
                        i[1][23:29] in ["110000", "000011", "111011"] or i[1][30:36] in ["110000", "000011", "111011"]:
                    index_i_from_tpc = tp_adv_dict_ft_single_0.index(i)
                    tp_adv_dict_ft_single = tp_adv_dict_ft_single_0[index_i_from_single:index_i_from_tpc + 1]
                    index_content= tp_adv_dict_ft_single[-1]
                    if tp_adv_dict_ft_single != []:
                        index_adv = mark_dict.index(index_content)
                        tp_adv_dict_ft_single.append(index_adv)
                        adv.append(tp_adv_dict_ft_single)
                        flag_empty_content += 1

        # 如果有时间方位词或量词随后，则整个部分作为时间地点状语，如果没有，也不清空，直接到尾

        except Exception:
            pass

        try:
            for i in main_structure_dict_adv:
                if (i[0][3::] == "到" or i[0][3::] == "至"):
                    index_i_from_single = main_structure_dict_adv.index(i)
                    tp_adv_dict_ft_single_0 = main_structure_dict_adv[index_i_from_single::]
        # 确定介词From以后覆盖的部分
        except Exception:
            pass

        count_dictlen = len(tp_adv_dict_ft_single_0)

        try:
            for i in tp_adv_dict_ft_single_0:
                if i[1][2:8] in ["110000", "000011", "111011"] or i[1][9:15] in ["110000", "000011", "111011"] or i[1][16:22] in ["110000",
                                                                                                              "000011", "111011"] or \
                        i[1][23:29] in ["110000", "000011", "111011"] or i[1][30:36] in ["110000", "000011", "111011"]:
                    index_i_from_tpc = tp_adv_dict_ft_single_0.index(i)
                    tp_adv_dict_ft_single = tp_adv_dict_ft_single_0[index_i_from_single:index_i_from_tpc + 1]
                    index_content = tp_adv_dict_ft_single[-1]
                    if tp_adv_dict_ft_single != []:
                        index_adv = mark_dict.index(index_content)
                        tp_adv_dict_ft_single.append(index_adv)
                        adv.append(tp_adv_dict_ft_single)
                        flag_empty_content += 1

        # 如果有时间方位词或量词随后，则整个部分作为时间地点状语
        except Exception:
            pass

        try:
            if len(tp_adv_dict_ft_single) != 0:
                for i in tp_adv_dict_ft_single:
                    for j in main_structure_dict_adv:
                        #if i[0][3::] == j[0][3::] and i != j and i[1][0] == j[1][0]:
                        if i == j:
                            main_structure_dict_adv.remove(j)
        except Exception:
            pass

        if len(tp_adv_dict_ft_single) == count_dictlen and flag_empty_content == 0:
            tp_adv_dict_ft_single = []  # 如果没有，则清空

        if len(tp_adv_dict_ft_single) != 0 and len(tp_adv_dict_ft_single[0]) == 2:
            main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in tp_adv_dict_ft_single]
        elif len(tp_adv_dict_ft_single) != 0 and len(tp_adv_dict_ft_single[0]) != 2:
            tp_adv_dict_ft_single = [tp_adv_dict_ft_single]
            main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in tp_adv_dict_ft_single]

        if len(adv) == 0 and len(complement) == 0:
            main_structure_dict_adv = copy.deepcopy(mark_dict)

    flag_empty_content = 0

    #print("5", main_structure_dict_adv)
    #print("z5", tp_adv_dict_ft_single)
    #print("5", adv)

    # 6.处理只有To结构的状语
    index_content = []
    index_adv = 0
    if tp_adv_dict_ft == []:
        try:
            for i in main_structure_dict_adv:
                if (i[0][3::] in ["止", "为止", "截止"] ) and (
                        main_structure_dict_adv[index_i_tp_single - 1][1][2:8] in ["110000", "000011", "111011", "010111"] or
                        main_structure_dict_adv[index_i_tp_single - 1][1][9:15] in ["110000", "000011", "111011", "010111"] or
                        main_structure_dict_adv[index_i_tp_single - 1][1][16:22] in ["110000", "000011", "111011", "010111"] or
                        main_structure_dict_adv[index_i_tp_single - 1][1][23:29] in ["110000", "000011", "111011", "010111"] or
                        main_structure_dict_adv[index_i_tp_single - 1][1][30:36] in ["110000", "000011", "111011", "010111"]):
                    index_i_to_single = main_structure_dict_adv.index(i)
                    tp_adv_dict_ft_single = main_structure_dict_adv[index_i_to_single - 1:index_i_to_single + 1]
                    index_content = tp_adv_dict_ft_single[-1]
                    if tp_adv_dict_ft_single != []:
                        index_adv = mark_dict.index(index_content)
                        tp_adv_dict_ft_single.append(index_adv)
                        adv.append(tp_adv_dict_ft_single)
                        flag_empty_content += 1
                elif (i[0][3::] == "止" or i[0][3::] == "为止" or i[0][3::] == "截止") and (
                        main_structure_dict_adv[index_i_tp_single - 1][1][2:8] in ["110000", "000011", "111011", "010111"] or
                        main_structure_dict_adv[index_i_tp_single - 1][1][9:15] in ["110000", "000011", "111011", "010111"] or
                        main_structure_dict_adv[index_i_tp_single - 1][1][16:22] in ["110000", "000011", "111011", "010111"] or
                        main_structure_dict_adv[index_i_tp_single - 1][1][23:29] in ["110000", "000011", "111011", "010111"] or
                        main_structure_dict_adv[index_i_tp_single - 1][1][30:36] in ["110000", "000011", "111011", "010111"]) \
                        and (main_structure_dict_adv[index_i_tp_single - 2][1][2:8] in ["110000", "000011", "111011", "010111"] or
                             main_structure_dict_adv[index_i_tp_single - 2][1][9:15] in ["110000", "000011", "111011", "010111"] or
                             main_structure_dict_adv[index_i_tp_single - 2][1][16:22] in ["110000", "000011", "111011", "010111"] or
                             main_structure_dict_adv[index_i_tp_single - 2][1][23:29] in ["110000", "000011", "111011", "010111"] or
                             main_structure_dict_adv[index_i_tp_single - 2][1][30:36] in ["110000", "000011", "111011", "010111"]):
                    index_i_to_single = main_structure_dict_adv.index(i)
                    tp_adv_dict_ft_single = main_structure_dict_adv[index_i_to_single - 2:index_i_to_single + 1]
                    index_content = tp_adv_dict_ft_single[-1]
                    if tp_adv_dict_ft_single != []:
                        index_adv = mark_dict.index(index_content)
                        tp_adv_dict_ft_single.append(index_adv)
                        adv.append(tp_adv_dict_ft_single)
                        flag_empty_content += 1
        except Exception:
            pass  # 如果有To，且前有时间方位词或量词，则一起加入，或前有时间方位词量词及数词，则一起加入

        try:
            if len(tp_adv_dict_ft_single) != 0:
                for i in tp_adv_dict_ft_single:
                    for j in main_structure_dict_adv:
                        #if i[0][3::] == j[0][3::] and i != j and i[1][0] == j[1][0]:
                        if i == j:
                            main_structure_dict_adv.remove(j)
        except Exception:
            pass

        if len(tp_adv_dict_ft_single) == count_dictlen and flag_empty_content == 0:
            tp_adv_dict_ft_single = []  # 如果没有，则清空

        if len(tp_adv_dict_ft_single) != 0 and len(tp_adv_dict_ft_single[0]) == 2:
            main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in tp_adv_dict_ft_single]
        elif len(tp_adv_dict_ft_single) != 0 and len(tp_adv_dict_ft_single[0]) != 2:
            tp_adv_dict_ft_single = [tp_adv_dict_ft_single]
            main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in tp_adv_dict_ft_single]

        if len(adv) == 0 and len(complement) == 0:
            main_structure_dict_adv = copy.deepcopy(mark_dict)

    flag_empty_content = 0

    #print("6", main_structure_dict_adv)
    #print("z6", tp_adv_dict_ft_single)
    #print("6", adv)

    #7.处理只有时间地点词的状语/补语
    index_begin = 0
    index_end = 0

    try:
        for i in main_structure_dict_adv:
            index_i_tp_single = main_structure_dict_adv.index(i)
            if (i[1][2:8] in ["110000", "111011"] or i[1][9:15] in ["110000", "111011"] or i[1][16:22] in ["110000", "111011"] or i[1][23:29] in ["110000", "111011"] or i[1][30:36] in ["110000", "111011"]):
                index_i_tp_single = main_structure_dict_adv.index(i)
                if (index_i_tp_single == 0) and (main_structure_dict_adv[index_i_tp_single + 1][1][2:8] == '000001' or main_structure_dict_adv[index_i_tp_single+1][1][9:15] =='000001' or main_structure_dict_adv[index_i_tp_single+1][1][16:22] =='000001' or main_structure_dict_adv[index_i_tp_single+1][1][23:29] =='000001' or main_structure_dict_adv[index_i_tp_single+1][1][30:36] =='000001'):
                    tp_adv_dict_single = []
                    #print("test1")
                elif (index_i_tp_single == 0) and (main_structure_dict_adv[index_i_tp_single + 1][1][2:8] in ["000111", "000101", "000100"] or main_structure_dict_adv[index_i_tp_single+1][1][9:15] in ["000111", "000101", "000100"] or main_structure_dict_adv[index_i_tp_single+1][1][16:22] in ["000111", "000101", "000100"] or main_structure_dict_adv[index_i_tp_single+1][1][23:29] in ["000111", "000101", "000100"] or main_structure_dict_adv[index_i_tp_single+1][1][30:36] in ["000111", "000101", "000100"]):
                    tp_adv_dict_single = [main_structure_dict_adv[index_i_tp_single]]
                    index_content = tp_adv_dict_single[-1]
                    index_begin = index_i_tp_single
                    index_end = index_i_tp_single
                    if tp_adv_dict_single != []:
                        index_adv = mark_dict.index(index_content)
                        tp_adv_dict_single.append(index_adv)
                        #adv.append(tp_adv_dict_single)
                        flag_empty_content += 1
                    #print("test2")
                elif (main_structure_dict_adv[index_i_tp_single-1][1][2:8] == '000111' or main_structure_dict_adv[index_i_tp_single-1][1][9:15] == '000111' or main_structure_dict_adv[index_i_tp_single-1][1][16:22] == '000111' or main_structure_dict_adv[index_i_tp_single-1][1][23:29] == '000111' or main_structure_dict_adv[index_i_tp_single-1][1][30:36] == '000111')\
                    and (main_structure_dict_adv[index_i_tp_single-2][1][2:8] == "000101" or main_structure_dict_adv[index_i_tp_single-2][1][9:15] == "000101" or main_structure_dict_adv[index_i_tp_single-2][1][16:22] == "000101" or main_structure_dict_adv[index_i_tp_single-2][1][23:29] == "000101" or main_structure_dict_adv[index_i_tp_single-2][1][30:36] == "000101") and (
                        main_structure_dict_adv[index_i_tp_single-3][1][2:8] == "000100" or main_structure_dict_adv[index_i_tp_single-3][1][9:15] == "000100" or main_structure_dict_adv[index_i_tp_single-3][1][16:22] == "000100" or main_structure_dict_adv[index_i_tp_single-3][1][23:29] == "000100" or main_structure_dict_adv[index_i_tp_single-3][1][30:36] == "000100") and (
                        main_structure_dict_adv[index_i_tp_single - 4][1][2:8] == "110011" or main_structure_dict_adv[index_i_tp_single - 4][1][9:15] == "110011" or main_structure_dict_adv[index_i_tp_single - 4][1][16:22] == "110011" or main_structure_dict_adv[index_i_tp_single - 4][1][23:29] == "110011" or main_structure_dict_adv[index_i_tp_single - 4][1][30:36] == "110011") and (
                        main_structure_dict_adv[index_i_tp_single + 1][1][2:8] in ['000111', '000100', "010111"] or
                        main_structure_dict_adv[index_i_tp_single + 1][1][9:15] in ['000111', '000100', "010111"] or
                        main_structure_dict_adv[index_i_tp_single + 1][1][16:22] in ['000111', '000100', "010111"] or
                        main_structure_dict_adv[index_i_tp_single + 1][1][23:29] in ['000111', '000100', "010111"] or
                        main_structure_dict_adv[index_i_tp_single + 1][1][30:36] in ['000111', '000100', "010111"]):
                    tp_adv_dict_single = main_structure_dict_adv[index_i_tp_single-4:index_i_tp_single+1]
                    index_content = tp_adv_dict_single[-1]
                    index_begin = index_i_tp_single - 4
                    index_end = index_i_tp_single
                    if tp_adv_dict_single != []:
                        index_adv = mark_dict.index(index_content)
                        tp_adv_dict_single.append(index_adv)
                        #adv.append(tp_adv_dict_single)
                        flag_empty_content += 1
                    #print("test3")
                elif (main_structure_dict_adv[index_i_tp_single-2][1][2:8] =='000111' or main_structure_dict_adv[index_i_tp_single-2][1][9:15] =='000111' or main_structure_dict_adv[index_i_tp_single-2][1][16:22] =='000111' or main_structure_dict_adv[index_i_tp_single-2][1][23:29] =='000111' or main_structure_dict_adv[index_i_tp_single-2][1][30:36] =='000111')\
                    and (main_structure_dict_adv[index_i_tp_single-3][1][2:8] == "000101" or main_structure_dict_adv[index_i_tp_single-3][1][9:15] == "000101" or main_structure_dict_adv[index_i_tp_single-3][1][16:22] == "000101" or main_structure_dict_adv[index_i_tp_single-3][1][23:29] == "000101" or main_structure_dict_adv[index_i_tp_single-3][1][30:36] == "000101") and (
                        main_structure_dict_adv[index_i_tp_single-4][1][2:8] == "000100" or main_structure_dict_adv[index_i_tp_single-4][1][9:15] == "000100" or main_structure_dict_adv[index_i_tp_single-4][1][16:22] == "000100" or main_structure_dict_adv[index_i_tp_single-4][1][23:29] == "000100" or main_structure_dict_adv[index_i_tp_single-4][1][30:36] == "000100") and (
                        main_structure_dict_adv[index_i_tp_single - 5][1][2:8] == "110011" or main_structure_dict_adv[index_i_tp_single - 5][1][9:15] == "110011" or main_structure_dict_adv[index_i_tp_single - 5][1][16:22] == "110011" or main_structure_dict_adv[index_i_tp_single - 5][1][23:29] == "110011" or main_structure_dict_adv[index_i_tp_single - 5][1][30:36] == "110011") and (main_structure_dict_adv[index_i_tp_single + 1][1][2:8] in ['000111', '000100'] or
                    main_structure_dict_adv[index_i_tp_single + 1][1][9:15] in ['000111', '000100', "010111"] or
                    main_structure_dict_adv[index_i_tp_single + 1][1][16:22] in ['000111', '000100', "010111"] or
                    main_structure_dict_adv[index_i_tp_single + 1][1][23:29] in ['000111', '000100', "010111"] or
                    main_structure_dict_adv[index_i_tp_single + 1][1][30:36] in ['000111', '000100', "010111"]):
                    tp_adv_dict_single = main_structure_dict_adv[index_i_tp_single-5:index_i_tp_single+1]
                    index_content = tp_adv_dict_single[-1]
                    index_end = index_i_tp_single
                    index_begin = index_i_tp_single - 5
                    index_end = index_i_tp_single
                    if tp_adv_dict_single != []:
                        index_adv = mark_dict.index(index_content)
                        tp_adv_dict_single.append(index_adv)
                        #adv.append(tp_adv_dict_single)
                        flag_empty_content += 1
                    #print("test4")
                # elif (main_structure_dict_adv[index_i_tp_single-1][1][2:8] =='000001' or main_structure_dict_adv[index_i_tp_single-1][1][9:15] =='000001' or main_structure_dict_adv[index_i_tp_single-1][1][16:22] =='000001' or main_structure_dict_adv[index_i_tp_single-1][1][23:29] =='000001' or main_structure_dict_adv[index_i_tp_single-1][1][30:36] =='000001')\
                #     and (main_structure_dict_adv[index_i_tp_single-2][1][2:8] in ['000111','000100', "010111"] or main_structure_dict_adv[index_i_tp_single-2][1][9:15] in ['000111','000100', "010111"] or main_structure_dict_adv[index_i_tp_single-2][1][16:22] in ['000111','000100', "010111"] or main_structure_dict_adv[index_i_tp_single-2][1][23:29] in ['000111','000100', "010111"] or main_structure_dict_adv[index_i_tp_single-2][1][30:36] in ['000111','000100', "010111"]) and (
                #     main_structure_dict_adv[index_i_tp_single + 1][1][2:8] in ['000111', '000100', "010111"] or
                #     main_structure_dict_adv[index_i_tp_single + 1][1][9:15] in ['000111', '000100', "010111"] or
                #     main_structure_dict_adv[index_i_tp_single + 1][1][16:22] in ['000111', '000100', "010111"] or
                #     main_structure_dict_adv[index_i_tp_single + 1][1][23:29] in ['000111', '000100', "010111"] or
                #     main_structure_dict_adv[index_i_tp_single + 1][1][30:36] in ['000111', '000100', "010111"]):
                #     print("index_i_tp_single-2", index_i_tp_single-2)
                #     tp_adv_dict_single = main_structure_dict_adv[index_i_tp_single-2:index_i_tp_single+1]
                #     index_content = tp_adv_dict_single[-1]
                #     if tp_adv_dict_single != []:
                #         index_adv = mark_dict.index(index_content)
                #         tp_adv_dict_single.append(index_adv)
                #         adv.append(tp_adv_dict_single)
                #         flag_empty_content += 1
                #     print("test5")
                elif (main_structure_dict_adv[index_i_tp_single-1][1][2:8] in ['000101', '000100'] or main_structure_dict_adv[index_i_tp_single-1][1][9:15] in ['000101', '000100'] or main_structure_dict_adv[index_i_tp_single-1][1][16:22] in ['000101', '000100'] or main_structure_dict_adv[index_i_tp_single-1][1][23:29] in ['000101', '000100'] or main_structure_dict_adv[index_i_tp_single-1][1][30:36] in ['000101', '000100']) and (
                        main_structure_dict_adv[index_i_tp_single + 1][1][2:8] in ['000111', '000100', "010111"] or
                        main_structure_dict_adv[index_i_tp_single + 1][1][9:15] in ['000111', '000100', "010111"] or
                        main_structure_dict_adv[index_i_tp_single + 1][1][16:22] in ['000111', '000100', "010111"] or
                        main_structure_dict_adv[index_i_tp_single + 1][1][23:29] in ['000111', '000100', "010111"] or
                        main_structure_dict_adv[index_i_tp_single + 1][1][30:36] in ['000111', '000100', "010111"]):
                    tp_adv_dict_single = main_structure_dict_adv[index_i_tp_single-1:index_i_tp_single+1]
                    index_content = tp_adv_dict_single[-1]
                    index_begin = index_i_tp_single - 1
                    index_end = index_i_tp_single
                    if tp_adv_dict_single != []:
                        index_adv = mark_dict.index(index_content)
                        tp_adv_dict_single.append(index_adv)
                        #adv.append(tp_adv_dict_single)
                        flag_empty_content += 1
                    #print("test6")
                elif(main_structure_dict_adv[index_i_tp_single-1][1][2:8] == '000111' or main_structure_dict_adv[index_i_tp_single-1][1][9:15] == '000111' or main_structure_dict_adv[index_i_tp_single-1][1][16:22] == '000111' or main_structure_dict_adv[index_i_tp_single-1][1][23:29] == '000111' or main_structure_dict_adv[index_i_tp_single-1][1][30:36] == '000111') and (
                        main_structure_dict_adv[index_i_tp_single - 2][1][2:8] == '000100' or main_structure_dict_adv[index_i_tp_single - 2][1][9:15] == '000100' or main_structure_dict_adv[index_i_tp_single - 2][1][16:22] == '000100' or main_structure_dict_adv[index_i_tp_single - 2][1][23:29] == '000100' or main_structure_dict_adv[index_i_tp_single - 2][1][30:36] == '000100') and (
                        main_structure_dict_adv[index_i_tp_single + 1][1][2:8] in ['000111', '000100', "010111"] or
                        main_structure_dict_adv[index_i_tp_single + 1][1][9:15] in ['000111', '000100', "010111"] or
                        main_structure_dict_adv[index_i_tp_single + 1][1][16:22] in ['000111', '000100', "010111"] or
                        main_structure_dict_adv[index_i_tp_single + 1][1][23:29] in ['000111', '000100', "010111"] or
                        main_structure_dict_adv[index_i_tp_single + 1][1][30:36] in ['000111', '000100', "010111"]):
                    tp_adv_dict_single = main_structure_dict_adv[index_i_tp_single-2:index_i_tp_single+1]
                    index_content = tp_adv_dict_single[-1]
                    index_begin = index_i_tp_single - 2
                    index_end = index_i_tp_single
                    if tp_adv_dict_single != []:
                        index_adv = mark_dict.index(index_content)
                        tp_adv_dict_single.append(index_adv)
                        #adv.append(tp_adv_dict_single)
                        flag_empty_content += 1
                    #print("test7")
                elif (main_structure_dict_adv[index_i_tp_single-1][1][2:8] == "000011" or main_structure_dict_adv[index_i_tp_single-1][1][9:15] == "000011" or main_structure_dict_adv[index_i_tp_single-1][1][16:22] == "000011" or main_structure_dict_adv[index_i_tp_single-1][1][23:29] == "000011" or main_structure_dict_adv[index_i_tp_single-1][1][30:36] == "000011") and (
                        main_structure_dict_adv[index_i_tp_single + 1][1][2:8] in ['000111', '000100', "010111"] or
                        main_structure_dict_adv[index_i_tp_single + 1][1][9:15] in ['000111', '000100', "010111"] or
                        main_structure_dict_adv[index_i_tp_single + 1][1][16:22] in ['000111', '000100', "010111"] or
                        main_structure_dict_adv[index_i_tp_single + 1][1][23:29] in ['000111', '000100', "010111"] or
                        main_structure_dict_adv[index_i_tp_single + 1][1][30:36] in ['000111', '000100', "010111"]):
                    tp_adv_dict_single = main_structure_dict_adv[index_i_tp_single - 2:index_i_tp_single + 1]
                    index_content = tp_adv_dict_single[-1]
                    index_begin = index_i_tp_single - 2
                    index_end = index_i_tp_single
                    if tp_adv_dict_single != []:
                        index_adv = mark_dict.index(index_content)
                        tp_adv_dict_single.append(index_adv)
                        #adv.append(tp_adv_dict_single)
                        flag_empty_content += 1
                    #print("test8")
                elif(main_structure_dict_adv[index_i_tp_single-1][1][2:8] not in ['000001','000111','000101','000011','000100'] and main_structure_dict_adv[index_i_tp_single-1][1][9:15] not in ['000001','000111','000101','000011','000100'] and main_structure_dict_adv[index_i_tp_single-1][1][16:22] not in ['000001','000111','000101','000011','000100'] and main_structure_dict_adv[index_i_tp_single-1][23:29] not in ['000001','000111','000101','000011','000100'] and main_structure_dict_adv[index_i_tp_single-1][30:36] not in ['000001','000111','000101','000011','000100']) and (
                        main_structure_dict_adv[index_i_tp_single + 1][1][2:8] in ['000111', '000100', "010111"] or
                        main_structure_dict_adv[index_i_tp_single + 1][1][9:15] in ['000111', '000100', "010111"] or
                        main_structure_dict_adv[index_i_tp_single + 1][1][16:22] in ['000111', '000100', "010111"] or
                        main_structure_dict_adv[index_i_tp_single + 1][1][23:29] in ['000111', '000100', "010111"] or
                        main_structure_dict_adv[index_i_tp_single + 1][1][30:36] in ['000111', '000100', "010111"]):
                    tp_adv_dict_single = main_structure_dict_adv[index_i_tp_single:index_i_tp_single+1]
                    index_content = tp_adv_dict_single[-1]
                    index_begin = index_i_tp_single
                    index_end = index_i_tp_single
                    if tp_adv_dict_single != []:
                        index_adv = mark_dict.index(index_content)
                        tp_adv_dict_single.append(index_adv)
                        #adv.append(tp_adv_dict_single)
                        flag_empty_content += 1
                    #print("test9")
                elif (main_structure_dict_adv[index_i_tp_single - 1][1][2:8] == "000010" or
                      main_structure_dict_adv[index_i_tp_single - 1][1][9:15] == "000010" or
                      main_structure_dict_adv[index_i_tp_single - 1][1][16:22] == "000010" or
                      main_structure_dict_adv[index_i_tp_single - 1][23:29] == "000010" or
                      main_structure_dict_adv[index_i_tp_single - 1][30:36] == "000010"):
                    tp_adv_dict_single = main_structure_dict_adv[index_i_tp_single-1:index_i_tp_single + 1]
                    index_content = tp_adv_dict_single[-1]
                    index_begin = index_i_tp_single - 1
                    index_end = index_i_tp_single
                    if tp_adv_dict_single != []:
                        index_adv = mark_dict.index(index_content)
                        tp_adv_dict_single.append(index_adv)
                        #adv.append(tp_adv_dict_single)
                        flag_empty_content += 1
                    #print("test10")
                elif (main_structure_dict_adv[index_i_tp_single + 1][1][2:8] in ["110000", "000010", "111011"] or
                      main_structure_dict_adv[index_i_tp_single + 1][1][9:15] in ["110000", "000010", "111011"] or
                      main_structure_dict_adv[index_i_tp_single + 1][1][16:22] in ["110000", "000010", "111011"] or
                      main_structure_dict_adv[index_i_tp_single + 1][23:29] in ["110000", "000010", "111011"] or
                      main_structure_dict_adv[index_i_tp_single + 1][30:36] in ["110000", "000010", "111011"]):
                    tp_adv_dict_single = main_structure_dict_adv[index_i_tp_single:index_i_tp_single + 2]
                    index_content = tp_adv_dict_single[-1]
                    index_end_word = index_i_tp_single + 1
                    index_begin = index_i_tp_single
                    index_end = index_i_tp_single + 1
                    if tp_adv_dict_single != []:
                        index_adv = mark_dict.index(index_content)
                        tp_adv_dict_single.append(index_adv)
                        #adv.append(tp_adv_dict_single)
                        flag_empty_content += 1
                    if (main_structure_dict_adv[index_i_tp_single + 2][1][2:8] in ["110000", "000010", "111011"] or
                     main_structure_dict_adv[index_i_tp_single + 2][1][9:15] in ["110000", "000010", "111011"] or
                     main_structure_dict_adv[index_i_tp_single + 2][1][16:22] in ["110000", "000010", "111011"] or
                     main_structure_dict_adv[index_i_tp_single + 2][23:29] in ["110000", "000010", "111011"] or
                     main_structure_dict_adv[index_i_tp_single + 2][30:36] in ["110000", "000010", "111011"]):
                        tp_adv_dict_single = main_structure_dict_adv[index_i_tp_single:index_i_tp_single + 3]
                        index_content = tp_adv_dict_single[-1]
                        index_begin = index_i_tp_single
                        index_end = index_i_tp_single + 2
                        if tp_adv_dict_single != []:
                            index_adv = mark_dict.index(index_content)
                            tp_adv_dict_single.append(index_adv)
                            #adv.append(tp_adv_dict_single)
                            flag_empty_content += 1
                            print("test11.2", flag_empty_content)
                        if (main_structure_dict_adv[index_i_tp_single + 3][1][2:8] in ["110000", "000010", "111011"] or
                                main_structure_dict_adv[index_i_tp_single + 3][1][9:15] in ["110000", "000010", "111011"] or
                                main_structure_dict_adv[index_i_tp_single + 3][1][16:22] in ["110000", "000010", "111011"] or
                                main_structure_dict_adv[index_i_tp_single + 3][23:29] in ["110000", "000010", "111011"] or
                                main_structure_dict_adv[index_i_tp_single + 3][30:36] in ["110000", "000010", "111011"]):
                            tp_adv_dict_single = main_structure_dict_adv[index_i_tp_single:index_i_tp_single + 4]
                            index_content = tp_adv_dict_single[-1]
                            index_begin = index_i_tp_single
                            index_end = index_i_tp_single + 3
                            if tp_adv_dict_single != []:
                                index_adv = mark_dict.index(index_content)
                                tp_adv_dict_single.append(index_adv)
                                #adv.append(tp_adv_dict_single)
                                flag_empty_content += 1
                            if (main_structure_dict_adv[index_i_tp_single + 4][1][2:8] in ["110000", "000010", "111011"] or
                                    main_structure_dict_adv[index_i_tp_single + 4][1][9:15] in ["110000", "000010", "111011"] or
                                    main_structure_dict_adv[index_i_tp_single + 4][1][16:22] in ["110000", "000010", "111011"] or
                                    main_structure_dict_adv[index_i_tp_single + 4][23:29] in ["110000", "000010", "111011"] or
                                    main_structure_dict_adv[index_i_tp_single + 4][30:36] in ["110000", "000010", "111011"]):
                                tp_adv_dict_single = main_structure_dict_adv[index_i_tp_single:index_i_tp_single + 5]
                                index_content = tp_adv_dict_single[-1]
                                index_begin = index_i_tp_single
                                index_end = index_i_tp_single + 4
                                if tp_adv_dict_single != []:
                                    index_adv = mark_dict.index(index_content)
                                    tp_adv_dict_single.append(index_adv)
                                    #adv.append(tp_adv_dict_single)
                                    flag_empty_content += 1
                                if (main_structure_dict_adv[index_i_tp_single + 5][1][2:8] in ["110000", "000010", "111011"] or
                                        main_structure_dict_adv[index_i_tp_single + 5][1][9:15] in ["110000",
                                                                                                    "000010", "111011"] or
                                        main_structure_dict_adv[index_i_tp_single + 5][1][16:22] in ["110000",
                                                                                                     "000010", "111011"] or
                                        main_structure_dict_adv[index_i_tp_single + 5][23:29] in ["110000", "000010", "111011"] or
                                        main_structure_dict_adv[index_i_tp_single + 5][30:36] in ["110000", "000010", "111011"]):
                                    tp_adv_dict_single = main_structure_dict_adv[
                                                         index_i_tp_single:index_i_tp_single + 6]
                                    index_content = tp_adv_dict_single[-1]
                                    index_begin = index_i_tp_single
                                    index_end = index_i_tp_single + 5
                                    if tp_adv_dict_single != []:
                                        index_adv = mark_dict.index(index_content)
                                        tp_adv_dict_single.append(index_adv)
                                        #adv.append(tp_adv_dict_single)
                                        flag_empty_content += 1
                                    if (main_structure_dict_adv[index_i_tp_single + 6][1][2:8] in ["110000", "000010", "111011"] or
                                            main_structure_dict_adv[index_i_tp_single + 6][1][9:15] in ["110000", "000010", "111011"] or
                                            main_structure_dict_adv[index_i_tp_single + 6][1][16:22] in ["110000", "000010", "111011"] or
                                            main_structure_dict_adv[index_i_tp_single + 6][23:29] in ["110000", "000010", "111011"] or
                                            main_structure_dict_adv[index_i_tp_single + 6][30:36] in ["110000", "000010", "111011"]):
                                        tp_adv_dict_single = main_structure_dict_adv[
                                                             index_i_tp_single:index_i_tp_single + 7]
                                        index_content = tp_adv_dict_single[-1]
                                        index_begin = index_i_tp_single
                                        index_end = index_i_tp_single + 6
                                        if tp_adv_dict_single != []:
                                            index_adv = mark_dict.index(index_content)
                                            tp_adv_dict_single.append(index_adv)
                                            #adv.append(tp_adv_dict_single)
                                            flag_empty_content += 1
                                        if (main_structure_dict_adv[index_i_tp_single + 7][1][2:8] in ["110000",
                                                                                                       "000010", "111011"] or
                                                main_structure_dict_adv[index_i_tp_single + 7][1][9:15] in ["110000",
                                                                                                            "000010", "111011"] or
                                                main_structure_dict_adv[index_i_tp_single + 7][1][16:22] in ["110000",
                                                                                                             "000010", "111011"] or
                                                main_structure_dict_adv[index_i_tp_single + 7][23:29] in ["110000",
                                                                                                          "000010", "111011"] or
                                                main_structure_dict_adv[index_i_tp_single + 7][30:36] in ["110000",
                                                                                                          "000010", "111011"]):
                                            tp_adv_dict_single = main_structure_dict_adv[
                                                                 index_i_tp_single:index_i_tp_single + 8]
                                            index_content = tp_adv_dict_single[-1]
                                            index_begin = index_i_tp_single
                                            index_end = index_i_tp_single + 7
                                            if tp_adv_dict_single != []:
                                                index_adv = mark_dict.index(index_content)
                                                tp_adv_dict_single.append(index_adv)
                                                #adv.append(tp_adv_dict_single)
                                                flag_empty_content += 1
                                            if (main_structure_dict_adv[index_i_tp_single + 8][1][2:8] in ["110000",
                                                                                                           "000010", "111011"] or
                                                    main_structure_dict_adv[index_i_tp_single + 8][1][9:15] in [
                                                        "110000", "000010", "111011"] or
                                                    main_structure_dict_adv[index_i_tp_single + 8][1][16:22] in [
                                                        "110000", "000010", "111011"] or
                                                    main_structure_dict_adv[index_i_tp_single + 8][23:29] in ["110000",
                                                                                                              "000010", "111011"] or
                                                    main_structure_dict_adv[index_i_tp_single + 8][30:36] in ["110000",
                                                                                                              "000010", "111011"]):
                                                tp_adv_dict_single = main_structure_dict_adv[
                                                                     index_i_tp_single:index_i_tp_single + 9]
                                                index_content = tp_adv_dict_single[-1]
                                                index_begin = index_i_tp_single
                                                index_end = index_i_tp_single + 8
                                                if tp_adv_dict_single != []:
                                                    index_adv = mark_dict.index(index_content)
                                                    tp_adv_dict_single.append(index_adv)
                                                    #adv.append(tp_adv_dict_single)
                                                    flag_empty_content += 1
                                                if (main_structure_dict_adv[index_i_tp_single + 9][1][2:8] in ["110000",
                                                                                                               "000010", "111011"] or
                                                        main_structure_dict_adv[index_i_tp_single + 9][1][9:15] in [
                                                            "110000", "000010", "111011"] or
                                                        main_structure_dict_adv[index_i_tp_single + 9][1][16:22] in [
                                                            "110000", "000010", "111011"] or
                                                        main_structure_dict_adv[index_i_tp_single + 9][23:29] in [
                                                            "110000", "000010", "111011"] or
                                                        main_structure_dict_adv[index_i_tp_single + 9][30:36] in [
                                                            "110000", "000010", "111011"]):
                                                    tp_adv_dict_single = main_structure_dict_adv[
                                                                         index_i_tp_single:index_i_tp_single + 10]
                                                    index_content = tp_adv_dict_single[-1]
                                                    index_begin = index_i_tp_single
                                                    index_end = index_i_tp_single + 9
                                                    if tp_adv_dict_single != []:
                                                        index_adv = mark_dict.index(index_content)
                                                        tp_adv_dict_single.append(index_adv)
                                                        #adv.append(tp_adv_dict_single)
                                                        flag_empty_content += 1
                    #(main_structure_dict_adv[index_i_tp_single - 1][1][2:8] in ["000001", "000101"] or main_structure_dict_adv[index_i_tp_single + 9][1][9:15] in ["000001", "000101"] or main_structure_dict_adv[index_i_tp_single + 9][1][16:22] in ["000001", "000101"] or main_structure_dict_adv[index_i_tp_single + 9][23:29] in ["000001", "000101"] or main_structure_dict_adv[index_i_tp_single + 9][30:36] in ["000001", "000101"]):
                    #print("test11", flag_empty_content)
    except Exception:
        pass

    # print("index_begin", index_begin)
    # print("index_end", index_end)
    # print("tp_adv_dict_single", tp_adv_dict_single)

    try:
        if main_structure_dict_adv[index_begin - 1][1][2:8] in ["000001", "000101"] or main_structure_dict_adv[index_begin - 1][1][9:15] in ["000001", "000101"] or main_structure_dict_adv[index_begin - 1][1][16:22] in ["000001", "000101"] or main_structure_dict_adv[index_begin - 1][1][23:29] in ["000001", "000101"] or main_structure_dict_adv[index_begin - 1][1][30:36] in ["000001", "000101"]:
            complement.append(tp_adv_dict_single)
        elif main_structure_dict_adv[index_end + 1][1][2:8] in ["000001", "000101"] or main_structure_dict_adv[index_end + 1][1][9:15] in ["000001", "000101"] or main_structure_dict_adv[index_end + 1][1][16:22] in ["000001", "000101"] or main_structure_dict_adv[index_end + 1][1][23:29] in ["000001", "000101"] or main_structure_dict_adv[index_end + 1][1][30:36] in ["000001", "000101"]:
            adv.append(tp_adv_dict_single)
        else:
            adv.append(tp_adv_dict_single)
    except Exception:
        pass

    #print("complement", complement)

    try:
        if len(tp_adv_dict_single) != 0:
            for i in tp_adv_dict_single:
                for j in main_structure_dict_adv:
                    if i == j:
                        main_structure_dict_adv.remove(j)
    except Exception:
        pass

    if len(tp_adv_dict_single)!= 0 and flag_empty_content == 0:
        tp_adv_dict_single = []

    if len(tp_adv_dict_single) != 0 and len(tp_adv_dict_single[0]) == 2:
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in tp_adv_dict_single]
    elif len(tp_adv_dict_single) != 0 and len(tp_adv_dict_single[0]) != 2:
        tp_adv_dict_single = [tp_adv_dict_single]
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in tp_adv_dict_single]

    if len(adv) == 0 and len(complement) == 0:
        main_structure_dict_adv = copy.deepcopy(mark_dict)

    flag_empty_content = 0

    #print("7", main_structure_dict_adv)
    #print("z7", tp_adv_dict_single)
    #print("7", adv)

    #8.处理叹词
    try:
        for i in main_structure_dict_adv:
            index_i_sigh = main_structure_dict_adv.index(i)
            if (i[1][2:8] == "001110" or i[1][9:15] == "001110" or i[1][16:22] == "001110" or i[1][23:29] == "001110" or i[1][30:36] == "001110") and (i[0][3:] not in ["的", "之"]):
                adv_sigh_dict = main_structure_dict_adv[index_i_sigh]
                index_content = adv_sigh_dict[-1]
                if adv_sigh_dict != []:
                    index_adv = mark_dict.index(index_content)
                    adv_sigh_dict.append(index_adv)
                    adv.append(adv_sigh_dict)
                    flag_empty_content += 1
                #print("sigh", adv_sigh_dict)
    except Exception:
        pass #剔除叹词

    try:
        if len(adv_sigh_dict) != 0:
            for i in adv_sigh_dict:
                for j in main_structure_dict_adv:
                    #if i[0][3::] == j[0][3:] and i != j and i[1][0] == j[1][0]:
                    if i == j:
                        main_structure_dict_adv.remove(j)
    except Exception:
        pass

    if len(adv_sigh_dict) !=0 and flag_empty_content == 0:
        adv_sigh_dict = []  # 如果没有，则清空

    if len(adv_sigh_dict) != 0 and len(adv_sigh_dict[0]) == 2:
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in adv_sigh_dict]
    elif len(adv_sigh_dict) != 0 and len(adv_sigh_dict[0]) != 2:
        adv_sigh_dict = [adv_sigh_dict]
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in adv_sigh_dict]

    if len(adv) == 0 and len(complement) == 0:
        main_structure_dict_adv = copy.deepcopy(mark_dict)

    flag_empty_content = 0

    #print("8", main_structure_dict_adv)
    #print("z8", adv_sigh_dict)
    #print("8", adv)

    #9. 处理“若”、“像”、“似”等补语
    index_content = []
    index_adv = 0
    try:
        for i in main_structure_dict_adv:
            index_i_as = main_structure_dict_adv.index(i)
            if (i[0][3::] == "若" or i[0][3::] == "如" or i[0][3::] == "似" or i[0][3::] == "像" or i[0][3::] == "好像" or i[0][3::] == "仿佛" or i[0][3::] == "仿似" or i[0][3::] == "好似" or i[0][3::] == "正如" or i[0][3::] == "恰如")\
                    and (main_structure_dict_adv[index_i_as - 1][1][2:8] == "000001" or
                        main_structure_dict_adv[index_i_as - 1][1][9:15] == "000001" or
                        main_structure_dict_adv[index_i_as - 1][1][16:22] == "000001" or
                        main_structure_dict_adv[index_i_as - 1][1][23:29] == "000001" or
                        main_structure_dict_adv[index_i_as - 1][1][30:36] == "000001")\
                    and (main_structure_dict_adv[index_i_as +1][1][2:8] in ['000111', '000101', '000110'] or
                        main_structure_dict_adv[index_i_as +1][1][9:15] in ['000111', '000101', '000110'] or
                        main_structure_dict_adv[index_i_as +1][1][16:22] in ['000111', '000101', '000110'] or
                        main_structure_dict_adv[index_i_as +1][1][23:29] in ['000111', '000101', '000110'] or
                        main_structure_dict_adv[index_i_as +1][1][30:36] in ['000111', '000101', '000110']):
                adv_as_dict = main_structure_dict_adv[index_i_as:index_i_as+2]
                index_content = adv_as_dict[-1]
                if adv_as_dict != []:
                    index_adv = mark_dict.index(index_content)
                    adv_as_dict.append(index_adv)
                    complement.append(adv_as_dict)
                    flag_empty_content += 1
     #前为动，后为名、形、副，则后面部分一起入状语、补语
    except Exception:
        pass

    try:
        if len(adv_as_dict) != 0:
            for i in adv_as_dict:
                for j in main_structure_dict_adv:
                    #if i[0][3::] == j[0][3:] and i != j and i[1][0] == j[1][0]:
                    if i == j:
                        main_structure_dict_adv.remove(j)
    except Exception:
        pass

    if len(adv_as_dict) != 0 and flag_empty_content == 0:
        adv_as_dict = []  # 如果没有，则清空

    if len(adv_as_dict) != 0 and len(adv_as_dict[0]) == 2:
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in adv_as_dict]
    elif len(adv_as_dict) != 0 and len(adv_as_dict[0]) != 2:
        adv_as_dict = [adv_as_dict]
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in adv_as_dict]

    if len(adv) == 0 and len(complement) == 0:
        main_structure_dict_adv = copy.deepcopy(mark_dict)

    flag_empty_content = 0

    #print("z9", adv_as_dict)
    #print("9", complement)
    #print("9", main_structure_dict_adv)

    #10. 处理程度补语“累得直喘粗气”等
    index_content = []
    index_adv = 0
    try:
        for i in main_structure_dict_adv:
            index_i_complement_de = main_structure_dict_adv.index(i)
            if (i[0][3::] == "得") \
                    and (main_structure_dict_adv[index_i_complement_de - 1][1][2:8] in ["000001", "000101"] or
                         main_structure_dict_adv[index_i_complement_de - 1][1][9:15] in ["000001", "000101"] or
                         main_structure_dict_adv[index_i_complement_de - 1][1][16:22] in ["000001", "000101"] or
                         main_structure_dict_adv[index_i_complement_de - 1][1][23:29] in ["000001", "000101"] or
                         main_structure_dict_adv[index_i_complement_de - 1][1][30:36] in ["000001", "000101"])\
                    and (main_structure_dict_adv[index_i_complement_de + 1][1][2:8] == "000001" or
                        main_structure_dict_adv[index_i_complement_de + 1][1][9:15] == "000001" or
                        main_structure_dict_adv[index_i_complement_de + 1][1][16:22] == "000001" or
                        main_structure_dict_adv[index_i_complement_de + 1][1][23:29] == "000001" or
                        main_structure_dict_adv[index_i_complement_de + 1][1][30:36] == "000001")\
                    and (main_structure_dict_adv[index_i_complement_de + 2][1][2:8] in ["000111", "000110"] or
                        main_structure_dict_adv[index_i_complement_de + 2][1][9:15] in ["000111", "000110"] or
                        main_structure_dict_adv[index_i_complement_de + 2][1][16:22] in ["000111", "000110"] or
                        main_structure_dict_adv[index_i_complement_de + 2][1][23:29] in ["000111", "000110"] or
                        main_structure_dict_adv[index_i_complement_de + 2][1][30:36] in ["000111", "000110"]):
                complement_degree_de_dict = main_structure_dict_adv[index_i_complement_de:index_i_complement_de + 3]
                index_content = complement_degree_de_dict[0]
                if complement_degree_de_dict != []:
                    index_adv = mark_dict.index(index_content)
                    complement_degree_de_dict.append(index_adv)
                    complement.append(complement_degree_de_dict)
                    flag_empty_content += 1
            elif (i[0][3::] == "得")\
                    and (main_structure_dict_adv[index_i_complement_de - 1][1][2:8] in ["000001", "000101"] or
                        main_structure_dict_adv[index_i_complement_de - 1][1][9:15] in ["000001", "000101"] or
                        main_structure_dict_adv[index_i_complement_de - 1][1][16:22] in ["000001", "000101"] or
                        main_structure_dict_adv[index_i_complement_de - 1][1][23:29] in ["000001", "000101"] or
                        main_structure_dict_adv[index_i_complement_de - 1][1][30:36] in ["000001", "000101"])\
                    and (main_structure_dict_adv[index_i_complement_de + 1][1][2:8] == "000110" or
                        main_structure_dict_adv[index_i_complement_de + 1][1][9:15] == "000110" or
                        main_structure_dict_adv[index_i_complement_de + 1][1][16:22] == "000110" or
                        main_structure_dict_adv[index_i_complement_de + 1][1][23:29] == "000110" or
                        main_structure_dict_adv[index_i_complement_de + 1][1][30:36] == "000110"):
                complement_degree_de_dict = main_structure_dict_adv[index_i_complement_de:index_i_complement_de + 2]
                index_content = complement_degree_de_dict[0]
                if complement_degree_de_dict != []:
                    index_adv = mark_dict.index(index_content)
                    complement_degree_de_dict.append(index_adv)
                    complement.append(complement_degree_de_dict)
                    flag_empty_content += 1
            elif (i[0][3::] == "得") \
                 and (main_structure_dict_adv[index_i_complement_de - 1][1][2:8] in ["000001", "000101"] or
                      main_structure_dict_adv[index_i_complement_de - 1][1][9:15] in ["000001", "000101"] or
                      main_structure_dict_adv[index_i_complement_de - 1][1][16:22] in ["000001", "000101"] or
                      main_structure_dict_adv[index_i_complement_de - 1][1][23:29] in ["000001", "000101"] or
                      main_structure_dict_adv[index_i_complement_de - 1][1][30:36] in ["000001", "000101"]) \
                 and (main_structure_dict_adv[index_i_complement_de + 1][1][2:8] == "000001" or
                      main_structure_dict_adv[index_i_complement_de + 1][1][9:15] == "000001" or
                      main_structure_dict_adv[index_i_complement_de + 1][1][16:22] == "000001" or
                      main_structure_dict_adv[index_i_complement_de + 1][1][23:29] == "000001" or
                      main_structure_dict_adv[index_i_complement_de + 1][1][30:36] == "000001") and (
                    main_structure_dict_adv[index_i_complement_de + 2][1][2:8] == "000110" or
                  main_structure_dict_adv[index_i_complement_de + 2][1][9:15] == "000110" or
                  main_structure_dict_adv[index_i_complement_de + 2][1][16:22] == "000110" or
                  main_structure_dict_adv[index_i_complement_de + 2][1][23:29] == "000110" or
                  main_structure_dict_adv[index_i_complement_de + 2][1][30:36] == "000110"):
                complement_degree_de_dict = main_structure_dict_adv[index_i_complement_de:index_i_complement_de + 3]
                index_content = complement_degree_de_dict[0]
                if complement_degree_de_dict != []:
                    index_adv = mark_dict.index(index_content)
                    complement_degree_de_dict.append(index_adv)
                    complement.append(complement_degree_de_dict)
                    flag_empty_content += 1
     #前为形，后为动+副或动+名词，则后面部分一起入补语；前为动，后为副，则后面部分一起入补语
    except Exception:
        pass

    try:
        if len(complement_degree_de_dict) != 0:
            for i in complement_degree_de_dict:
                for j in main_structure_dict_adv:
                    #if i[0][3::] == j[0][3:] and i != j and i[1][0] == j[1][0]:
                    if i == j:
                        main_structure_dict_adv.remove(j)
    except Exception:
        pass

    if len(complement_degree_de_dict) != 0 and flag_empty_content == 0:
        complement_degree_de_dict = []  # 如果没有，则清空

    if len(complement_degree_de_dict) != 0 and len(complement_degree_de_dict[0]) == 2:
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in complement_degree_de_dict]
    elif len(complement_degree_de_dict) != 0 and len(complement_degree_de_dict[0]) != 2:
        complement_degree_de_dict = [complement_degree_de_dict]
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in complement_degree_de_dict]

    if len(adv) == 0 and len(complement) == 0:
        main_structure_dict_adv = copy.deepcopy(mark_dict)

    flag_empty_content = 0

    #print("z10", complement_degree_de_dict)
    #print("10", complement)
    #print("10", main_structure_dict_adv)

    #11. 处理补语“巧了点儿”、“出了院门”、 “进了嘴里”等
    index_content = []
    index_adv = 0
    try:
        for i in main_structure_dict_adv:
            index_i_adj_le = main_structure_dict_adv.index(i)
            if (i[0][3::] == "了")\
                    and (main_structure_dict_adv[index_i_adj_le + 1][1][2:8] == "000110" or
                        main_structure_dict_adv[index_i_adj_le + 1][1][9:15] == "000110" or
                        main_structure_dict_adv[index_i_adj_le + 1][1][16:22] == "000110" or
                        main_structure_dict_adv[index_i_adj_le + 1][1][23:29] == "000110" or
                        main_structure_dict_adv[index_i_adj_le + 1][1][30:36] == "000110"):
                complement_adj_le_dict = main_structure_dict_adv[index_i_adj_le:index_i_adj_le + 2]
                index_content = complement_adj_le_dict[0]
                if complement_adj_le_dict != []:
                    index_adv = mark_dict.index(index_content)
                    complement_adj_le_dict.append(index_adv)
                    complement.append(complement_adj_le_dict)
                    flag_empty_content += 1
            elif (i[0][3::] == "了")\
                    and (main_structure_dict_adv[index_i_adj_le + 1][1][2:8] in ["110000", "111011", "010111"] or
                        main_structure_dict_adv[index_i_adj_le  + 1][1][9:15] in ["110000", "111011", "010111"] or
                        main_structure_dict_adv[index_i_adj_le  + 1][1][16:22] in ["110000", "111011", "010111"] or
                        main_structure_dict_adv[index_i_adj_le  + 1][1][23:29] in ["110000", "111011", "010111"] or
                        main_structure_dict_adv[index_i_adj_le  + 1][1][30:36] in ["110000", "111011", "010111"]) and (
                        main_structure_dict_adv[index_i_adj_le - 1][1][2:8] == "000001" or
                        main_structure_dict_adv[index_i_adj_le - 1][1][9:15] == "000001" or
                        main_structure_dict_adv[index_i_adj_le - 1][1][16:22] == "000001" or
                        main_structure_dict_adv[index_i_adj_le - 1][1][23:29] == "000001" or
                        main_structure_dict_adv[index_i_adj_le - 1][1][30:36] == "000001") and (
                        main_structure_dict_adv[index_i_adj_le - 2][1][2:8] == "000001" or
                        main_structure_dict_adv[index_i_adj_le - 2][1][9:15] == "000001" or
                        main_structure_dict_adv[index_i_adj_le - 2][1][16:22] == "000001" or
                        main_structure_dict_adv[index_i_adj_le - 2][1][23:29] == "000001" or
                        main_structure_dict_adv[index_i_adj_le - 2][1][30:36] == "000001"):
                #print("1")
                complement_adj_le_dict = main_structure_dict_adv[index_i_adj_le-1:index_i_adj_le + 2]
                index_content = complement_adj_le_dict[0]
                if complement_adj_le_dict != []:
                    index_adv = mark_dict.index(index_content)
                    complement_adj_le_dict.append(index_adv)
                    complement.append(complement_adj_le_dict)
                    flag_empty_content += 1
            elif (i[0][3::] == "了")\
                    and (main_structure_dict_adv[index_i_adj_le + 1][1][2:8] in ["110000", "111011", "010111"] or
                        main_structure_dict_adv[index_i_adj_le  + 1][1][9:15] in ["110000", "111011", "010111"] or
                        main_structure_dict_adv[index_i_adj_le  + 1][1][16:22] in ["110000", "111011", "010111"] or
                        main_structure_dict_adv[index_i_adj_le  + 1][1][23:29] in ["110000", "111011", "010111"] or
                        main_structure_dict_adv[index_i_adj_le  + 1][1][30:36] in ["110000", "111011", "010111"]) and (
                        main_structure_dict_adv[index_i_adj_le - 1][1][2:8] != "000001" and
                        main_structure_dict_adv[index_i_adj_le - 1][1][9:15] != "000001" and
                        main_structure_dict_adv[index_i_adj_le - 1][1][16:22] != "000001" and
                        main_structure_dict_adv[index_i_adj_le - 1][1][23:29] != "000001" and
                        main_structure_dict_adv[index_i_adj_le - 1][1][30:36] != "000001") and (
                        main_structure_dict_adv[index_i_adj_le - 2][1][2:8] == "000001" or
                        main_structure_dict_adv[index_i_adj_le - 2][1][9:15] == "000001" or
                        main_structure_dict_adv[index_i_adj_le - 2][1][16:22] == "000001" or
                        main_structure_dict_adv[index_i_adj_le - 2][1][23:29] == "000001" or
                        main_structure_dict_adv[index_i_adj_le - 2][1][30:36] == "000001") and (main_structure_dict_adv[index_i_adj_le - 2][0][3:] == main_structure_dict_adv[index_i_adj_le - 1][0][3:]):
                #print("2")
                complement_adj_le_dict.append(main_structure_dict_adv[index_i_adj_le - 2:index_i_adj_le-1])
                complement_adj_le_dict.append(main_structure_dict_adv[index_i_adj_le:index_i_adj_le +1])
                complement_adj_le_dict.append(main_structure_dict_adv[index_i_adj_le + 1:index_i_adj_le + 2])
                index_content = complement_adj_le_dict[0]
                if complement_adj_le_dict != []:
                    index_adv = mark_dict.index(index_content)
                    complement_adj_le_dict.append(index_adv)
                    complement.append(complement_adj_le_dict)
                    flag_empty_content += 1
            elif (i[0][3::] == "了")\
                    and (main_structure_dict_adv[index_i_adj_le + 1][1][2:8] in ["110000", "111011", "010111"] or
                        main_structure_dict_adv[index_i_adj_le  + 1][1][9:15] in ["110000", "111011", "010111"] or
                        main_structure_dict_adv[index_i_adj_le  + 1][1][16:22] in ["110000", "111011", "010111"] or
                        main_structure_dict_adv[index_i_adj_le  + 1][1][23:29] in ["110000", "111011", "010111"] or
                        main_structure_dict_adv[index_i_adj_le  + 1][1][30:36] in ["110000", "111011", "010111"]) and (
                        main_structure_dict_adv[index_i_adj_le - 1][1][2:8] != "000001" and
                        main_structure_dict_adv[index_i_adj_le - 1][1][9:15] != "000001" and
                        main_structure_dict_adv[index_i_adj_le - 1][1][16:22] != "000001" and
                        main_structure_dict_adv[index_i_adj_le - 1][1][23:29] != "000001" and
                        main_structure_dict_adv[index_i_adj_le - 1][1][30:36] != "000001") and (
                        main_structure_dict_adv[index_i_adj_le - 2][1][2:8] != "000001" and
                        main_structure_dict_adv[index_i_adj_le - 2][1][9:15] != "000001" and
                        main_structure_dict_adv[index_i_adj_le - 2][1][16:22] != "000001" and
                        main_structure_dict_adv[index_i_adj_le - 2][1][23:29] != "000001" and
                        main_structure_dict_adv[index_i_adj_le - 2][1][30:36] != "000001") and (
                        main_structure_dict_adv[index_i_adj_le - 3][1][2:8] == "000001" or
                        main_structure_dict_adv[index_i_adj_le - 3][1][9:15] == "000001" or
                        main_structure_dict_adv[index_i_adj_le - 3][1][16:22] == "000001" or
                        main_structure_dict_adv[index_i_adj_le - 3][1][23:29] == "000001" or
                        main_structure_dict_adv[index_i_adj_le - 3][1][30:36] == "000001") and (main_structure_dict_adv[index_i_adj_le - 2][0][3:] == main_structure_dict_adv[index_i_adj_le - 3][0][3:] == main_structure_dict_adv[index_i_adj_le - 1][0][3:]):
                #print("3")
                complement_adj_le_dict.append(main_structure_dict_adv[index_i_adj_le - 3:index_i_adj_le - 2])
                complement_adj_le_dict.append(main_structure_dict_adv[index_i_adj_le:index_i_adj_le +1])
                complement_adj_le_dict.append(main_structure_dict_adv[index_i_adj_le + 1:index_i_adj_le +2])
                index_content = complement_adj_le_dict[0]
                #print("complement_adj_le_dict1", complement_adj_le_dict)
                if complement_adj_le_dict != []:
                    index_adv = mark_dict.index(index_content)
                    complement_adj_le_dict.append(index_adv)
                    complement.append(complement_adj_le_dict)
                    flag_empty_content += 1
            elif (i[0][3::] == "了")\
                    and (main_structure_dict_adv[index_i_adj_le + 1][1][2:8] == "000111" or
                        main_structure_dict_adv[index_i_adj_le  + 1][1][9:15] == "000111" or
                        main_structure_dict_adv[index_i_adj_le  + 1][1][16:22] == "000111" or
                        main_structure_dict_adv[index_i_adj_le  + 1][1][23:29] == "000111" or
                        main_structure_dict_adv[index_i_adj_le  + 1][1][30:36] == "000111") and(
                    main_structure_dict_adv[index_i_adj_le + 2][1][2:8] in ["110000", "111011", "010111"] or
                    main_structure_dict_adv[index_i_adj_le + 2][1][9:15] in ["110000", "111011", "010111"] or
                    main_structure_dict_adv[index_i_adj_le + 2][1][16:22] in ["110000", "111011", "010111"] or
                    main_structure_dict_adv[index_i_adj_le + 2][1][23:29] in ["110000", "111011", "010111"] or
                    main_structure_dict_adv[index_i_adj_le + 2][1][30:36] in ["110000", "111011", "010111"]) \
                    and (main_structure_dict_adv[index_i_adj_le - 1][1][2:8] == "000001" and
                        main_structure_dict_adv[index_i_adj_le - 1][1][9:15] == "000001" and
                        main_structure_dict_adv[index_i_adj_le - 1][1][16:22] == "000001" and
                        main_structure_dict_adv[index_i_adj_le - 1][1][23:29] == "000001" and
                        main_structure_dict_adv[index_i_adj_le - 1][1][30:36] == "000001") and (
                        main_structure_dict_adv[index_i_adj_le - 2][1][2:8] == "000001" and
                        main_structure_dict_adv[index_i_adj_le - 2][1][9:15] == "000001" and
                        main_structure_dict_adv[index_i_adj_le - 2][1][16:22] == "000001" and
                        main_structure_dict_adv[index_i_adj_le - 2][1][23:29] == "000001" and
                        main_structure_dict_adv[index_i_adj_le - 2][1][30:36] == "000001") and (main_structure_dict_adv[index_i_adj_le - 2][0][3:] != main_structure_dict_adv[index_i_adj_le - 1][0][3:]):
                #print("4")
                complement_adj_le_dict.append(main_structure_dict_adv[index_i_adj_le - 2:index_i_adj_le - 1])
                complement_adj_le_dict.append(main_structure_dict_adv[index_i_adj_le:index_i_adj_le +1])
                complement_adj_le_dict.append(main_structure_dict_adv[index_i_adj_le + 1:index_i_adj_le +2])
                complement_adj_le_dict.append(main_structure_dict_adv[index_i_adj_le + 2:index_i_adj_le +3])
                index_content = complement_adj_le_dict[0]
                #print("complement_adj_le_dict1", complement_adj_le_dict)
                if complement_adj_le_dict != []:
                    index_adv = mark_dict.index(index_content)
                    complement_adj_le_dict.append(index_adv)
                    complement.append(complement_adj_le_dict)
                    flag_empty_content += 1
            elif (i[0][3::] == "了") \
                 and (main_structure_dict_adv[index_i_adj_le + 1][1][2:8] == "000111" or
                      main_structure_dict_adv[index_i_adj_le + 1][1][9:15] == "000111" or
                      main_structure_dict_adv[index_i_adj_le + 1][1][16:22] == "000111" or
                      main_structure_dict_adv[index_i_adj_le + 1][1][23:29] == "000111" or
                      main_structure_dict_adv[index_i_adj_le + 1][1][30:36] == "000111") and (
                         main_structure_dict_adv[index_i_adj_le + 3][1][2:8] == "110000" or
                         main_structure_dict_adv[index_i_adj_le + 3][1][9:15] == "110000" or
                         main_structure_dict_adv[index_i_adj_le + 3][1][16:22] == "110000" or
                         main_structure_dict_adv[index_i_adj_le + 3][1][23:29] == "110000" or
                         main_structure_dict_adv[index_i_adj_le + 3][1][30:36] == "110000") and (main_structure_dict_adv[index_i_adj_le + 2][0][3:] ==
                             main_structure_dict_adv[index_i_adj_le + 3][0][3:]) and (
                      main_structure_dict_adv[index_i_adj_le - 1][1][2:8] == "000001" or
                      main_structure_dict_adv[index_i_adj_le - 1][1][9:15] == "000001" or
                      main_structure_dict_adv[index_i_adj_le - 1][1][16:22] == "000001" or
                      main_structure_dict_adv[index_i_adj_le - 1][1][23:29] == "000001" or
                      main_structure_dict_adv[index_i_adj_le - 1][1][30:36] == "000001") and (
                         main_structure_dict_adv[index_i_adj_le - 2][1][2:8] == "000001" or
                         main_structure_dict_adv[index_i_adj_le - 2][1][9:15] == "000001" or
                         main_structure_dict_adv[index_i_adj_le - 2][1][16:22] == "000001" or
                         main_structure_dict_adv[index_i_adj_le - 2][1][23:29] == "000001" or
                         main_structure_dict_adv[index_i_adj_le - 2][1][30:36] == "000001") and (
                             main_structure_dict_adv[index_i_adj_le - 2][0][3:] !=
                             main_structure_dict_adv[index_i_adj_le - 1][0][3:]):
                complement_adj_le_dict.append(main_structure_dict_adv[index_i_adj_le - 1:index_i_adj_le])
                complement_adj_le_dict.append(main_structure_dict_adv[index_i_adj_le:index_i_adj_le +1])
                complement_adj_le_dict.append(main_structure_dict_adv[index_i_adj_le + 1:index_i_adj_le +2])
                complement_adj_le_dict.append(main_structure_dict_adv[index_i_adj_le + 3:index_i_adj_le + 4])
                main_structure_dict_adv.remove(main_structure_dict_adv[index_i_adj_le+2:index_i_adj_le +3])
                index_content = complement_adj_le_dict[0]
                if complement_adj_le_dict != []:
                    index_adv = mark_dict.index(index_content)
                    complement_adj_le_dict.append(index_adv)
                    complement.append(complement_adj_le_dict)
                    flag_empty_content += 1
    except Exception:
        pass

    try:
        if len(complement_adj_le_dict) != 0:
            for i in complement_adj_le_dict:
                for j in list_duplicate:
                    index_j = list_duplicate.index(j)
                    #if i[0][3::] == j[0][3::] and i != j and i[1][0] == j[1][0]:
                    if i == j:
                        main_structure_dict_adv.remove(j)
    except Exception:
        pass

    if len(complement_adj_le_dict) != 0 and flag_empty_content == 0:
        complement_adj_le_dict = []  # 如果没有，则清空

    if len(complement_adj_le_dict) != 0 and len(complement_adj_le_dict[0]) == 2:
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in complement_adj_le_dict]
    elif len(complement_adj_le_dict) != 0 and len(complement_adj_le_dict[0]) != 2:
        complement_adj_le_dict = [complement_adj_le_dict]
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in complement_adj_le_dict]

    if len(adv) == 0 and len(complement) == 0:
        main_structure_dict_adv = copy.deepcopy(mark_dict)

    flag_empty_content = 0

    #print("z11", complement_adj_le_dict)
    #print("11", complement)
    #print("11", main_structure_dict_adv)

    #12. 处理普通程度补语“站立起来”等
    index_content = []
    index_adv = 0
    try:
        for i in main_structure_dict_adv:
            index_i_complement_degree = main_structure_dict_adv.index(i)
            if (i[1][2:8] == "000001" or i[1][9:15] == "000001" or i[1][16:22] == "000001" or i[1][23:29] == "000001" or i[1][30:36] == "000001") and (
                        main_structure_dict_adv[index_i_complement_degree + 1][1][2:8] == "000110" or
                        main_structure_dict_adv[index_i_complement_degree + 1][1][9:15] == "000110" or
                        main_structure_dict_adv[index_i_complement_degree + 1][1][16:22] == "000110" or
                        main_structure_dict_adv[index_i_complement_degree + 1][1][23:29] == "000110" or
                        main_structure_dict_adv[index_i_complement_degree + 1][1][30:36] == "000110") and (main_structure_dict_adv[index_i_complement_degree + 1][0][3::] in ["起", "起来", "下来", "上去", "过来", "过去", "上来", "下去", "死了", "坏了", "疯了", "抽了", "卷了", "万分", "吁吁"]) and (
                    main_structure_dict_adv[index_i_complement_degree - 1][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                    main_structure_dict_adv[index_i_complement_degree - 1][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                    main_structure_dict_adv[index_i_complement_degree - 1][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                    main_structure_dict_adv[index_i_complement_degree - 1][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                    main_structure_dict_adv[index_i_complement_degree - 1][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]):
                complement_degree_dict = main_structure_dict_adv[index_i_complement_degree + 1:index_i_complement_degree + 2]
                index_content = complement_degree_dict[0]
                if complement_degree_dict != []:
                    index_adv = mark_dict.index(index_content)
                    complement_degree_dict.append(index_adv)
                    complement.append(complement_degree_dict)
                    flag_empty_content += 1
            elif (i[1][2:8] in ["000001", "000101"] or i[1][9:15] in ["000001", "000101"] or i[1][16:22] in ["000001", "000101"] or i[1][23:29] in ["000001", "000101"] or i[1][30:36] in ["000001", "000101"])\
                    and (main_structure_dict_adv[index_i_complement_degree + 2][1][2:8] == "000110" or
                        main_structure_dict_adv[index_i_complement_degree + 2][1][9:15] == "000110" or
                        main_structure_dict_adv[index_i_complement_degree + 2][1][16:22] == "000110" or
                        main_structure_dict_adv[index_i_complement_degree + 2][1][23:29] == "000110" or
                        main_structure_dict_adv[index_i_complement_degree + 2][1][30:36] == "000110") and (main_structure_dict_adv[index_i_complement_degree + 1][0][3::] in ["起", "起来", "下来", "上去", "过来", "过去", "上来", "下去", "死了", "坏了", "疯了", "抽了", "卷了", "万分", "吁吁"]) and (
                    main_structure_dict_adv[index_i_complement_degree + 2][0][3::] == main_structure_dict_adv[index_i_complement_degree + 1][0][3::]):
                complement_degree_dict = main_structure_dict_adv[index_i_complement_degree + 2:index_i_complement_degree + 3]
                index_content = complement_degree_dict[0]
                if complement_degree_dict != []:
                    index_adv = mark_dict.index(index_content)
                    complement_degree_dict.append(index_adv)
                    complement.append(complement_degree_dict)
                    flag_empty_content += 1
    except Exception:
        pass #后为副，则后面部分单独入程度补语

    try:
        if len(complement_degree_dict) != 0:
            for i in complement_degree_dict:
                for j in main_structure_dict_adv:
                    #if i[0][3::] == j[0][3:] and i != j and i[1][0] == j[1][0]:
                    if i == j:
                        main_structure_dict_adv.remove(j)
    except Exception:
        pass

    if len(complement_degree_dict) !=0 and flag_empty_content == 0:
        complement_degree_dict = []  # 如果没有，则清空

    if len(complement_adj_le_dict) != 0 and len(adv_simple_dict[0]) == 2:
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in complement_adj_le_dict]
    elif len(complement_adj_le_dict) != 0 and len(complement_adj_le_dict[0]) != 2:
        complement_adj_le_dict = [complement_adj_le_dict]
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in complement_adj_le_dict]

    if len(adv) == 0 and len(complement) == 0:
        main_structure_dict_adv = copy.deepcopy(mark_dict)

    flag_empty_content = 0

    #print("z12", complement_degree_dict)
    #print("12", complement)
    #print("12", main_structure_dict_adv)

    # #13. 处理特殊用法的补语
    # try:
    #     for i in main_structure_dict_adv:
    #         index_i_complement_specialuse = main_structure_dict_adv.index(i)
    #         if (i[1][9:15] == "101000" or i[1][16:22] == "101000" or i[1][23:29] == "101000" or i[1][30:36] == "101000") and (
    #                 i[1][2:8] != "000001"):
    #             complement_specialuse_dict = main_structure_dict_adv[index_i_complement_specialuse]
    #             main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in complement_specialuse_dict]
    #
    # except Exception:
    #     pass
    #
    #print("13", main_structure_dict_adv)
    # print("main", main_structure_dict_adv)
    #print("13", adv)

    # 14. #n+“里、中”或n+v+"里"，等时间地点词状
    index_content = []
    index_adv = 0
    try:
        for i in main_structure_dict_adv:
            index_i_adv_middle = main_structure_dict_adv.index(i)
            #print("index", index_i_adv_middle)
            if (i[1][2:8] in ["110000", "111011"] or i[1][9:15] in ["110000", "111011"] or i[1][16:22] in ["110000", "111011"] or i[1][23:29] in ["110000", "111011"] or
                    i[1][30:36] in ["110000", "111011"]) and (
                    main_structure_dict_adv[index_i_adv_middle + 1][0][3::] not in ["的", "之"] and
                    main_structure_dict_adv[index_i_adv_middle + 1][1][2:8] not in ["000001", "000101"] and
                    main_structure_dict_adv[index_i_adv_middle + 1][1][9:15] not in ["000001", "000101"] and
                    main_structure_dict_adv[index_i_adv_middle + 1][1][16:22] not in ["000001", "000101"] and
                    main_structure_dict_adv[index_i_adv_middle + 1][1][23:29] not in ["000001", "000101"] and
                    main_structure_dict_adv[index_i_adv_middle + 1][1][30:36] not in ["000001", "000101"]):
                for j in main_structure_dict_adv:
                    index_j = main_structure_dict_adv.index(j)
                    if j[0][3::] == i[0][3::] and i!=j and i[1][0] == j[1][0]:
                        main_structure_dict_adv[index_j] = "NaN"
                for j in main_structure_dict_adv:
                    if j == "NaN":
                        main_structure_dict_adv.remove(j)
                index_i_adv_middle = main_structure_dict_adv.index(i)
                if (main_structure_dict_adv[index_i_adv_middle - 1][1][2:8] == "000111" or
                    main_structure_dict_adv[index_i_adv_middle - 1][1][9:15] == "000111" or
                    main_structure_dict_adv[index_i_adv_middle - 1][1][16:22] == "000111" or
                    main_structure_dict_adv[index_i_adv_middle - 1][1][23:29] == "000111" or
                    main_structure_dict_adv[index_i_adv_middle - 1][1][30:36] == "000111") \
                        and (main_structure_dict_adv[index_i_adv_middle - 1] == main_structure_dict_adv[0]):
                    adv_middle_dict = main_structure_dict_adv[index_i_adv_middle - 1:index_i_adv_middle + 1]
                    index_content = adv_middle_dict[0]
                    if adv_middle_dict != []:
                        index_adv = mark_dict.index(index_content)
                        adv_middle_dict.append(index_adv)
                        adv.append(adv_middle_dict)
                        flag_empty_content += 1
                    #print("1", adv_middle_dict)
                elif (main_structure_dict_adv[index_i_adv_middle - 1][1][2:8] == "000111" or
                    main_structure_dict_adv[index_i_adv_middle - 1][1][9:15] == "000111" or
                    main_structure_dict_adv[index_i_adv_middle - 1][1][16:22] == "000111" or
                    main_structure_dict_adv[index_i_adv_middle - 1][1][23:29] == "000111" or
                    main_structure_dict_adv[index_i_adv_middle - 1][1][30:36] == "000111") \
                        and (main_structure_dict_adv[index_i_adv_middle - 2][1][2:8] in ["000001", "000101", "000111"] or
                             main_structure_dict_adv[index_i_adv_middle - 2][1][9:15] in ["000001", "000101", "000111"] or
                             main_structure_dict_adv[index_i_adv_middle - 2][1][16:22] in ["000001", "000101", "000111"] or
                             main_structure_dict_adv[index_i_adv_middle - 2][1][23:29] in ["000001", "000101", "000111"] or
                             main_structure_dict_adv[index_i_adv_middle - 2][1][30:36] in ["000001", "000101", "000111"]) and (index_i_adv_middle - 2 != 0):
                    adv_middle_dict = main_structure_dict_adv[index_i_adv_middle - 2:index_i_adv_middle + 1]
                    index_content = adv_middle_dict[0]
                    if adv_middle_dict != []:
                        index_adv = mark_dict.index(index_content)
                        adv_middle_dict.append(index_adv)
                        adv.append(adv_middle_dict)
                        flag_empty_content += 1
                    #print("2", adv_middle_dict)
                elif (main_structure_dict_adv[index_i_adv_middle - 1][1][2:8] == "000111" or
                    main_structure_dict_adv[index_i_adv_middle - 1][1][9:15] == "000111" or
                    main_structure_dict_adv[index_i_adv_middle - 1][1][16:22] == "000111" or
                    main_structure_dict_adv[index_i_adv_middle - 1][1][23:29] == "000111" or
                    main_structure_dict_adv[index_i_adv_middle - 1][1][30:36] == "000111") \
                        and (main_structure_dict_adv[index_i_adv_middle - 2][1][2:8] not in ["000001", "000101"] and
                             main_structure_dict_adv[index_i_adv_middle - 2][1][9:15] not in ["000001", "000101"] and
                             main_structure_dict_adv[index_i_adv_middle - 2][1][16:22] not in ["000001", "000101"] and
                             main_structure_dict_adv[index_i_adv_middle - 2][1][23:29] not in ["000001", "000101"] and
                             main_structure_dict_adv[index_i_adv_middle - 2][1][30:36] not in ["000001", "000101"]):
                    adv_middle_dict = main_structure_dict_adv[index_i_adv_middle - 1:index_i_adv_middle + 1]
                    index_content = adv_middle_dict[0]
                    if adv_middle_dict != []:
                        index_adv = mark_dict.index(index_content)
                        adv_middle_dict.append(index_adv)
                        adv.append(adv_middle_dict)
                        flag_empty_content += 1
                    #print("3", adv_middle_dict)
     #“里”前面部分的名词、双名词，或名+动结构，入状语
    except Exception:
        pass

    try:
        if len(adv_middle_dict) != 0:
            for i in adv_middle_dict:
                for j in main_structure_dict_adv:
                    #if i[0][3::] == j[0][3:] and i != j and i[1][0] == j[1][0]:
                    if i == j:
                        main_structure_dict_adv.remove(j)
    except Exception:
        pass

    if len(adv_middle_dict) !=0 and flag_empty_content == 0:
        adv_middle_dict = []  # 如果没有，则清空

    if len(adv_middle_dict) != 0 and len(adv_middle_dict[0]) == 2:
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in adv_middle_dict]
    elif len(adv_middle_dict) != 0 and len(adv_middle_dict[0]) != 2:
        adv_middle_dict = [adv_middle_dict]
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in adv_middle_dict]

    if len(adv) == 0 and len(complement) == 0:
        main_structure_dict_adv = copy.deepcopy(mark_dict)

    flag_empty_content = 0

    #print("z14", adv_middle_dict)
    #print("14", adv)
    #print("14", main_structure_dict_adv)

    # 15. “跟”某人+V状语
    index_content = []
    index_adv = 0
    try:
        for i in main_structure_dict_adv:
            index_i_adv_with_sb = main_structure_dict_adv.index(i)
            if (i[1][2:8] == "110011" or i[1][9:15] == "110011" or i[1][16:22] == "110011" or i[1][3:29] == "110011" or i[1][30:36] == "110011") \
                    and (main_structure_dict_adv[index_i_adv_with_sb + 1][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adv[index_i_adv_with_sb + 1][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adv[index_i_adv_with_sb + 1][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adv[index_i_adv_with_sb + 1][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict_adv[index_i_adv_with_sb + 1][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]) and (
                    main_structure_dict_adv[index_i_adv_with_sb + 2][1][2:8] == "000001" or
                    main_structure_dict_adv[index_i_adv_with_sb + 2][1][9:15] == "000001" or
                    main_structure_dict_adv[index_i_adv_with_sb + 2][1][16:22] == "000001" or
                    main_structure_dict_adv[index_i_adv_with_sb + 2][1][23:29] == "000001" or
                    main_structure_dict_adv[index_i_adv_with_sb + 2][1][30:36] == "000001"):
                adv_with_sb_dict = main_structure_dict_adv[index_i_adv_with_sb:index_i_adv_with_sb + 2]
                index_content = adv_with_sb_dict[-1]
                if adv_with_sb_dict != []:
                    index_adv = mark_dict.index(index_content)
                    adv_with_sb_dict.append(index_adv)
                    adv.append(adv_with_sb_dict)
                    flag_empty_content += 1
    except Exception:
        pass

    try:
        if len(adv_with_sb_dict) != 0:
            for i in adv_with_sb_dict:
                for j in main_structure_dict_adv:
                    #if i[0][3::] == j[0][3:] and i != j and i[1][0] == j[1][0]:
                    if i == j:
                        main_structure_dict_adv.remove(j)
    except Exception:
        pass

    if len(adv_with_sb_dict) != 0 and flag_empty_content == 0:
        adv_with_sb_dict = []  # 如果没有，则清空

    if len(adv_with_sb_dict) != 0 and len(adv_with_sb_dict[0]) == 2:
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in adv_with_sb_dict]
    elif len(adv_with_sb_dict) != 0 and len(adv_with_sb_dict[0]) != 2:
        adv_with_sb_dict = [adv_with_sb_dict]
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in adv_with_sb_dict]

    if len(adv) == 0 and len(complement) == 0:
        main_structure_dict_adv = copy.deepcopy(mark_dict)

    flag_empty_content = 0

    #print("z15", adv_with_sb_dict)
    #print("15", adv)
    #print("15", main_structure_dict_adv)

    # 16. “为了”整个做状语
    index_content = []
    index_adv = 0
    try:
        for i in main_structure_dict_adv:
            index_i_adv_inorderto = main_structure_dict_adv.index(i)
            if (i[0][3::] == "为了" or "为") and (i[1][2:8] == "110011" or i[1][9:15] == "110011" or i[1][16:22] == "110011" or i[1][3:29] == "110011" or i[1][30:36] == "110011"):
                for j in main_structure_dict_adv:
                    index_j = main_structure_dict_adv.index(j)
                    if j[0][3::] == i[0][3::] and i != j and i[1][0] == j[1][0]:
                        main_structure_dict_adv[index_j]
                for j in main_structure_dict_adv:
                    if j == "NaN":
                        main_structure_dict_adv.remove(j)
                index_i_adv_middle = main_structure_dict_adv.index(i)
                if (main_structure_dict_adv[index_i_adv_inorderto + 1][1][2:8] in ["000110", "000001", "000101"] or
                        main_structure_dict_adv[index_i_adv_inorderto + 1][1][9:15] in ["000110", "000001"] or
                        main_structure_dict_adv[index_i_adv_inorderto + 1][1][16:22] in ["000110", "000001"] or
                        main_structure_dict_adv[index_i_adv_inorderto + 1][1][23:29] in ["000110", "000001"] or
                        main_structure_dict_adv[index_i_adv_inorderto + 1][1][30:36] in ["000110", "000001"]) and (
                        main_structure_dict_adv[index_i_adv_inorderto + 2][1][2:8] in ["000111", "000001"] or
                        main_structure_dict_adv[index_i_adv_inorderto + 2][1][9:15] in ["000111", "000001"] or
                        main_structure_dict_adv[index_i_adv_inorderto + 2][1][16:22] in ["000111", "000001"] or
                        main_structure_dict_adv[index_i_adv_inorderto + 2][1][23:29] in ["000111", "000001"] or
                        main_structure_dict_adv[index_i_adv_inorderto + 2][1][30:36] in ["000111", "000001"]):
                    adv_inorderto_dict = main_structure_dict_adv[index_i_adv_with_sb:index_i_adv_inorderto + 3]
                    index_content = adv_inorderto_dict[-1]
                    if adv_inorderto_dict != []:
                        index_adv = mark_dict.index(index_content)
                        adv_inorderto_dict.append(index_adv)
                        adv.append(adv_inorderto_dict)
                        flag_empty_content += 1
                elif (main_structure_dict_adv[index_i_adv_inorderto + 1][1][2:8] in ["000111", "000100", "010111"] or
                        main_structure_dict_adv[index_i_adv_inorderto + 1][1][9:15] in ["000111", "000100", "010111"] or
                        main_structure_dict_adv[index_i_adv_inorderto + 1][1][16:22] in ["000111", "000100", "010111"] or
                        main_structure_dict_adv[index_i_adv_inorderto + 1][1][23:29] in ["000111", "000100", "010111"] or
                        main_structure_dict_adv[index_i_adv_inorderto + 1][1][30:36] in ["000111", "000100", "010111"]):
                    adv_inorderto_dict = main_structure_dict_adv[index_i_adv_with_sb:index_i_adv_inorderto + 2]
                    index_content = adv_inorderto_dict[-1]
                    if adv_inorderto_dict != []:
                        index_adv = mark_dict.index(index_content)
                        adv_inorderto_dict.append(index_adv)
                        adv.append(adv_inorderto_dict)
                        flag_empty_content += 1
                elif (main_structure_dict_adv[index_i_adv_inorderto + 1][1][2:8] == "000101" or
                        main_structure_dict_adv[index_i_adv_inorderto + 1][1][9:15] == "000101" or
                        main_structure_dict_adv[index_i_adv_inorderto + 1][1][16:22] == "000101" or
                        main_structure_dict_adv[index_i_adv_inorderto + 1][1][23:29] == "000101" or
                        main_structure_dict_adv[index_i_adv_inorderto + 1][1][30:36] == "000101") and (
                        main_structure_dict_adv[index_i_adv_inorderto + 2][1][2:8] == "000111" or
                        main_structure_dict_adv[index_i_adv_inorderto + 2][1][9:15] == "000111" or
                        main_structure_dict_adv[index_i_adv_inorderto + 2][1][16:22] == "000111" or
                        main_structure_dict_adv[index_i_adv_inorderto + 2][1][23:29] == "000111" or
                        main_structure_dict_adv[index_i_adv_inorderto + 2][1][30:36] == "000111"):
                    adv_inorderto_dict = main_structure_dict_adv[index_i_adv_with_sb:index_i_adv_inorderto + 3]
                    index_content = adv_inorderto_dict[-1]
                    if adv_inorderto_dict != []:
                        index_adv = mark_dict.index(index_content)
                        adv_inorderto_dict.append(index_adv)
                        adv.append(adv_inorderto_dict)
                        flag_empty_content += 1
                elif (main_structure_dict_adv[index_i_adv_inorderto + 1][1][2:8] == "000001" or
                      main_structure_dict_adv[index_i_adv_inorderto + 1][1][9:15] == "000001" or
                      main_structure_dict_adv[index_i_adv_inorderto + 1][1][16:22] == "000001" or
                      main_structure_dict_adv[index_i_adv_inorderto + 1][1][23:29] == "000001" or
                      main_structure_dict_adv[index_i_adv_inorderto + 1][1][30:36] == "000001") and (
                             main_structure_dict_adv[index_i_adv_inorderto + 2][1][2:8] in ["000111", "000100", "010111"] or
                             main_structure_dict_adv[index_i_adv_inorderto + 2][1][9:15] in ["000111", "000100", "010111"] or
                             main_structure_dict_adv[index_i_adv_inorderto + 2][1][16:22] in ["000111", "000100", "010111"] or
                             main_structure_dict_adv[index_i_adv_inorderto + 2][1][23:29] in ["000111", "000100", "010111"] or
                             main_structure_dict_adv[index_i_adv_inorderto + 2][1][30:36] in ["000111", "000100", "010111"]) and (
                        main_structure_dict_adv[index_i_adv_inorderto + 3][1][2:8] == "000001" or
                        main_structure_dict_adv[index_i_adv_inorderto + 3][1][9:15] == "000001" or
                        main_structure_dict_adv[index_i_adv_inorderto + 3][1][16:22] == "000001" or
                        main_structure_dict_adv[index_i_adv_inorderto + 3][1][23:29] == "000001" or
                        main_structure_dict_adv[index_i_adv_inorderto + 3][1][30:36] == "000001") and (
                        main_structure_dict_adv[index_i_adv_inorderto + 4][1][2:8] == "000111" or
                        main_structure_dict_adv[index_i_adv_inorderto + 4][1][9:15] == "000111" or
                        main_structure_dict_adv[index_i_adv_inorderto + 4][1][16:22] == "000111" or
                        main_structure_dict_adv[index_i_adv_inorderto + 4][1][23:29] == "000111" or
                        main_structure_dict_adv[index_i_adv_inorderto + 4][1][30:36] == "000111"):
                    adv_inorderto_dict = main_structure_dict_adv[index_i_adv_with_sb:index_i_adv_inorderto + 5]
                    index_content = adv_inorderto_dict[-1]
                    if adv_inorderto_dict != []:
                        index_adv = mark_dict.index(index_content)
                        adv_inorderto_dict.append(index_adv)
                        adv.append(adv_inorderto_dict)
                        flag_empty_content += 1
                elif (main_structure_dict_adv[index_i_adv_inorderto + 1][1][2:8] == "000001" or
                      main_structure_dict_adv[index_i_adv_inorderto + 1][1][9:15] == "000001" or
                      main_structure_dict_adv[index_i_adv_inorderto + 1][1][16:22] == "000001" or
                      main_structure_dict_adv[index_i_adv_inorderto + 1][1][23:29] == "000001" or
                      main_structure_dict_adv[index_i_adv_inorderto + 1][1][30:36] == "000001") and (
                             main_structure_dict_adv[index_i_adv_inorderto + 2][1][2:8] in ["000111", "000100", "010111"] or
                             main_structure_dict_adv[index_i_adv_inorderto + 2][1][9:15] in ["000111", "000100", "010111"] or
                             main_structure_dict_adv[index_i_adv_inorderto + 2][1][16:22] in ["000111", "000100", "010111"] or
                             main_structure_dict_adv[index_i_adv_inorderto + 2][1][23:29] in ["000111", "000100", "010111"] or
                             main_structure_dict_adv[index_i_adv_inorderto + 2][1][30:36] in ["000111", "000100", "010111"]) and (
                        main_structure_dict_adv[index_i_adv_inorderto + 3][1][2:8] == "000001" or
                        main_structure_dict_adv[index_i_adv_inorderto + 3][1][9:15] == "000001" or
                        main_structure_dict_adv[index_i_adv_inorderto + 3][1][16:22] == "000001" or
                        main_structure_dict_adv[index_i_adv_inorderto + 3][1][23:29] == "000001" or
                        main_structure_dict_adv[index_i_adv_inorderto + 3][1][30:36] == "000001") and (
                        main_structure_dict_adv[index_i_adv_inorderto + 4][1][2:8] == "000111" or
                        main_structure_dict_adv[index_i_adv_inorderto + 4][1][9:15] == "000111" or
                        main_structure_dict_adv[index_i_adv_inorderto + 4][1][16:22] == "000111" or
                        main_structure_dict_adv[index_i_adv_inorderto + 4][1][23:29] == "000111" or
                        main_structure_dict_adv[index_i_adv_inorderto + 4][1][30:36] == "000111"):
                    adv_inorderto_dict = main_structure_dict_adv[index_i_adv_with_sb:index_i_adv_inorderto + 5]
                    index_content = adv_inorderto_dict[-1]
                    if adv_inorderto_dict != []:
                        index_adv = mark_dict.index(index_content)
                        adv_inorderto_dict.append(index_adv)
                        adv.append(adv_inorderto_dict)
                        flag_empty_content += 1
                elif (main_structure_dict_adv[index_i_adv_inorderto + 1][1][2:8] == "000001" or
                      main_structure_dict_adv[index_i_adv_inorderto + 1][1][9:15] == "000001" or
                      main_structure_dict_adv[index_i_adv_inorderto + 1][1][16:22] == "000001" or
                      main_structure_dict_adv[index_i_adv_inorderto + 1][1][23:29] == "000001" or
                      main_structure_dict_adv[index_i_adv_inorderto + 1][1][30:36] == "000001") and (
                             main_structure_dict_adv[index_i_adv_inorderto + 2][1][2:8] in ["000111", "000100", "010111"] or
                             main_structure_dict_adv[index_i_adv_inorderto + 2][1][9:15] in ["000111", "000100", "010111"] or
                             main_structure_dict_adv[index_i_adv_inorderto + 2][1][16:22] in ["000111", "000100", "010111"] or
                             main_structure_dict_adv[index_i_adv_inorderto + 2][1][23:29] in ["000111", "000100", "010111"] or
                             main_structure_dict_adv[index_i_adv_inorderto + 2][1][30:36] in ["000111", "000100", "010111"]) and (
                        main_structure_dict_adv[index_i_adv_inorderto + 3][1][2:8] == "000001" or
                        main_structure_dict_adv[index_i_adv_inorderto + 3][1][9:15] == "000001" or
                        main_structure_dict_adv[index_i_adv_inorderto + 3][1][16:22] == "000001" or
                        main_structure_dict_adv[index_i_adv_inorderto + 3][1][23:29] == "000001" or
                        main_structure_dict_adv[index_i_adv_inorderto + 3][1][30:36] == "000001") and (
                        main_structure_dict_adv[index_i_adv_inorderto + 4][1][2:8] in ["000100", "000101"] or
                        main_structure_dict_adv[index_i_adv_inorderto + 4][1][9:15] in ["000100", "000101"] or
                        main_structure_dict_adv[index_i_adv_inorderto + 4][1][16:22] in ["000100", "000101"] or
                        main_structure_dict_adv[index_i_adv_inorderto + 4][1][23:29] in ["000100", "000101"] or
                        main_structure_dict_adv[index_i_adv_inorderto + 4][1][30:36] in ["000100", "000101"]):
                    adv_inorderto_dict = main_structure_dict_adv[index_i_adv_with_sb::]
                    index_content = adv_inorderto_dict[-1]
                    if adv_inorderto_dict != []:
                        index_adv = mark_dict.index(index_content)
                        adv_inorderto_dict.append(index_adv)
                        adv.append(adv_inorderto_dict)
                        flag_empty_content += 1
                elif (main_structure_dict_adv[index_i_adv_inorderto + 1][1][2:8] == "000001" or
                      main_structure_dict_adv[index_i_adv_inorderto + 1][1][9:15] == "000001" or
                      main_structure_dict_adv[index_i_adv_inorderto + 1][1][16:22] == "000001" or
                      main_structure_dict_adv[index_i_adv_inorderto + 1][1][23:29] == "000001" or
                      main_structure_dict_adv[index_i_adv_inorderto + 1][1][30:36] == "000001") and (
                             main_structure_dict_adv[index_i_adv_inorderto + 2][1][2:8] in ["000111", "000100", "010111"] or
                             main_structure_dict_adv[index_i_adv_inorderto + 2][1][9:15] in ["000111", "000100", "010111"] or
                             main_structure_dict_adv[index_i_adv_inorderto + 2][1][16:22] in ["000111", "000100", "010111"] or
                             main_structure_dict_adv[index_i_adv_inorderto + 2][1][23:29] in ["000111", "000100", "010111"] or
                             main_structure_dict_adv[index_i_adv_inorderto + 2][1][30:36] in ["000111", "000100", "010111"]) and (
                        main_structure_dict_adv[index_i_adv_inorderto + 3][1][2:8] == "000110" or
                        main_structure_dict_adv[index_i_adv_inorderto + 3][1][9:15] == "000110" or
                        main_structure_dict_adv[index_i_adv_inorderto + 3][1][16:22] == "000110" or
                        main_structure_dict_adv[index_i_adv_inorderto + 3][1][23:29] == "000110" or
                        main_structure_dict_adv[index_i_adv_inorderto + 3][1][30:36] == "000110") and (
                        main_structure_dict_adv[index_i_adv_inorderto + 4][1][2:8] == "000001" or
                        main_structure_dict_adv[index_i_adv_inorderto + 4][1][9:15] == "000001" or
                        main_structure_dict_adv[index_i_adv_inorderto + 4][1][16:22] == "000001" or
                        main_structure_dict_adv[index_i_adv_inorderto + 4][1][23:29] == "000001" or
                        main_structure_dict_adv[index_i_adv_inorderto + 4][1][30:36] == "000001"):
                    adv_inorderto_dict = main_structure_dict_adv[index_i_adv_with_sb::]
                    index_content = adv_inorderto_dict[-1]
                    if adv_inorderto_dict != []:
                        index_adv = mark_dict.index(index_content)
                        adv_inorderto_dict.append(index_adv)
                        adv.append(adv_inorderto_dict)
                        flag_empty_content += 1
    except Exception:
        pass

    try:
        if len(adv_inorderto_dict) != 0:
            for i in adv_inorderto_dict:
                for j in main_structure_dict_adv:
                    #if i[0][3::] == j[0][3:] and i != j and i[1][0] == j[1][0]:
                    if i == j:
                        main_structure_dict_adv.remove(j)
    except Exception:
        pass

    if len(adv_inorderto_dict) != 0 and flag_empty_content == 0:
        adv_inorderto_dict = []  # 如果没有，则清空

    if len(adv_inorderto_dict) != 0 and len(adv_inorderto_dict[0]) == 2:
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in adv_inorderto_dict]
    elif len(adv_inorderto_dict) != 0 and len(adv_inorderto_dict[0]) != 2:
        adv_inorderto_dict = [adv_inorderto_dict]
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in adv_inorderto_dict]

    if len(adv) == 0 and len(complement) == 0:
        main_structure_dict_adv = copy.deepcopy(mark_dict)

    flag_empty_content = 0

    #print("z16", adv_inorderto_dict)
    #print("16", adv)
    #print("16", main_structure_dict_adv)

    # 17. 翻遍地球..做状语
    index_content = []
    index_adv = 0
    try:
        for i in main_structure_dict_adv:
            index_i_adv_through = main_structure_dict_adv.index(i)
            if (i[1][2:8] == "000001" or i[1][9:15] == "000001" or i[1][16:22] == "000001" or i[1][3:29] == "000001" or i[1][30:36] == "000001") and (
                    main_structure_dict_adv[index_i_adv_through + 1][0][3::] in ["遍", '通']):
                for j in main_structure_dict_adv:
                    index_j = main_structure_dict_adv.index(j)
                    if j[0][3::] == i[0][3::] and i != j and i[1][0] == j[1][0]:
                        main_structure_dict_adv[index_j] = "NaN"
                for j in main_structure_dict_adv:
                    if j == "NaN":
                        main_structure_dict_adv.remove(j)
                for j in main_structure_dict_adv:
                    if (j[0][3::] in ["遍", '通']) and (j[1][2:8] != "000110" and i[1][9:15] != "000110" and i[1][16:22] != "000110" and i[1][3:29] != "000110" and i[1][30:36] != "000110"):
                        main_structure_dict_adv.remove(j)
                index_i_adv_middle = main_structure_dict_adv.index(i)
                adv_through_dict_0 = main_structure_dict_adv[index_i_adv_through::]
                #print("main", main_structure_dict_adv)

    except Exception:
        pass

    count_dictlen = len(adv_through_dict)

    try:
        for i in adv_through_dict_0:
            index_i_adv_through_end = adv_through_dict_0.index(i)
            if (i[1][2:8] in ["000100", "000011", "000101"] or i[1][9:15] in ["000100", "000011", "000101"] or i[1][16:22] in ["000100", "000011", "000101"] or \
                    i[1][23:29] in ["000100", "000011", "000101"] or i[1][30:36] in ["000100", "000011", "000101"]) and (
                    adv_through_dict_0[index_i_adv_through_end + 1][1][2:8] in ["000111", "110000", "111011", "010111"] or
                    adv_through_dict_0[index_i_adv_through_end + 1][1][9:15] in ["000111", "110000", "111011", "010111"] or
                    adv_through_dict_0[index_i_adv_through_end + 1][1][16:22] in ["000111", "110000", "111011","010111"] or
                    adv_through_dict_0[index_i_adv_through_end + 1][1][23:29] in ["000111", "110000", "111011","010111"] or
                    adv_through_dict_0[index_i_adv_through_end + 1][1][30:36] in ["000111", "110000", "111011", "010111"]):
                adv_through_dict = adv_through_dict_0[0:index_i_adv_through_end + 2]
                index_content = adv_through_dict[-1]
                if adv_through_dict != []:
                    index_adv = mark_dict.index(index_content)
                    adv_through_dict.append(index_adv)
                    adv.append(adv_through_dict)
                    flag_empty_content += 1
            elif (i[0][3::] == "的") and (
                    adv_through_dict_0[index_i_adv_through_end + 1][1][2:8] in ["000111", "110000", "010111"] or
                    adv_through_dict_0[index_i_adv_through_end + 1][1][9:15] in ["000111", "110000", "010111"] or
                    adv_through_dict_0[index_i_adv_through_end + 1][1][16:22] in ["000111", "110000", "010111"] or
                    adv_through_dict_0[index_i_adv_through_end + 1][1][23:29] in ["000111", "110000", "010111"] or
                    adv_through_dict_0[index_i_adv_through_end + 1][1][30:36] in ["000111", "110000", "010111"]):
                adv_through_dict = adv_through_dict_0[0:index_i_adv_through_end + 2]
                index_content = adv_through_dict[-1]
                if adv_through_dict != []:
                    index_adv = mark_dict.index(index_content)
                    adv_through_dict.append(index_adv)
                    adv.append(adv_through_dict)
                    flag_empty_content += 1
    except Exception:
        pass

    try:
        if len(adv_through_dict) != 0:
            for i in adv_through_dict:
                for j in main_structure_dict_adv:
                    #if i[0][3::] == j[0][3:] and i != j and i[1][0] == j[1][0]:
                    if i == j:
                        main_structure_dict_adv.remove(j)
    except Exception:
        pass

    if len(adv_through_dict) != 0 and flag_empty_content == 0:
        adv_through_dict = []  # 如果没有，则清空

    if len(adv_through_dict) != 0 and len(adv_through_dict[0]) == 2:
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in adv_through_dict]
    elif len(adv_through_dict) != 0 and len(adv_through_dict[0]) != 2:
        adv_through_dict = [adv_through_dict]
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in adv_through_dict]

    if len(adv) == 0 and len(complement) == 0:
        main_structure_dict_adv = copy.deepcopy(mark_dict)

    flag_empty_content = 0

    #print("z17", adv_through_dict)
    #print("17", adv)
    #print("17", main_structure_dict_adv)

    # 18. 等到..做状语
    try:
        for i in main_structure_dict_adv:
            index_i_adv_until = main_structure_dict_adv.index(i)
            if (i[0][3::] in ["等到", "时逢", "正值", "正巧", "赶巧"]) and (index_i_adv_until == 0):
                adv_until_dict = main_structure_dict_adv[index_i_adv_until::]
                index_content = adv_until_dict[-1]
                if adv_until_dict != []:
                    index_adv = mark_dict.index(index_content)
                    adv_until_dict.append(index_adv)
                    adv.append(adv_until_dict)
                    flag_empty_content += 1
    except Exception:
        pass

    try:
        if len(adv_until_dict) != 0:
            for i in adv_until_dict:
                for j in main_structure_dict_adv:
                    #if i[0][3::] == j[0][3:] and i != j and i[1][0] == j[1][0]:
                    if i == j:
                        main_structure_dict_adv.remove(j)
    except Exception:
        pass

    if len(adv_until_dict) != 0 and flag_empty_content == 0:
        adv_until_dict = []  # 如果没有，则清空

    if len(adv_until_dict) != 0 and len(adv_until_dict[0]) == 2:
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in adv_until_dict]
    elif len(adv_until_dict) != 0 and len(adv_until_dict[0]) != 2:
        adv_until_dict = [adv_until_dict]
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in adv_until_dict]

    if len(adv) == 0 and len(complement) == 0:
        main_structure_dict_adv = copy.deepcopy(mark_dict)

    flag_empty_content = 0

    #print("z18", adv_until_dict)
    #print("18", adv)
    #print("18", main_structure_dict_adv)

    # 19. 简单副词状语/补语
    index_content = []
    index_adv = 0

    try:
        for i in main_structure_dict_adv:
            index_i_adv_simple = main_structure_dict_adv.index(i)
            if (i[1][2:8] in ["000110", "000101", "110101"] or i[1][9:15] in ["000110", "000101", "110101"] or i[1][16:22] in ["000110", "000101", "110101"] or i[1][
                                                                                              23:29] in ["000110", "000101", "110101"] or
                i[1][30:36] in ["000110", "000101", "110101"]) and (i[1][2:8] not in ["000111", "000100", "010111"] and i[1][9:15] not in ["000111", "000100", "010111"] and i[1][16:22] not in ["000111", "000100", "010111"] and i[1][
                                                                                              23:29] not in ["000111", "000100", "010111"] and
                i[1][30:36] not in ["000111", "000100", "010111"]) and (main_structure_dict_adv[index_i_adv_simple + 1][0][3::] in ["地", "的"]) and (
                    main_structure_dict_adv[index_i_adv_simple + 2][1][2:8] == "000001" or
                    main_structure_dict_adv[index_i_adv_simple + 2][1][9:15] == "000001" or
                    main_structure_dict_adv[index_i_adv_simple + 2][1][16:22] == "000001" or
                    main_structure_dict_adv[index_i_adv_simple + 2][1][23:29] == "000001" or
                    main_structure_dict_adv[index_i_adv_simple + 2][1][30:36] == "000001"):
                adv_simple_dict = main_structure_dict_adv[index_i_adv_simple:index_i_adv_simple + 2]
                index_content = adv_simple_dict[-1]
                if adv_simple_dict != []:
                    index_adv = mark_dict.index(index_content)
                    adv_simple_dict.append(index_adv)
                    adv.append(adv_simple_dict)
                    flag_empty_content += 1
                #print("1")
                if (main_structure_dict_adv[index_i_adv_simple - 1][1][2:8] == "000110" or
                    main_structure_dict_adv[index_i_adv_simple - 1][1][9:15] == "000110" or
                    main_structure_dict_adv[index_i_adv_simple - 1][1][16:22] == "000110" or
                    main_structure_dict_adv[index_i_adv_simple - 1][1][23:29] == "000110" or
                    main_structure_dict_adv[index_i_adv_simple - 1][1][30:36] == "000110"):
                    adv_simple_dict = main_structure_dict_adv[index_i_adv_simple-1:index_i_adv_simple + 2]
                    index_content = adv_simple_dict[-1]
                    if adv_simple_dict != []:
                        index_adv = mark_dict.index(index_content)
                        adv_simple_dict.append(index_adv)
                        adv.append(adv_simple_dict)
                        flag_empty_content += 1
            elif (i[1][2:8] in ["000110", "000101", "110101", "111011", "110000"] or i[1][9:15] in ["000110", "000101", "110101", "111011", "110000"] or i[1][16:22] in ["000110", "000101", "110101", "111011", "110000"] or i[1][
                                                                                                23:29] in ["000110", "000101", "110101", "111011", "110000"] or
                  i[1][30:36] in ["000110", "000101", "110101", "111011", "110000"]) and (i[0][3::] not in ["给", "使", "让", "受", "受到", "被", "遭到", "会", "想", "想要", "要", "敢于", "勇于", "做出", "拼命"]) and (i[1][2:8] not in ["000111", "000100", "010111"] and i[1][9:15] not in ["000111", "000100", "010111"] and i[1][16:22] not in ["000111", "000100", "010111"] and i[1][
                                                                                              23:29] not in ["000111", "000100", "010111"] and
                i[1][30:36] not in ["000111", "000100", "010111"]) and (main_structure_dict_adv[index_i_adv_simple + 1][1][2:8] == "000001" or
                         main_structure_dict_adv[index_i_adv_simple + 1][1][9:15] == "000001" or
                         main_structure_dict_adv[index_i_adv_simple + 1][1][16:22] == "000001" or
                         main_structure_dict_adv[index_i_adv_simple + 1][1][23:29] == "000001" or
                         main_structure_dict_adv[index_i_adv_simple + 1][1][30:36] == "000001"):
                adv_simple_dict = main_structure_dict_adv[index_i_adv_simple:index_i_adv_simple+1]
                index_content = adv_simple_dict[-1]
                if adv_simple_dict != []:
                    index_adv = mark_dict.index(index_content)
                    adv_simple_dict.append(index_adv)
                    adv.append(adv_simple_dict)
                    flag_empty_content += 1
                if (main_structure_dict_adv[index_i_adv_simple - 1][1][2:8] == "000110" or
                    main_structure_dict_adv[index_i_adv_simple - 1][1][9:15] == "000110" or
                    main_structure_dict_adv[index_i_adv_simple - 1][1][16:22] == "000110" or
                    main_structure_dict_adv[index_i_adv_simple - 1][1][23:29] == "000110" or
                    main_structure_dict_adv[index_i_adv_simple - 1][1][30:36] == "000110"):
                    adv_simple_dict = main_structure_dict_adv[index_i_adv_simple-1:index_i_adv_simple+1]
                    index_content = adv_simple_dict[-1]
                    if adv_simple_dict != []:
                        index_adv = mark_dict.index(index_content)
                        adv_simple_dict.append(index_adv)
                        adv.append(adv_simple_dict)
                        flag_empty_content += 1
            elif (i[1][2:8] in ["000110", "000101"] or i[1][9:15] in ["000110", "000101"] or i[1][16:22] in ["000110", "000101"] or i[1][23:29] in ["000110", "000101"] or
                  i[1][30:36] in ["000110", "000101"]) and (i[1][2:8] not in ["000111", "000100", "010111"] and i[1][9:15] not in ["000111", "000100", "010111"] and i[1][16:22] not in ["000111", "000100", "010111"] and i[1][
                                                                                              23:29] not in ["000111", "000100", "010111"] and
                i[1][30:36] not in ["000111", "000100", "010111"]) and (main_structure_dict_adv[index_i_adv_simple + 1][0][3::] in ["地", "的"]) and (
                    main_structure_dict_adv[index_i_adv_simple + 2][1][2:8] == "000001" or
                    main_structure_dict_adv[index_i_adv_simple + 2][1][9:15] == "000001" or
                    main_structure_dict_adv[index_i_adv_simple + 2][1][16:22] == "000001" or
                    main_structure_dict_adv[index_i_adv_simple + 2][1][23:29] == "000001" or
                    main_structure_dict_adv[index_i_adv_simple + 2][1][30:36] == "000001"):
                adv_simple_dict = main_structure_dict_adv[index_i_adv_simple:index_i_adv_simple + 2]
                index_content = adv_simple_dict[-1]
                if adv_simple_dict != []:
                    index_adv = mark_dict.index(index_content)
                    adv_simple_dict.append(index_adv)
                    adv.append(adv_simple_dict)
                    flag_empty_content += 1
                if (main_structure_dict_adv[index_i_adv_simple - 1][1][2:8] == "000110" or
                    main_structure_dict_adv[index_i_adv_simple - 1][1][9:15] == "000110" or
                    main_structure_dict_adv[index_i_adv_simple - 1][1][16:22] == "000110" or
                    main_structure_dict_adv[index_i_adv_simple - 1][1][23:29] == "000110" or
                    main_structure_dict_adv[index_i_adv_simple - 1][1][30:36] == "000110"):
                    adv_simple_dict = main_structure_dict_adv[index_i_adv_simple-1:index_i_adv_simple + 2]
                    index_content = adv_simple_dict[-1]
                    if adv_simple_dict != []:
                        index_adv = mark_dict.index(index_content)
                        adv_simple_dict.append(index_adv)
                        adv.append(adv_simple_dict)
                        flag_empty_content += 1
            elif (i[1][2:8] in ["110000", "111011"] or i[1][9:15] in ["110000", "111011"] or i[1][16:22] in ["110000", "111011"] or i[1][23:29] in ["110000", "111011"] or
                  i[1][30:36] in ["110000", "111011"]) and (i[1][2:8] not in ["000111", "000100", "010111"] and i[1][9:15] not in ["000111", "000100", "010111"] and i[1][16:22] not in ["000111", "000100", "010111"] and i[1][
                                                                                              23:29] not in ["000111", "000100", "010111"] and
                i[1][30:36] not in ["000111", "000100", "010111"]) and main_structure_dict_adv[index_i_adv_simple + 1][0][3::] not in ["中", "里", "里面", "内", "内部", "上", "上边"] and (
                    main_structure_dict_adv[index_i_adv_simple - 1][1][2:8] != "000111" and
                    main_structure_dict_adv[index_i_adv_simple - 1][1][9:15] != "000111" and
                    main_structure_dict_adv[index_i_adv_simple - 1][1][16:22] == "000111" and
                    main_structure_dict_adv[index_i_adv_simple - 1][1][23:29] == "000111" and
                    main_structure_dict_adv[index_i_adv_simple - 1][1][30:36] == "000111") and (
                    main_structure_dict_adv[index_i_adv_simple + 1][1][2:8] == "000001" or
                    main_structure_dict_adv[index_i_adv_simple + 1][1][9:15] == "000001" or
                    main_structure_dict_adv[index_i_adv_simple + 1][1][16:22] == "000001" or
                    main_structure_dict_adv[index_i_adv_simple + 1][1][23:29] == "000001" or
                    main_structure_dict_adv[index_i_adv_simple + 1][1][30:36] == "000001"):
                    #print("ok", main_structure_dict_adv[index_i_adv_simple])
                    adv_simple_dict = main_structure_dict_adv[index_i_adv_simple:index_i_adv_simple+1]
                    index_content = adv_simple_dict[-1]
                    #print("adv_simple_dict", adv_simple_dict)
                    if adv_simple_dict != []:
                        index_adv = mark_dict.index(index_content)
                        adv_simple_dict.append(index_adv)
                        adv.append(adv_simple_dict)
                        flag_empty_content += 1
                    if (main_structure_dict_adv[index_i_adv_simple - 1][1][2:8] == "000110" or
                            main_structure_dict_adv[index_i_adv_simple - 1][1][9:15] == "000110" or
                            main_structure_dict_adv[index_i_adv_simple - 1][1][16:22] == "000110" or
                            main_structure_dict_adv[index_i_adv_simple - 1][1][23:29] == "000110" or
                            main_structure_dict_adv[index_i_adv_simple - 1][1][30:36] == "000110"):
                        adv_simple_dict = main_structure_dict_adv[index_i_adv_simple - 1:index_i_adv_simple + 1]
                        index_content = adv_simple_dict[-1]
                        if adv_simple_dict != []:
                            index_adv = mark_dict.index(index_content)
                            adv_simple_dict.append(index_adv)
                            adv.append(adv_simple_dict)
                            flag_empty_content += 1
            elif (i[1][2:8] == "000110" or i[1][9:15] == "000110" or i[1][16:22] == "000110" or i[1][
                                                                                                23:29] == "000110" or
                  i[1][30:36] == "000110") and (i[1][2:8] not in ["000111", "000100", "010111"] and i[1][9:15] not in ["000111", "000100", "010111"] and i[1][16:22] not in ["000111", "000100", "010111"] and i[1][
                                                                                              23:29] not in ["000111", "000100", "010111"] and
                i[1][30:36] not in ["000111", "000100", "010111"]) and (main_structure_dict_adv[index_i_adv_simple + 1][1][2:8] == "000110" or
                      main_structure_dict_adv[index_i_adv_simple + 1][1][9:15] == "000110" or
                      main_structure_dict_adv[index_i_adv_simple + 1][1][16:22] == "000110" or
                      main_structure_dict_adv[index_i_adv_simple + 1][1][23:29] == "000110" or
                      main_structure_dict_adv[index_i_adv_simple + 1][1][30:36] == "000110") and (
                    main_structure_dict_adv[index_i_adv_simple + 2][1][2:8] in ["000001", "110101"] or
                    main_structure_dict_adv[index_i_adv_simple + 2][1][9:15] in ["000001", "110101"] or
                    main_structure_dict_adv[index_i_adv_simple + 2][1][16:22] in ["000001", "110101"]or
                    main_structure_dict_adv[index_i_adv_simple + 2][1][23:29] in ["000001", "110101"] or
                    main_structure_dict_adv[index_i_adv_simple + 2][1][30:36] in ["000001", "110101"]):
                #print("ok")
                adv_simple_dict = main_structure_dict_adv[index_i_adv_simple:index_i_adv_simple + 2]
                index_content = adv_simple_dict[-1]
                if adv_simple_dict != []:
                    index_adv = mark_dict.index(index_content)
                    adv_simple_dict.append(index_adv)
                    adv.append(adv_simple_dict)
                    flag_empty_content += 1
            elif (i[1][2:8] == "000110" or i[1][9:15] == "000110" or i[1][16:22] == "000110" or i[1][
                                                                                                23:29] == "000110" or
                  i[1][30:36] == "000110") and (i[1][2:8] not in ["000111", "000100", "010111"] and i[1][9:15] not in ["000111", "000100", "010111"] and i[1][16:22] not in ["000111", "000100", "010111"] and i[1][
                                                                                              23:29] not in ["000111", "000100", "010111"] and
                i[1][30:36] not in ["000111", "000100", "010111"]) and (main_structure_dict_adv[index_i_adv_simple - 1][1][2:8] in ["000001", "000101"] or
                      main_structure_dict_adv[index_i_adv_simple - 1][1][9:15] in ["000001", "000101"] or
                      main_structure_dict_adv[index_i_adv_simple - 1][1][16:22] in ["000001", "000101"] or
                      main_structure_dict_adv[index_i_adv_simple - 1][1][23:29] in ["000001", "000101"] or
                      main_structure_dict_adv[index_i_adv_simple - 1][1][30:36] in ["000001", "000101"]):
                complement_simple_dict = main_structure_dict_adv[index_i_adv_simple:index_i_adv_simple+1]
                index_content = complement_simple_dict[-1]
                if complement_simple_dict != []:
                    index_adv = mark_dict.index(index_content)
                    complement_simple_dict.append(index_adv)
                    complement.append(complement_simple_dict)
                    flag_empty_content += 1
    # 副词+“地”或副词无“地”，则副词+“地”或纯副词入补语
    except Exception:
        pass

    try:
        if len(adv_simple_dict) != 0:
            for i in adv_simple_dict:
                for j in main_structure_dict_adv:
                    if i == j:
                        main_structure_dict_adv.remove(j)
    except Exception:
        pass

    try:
        if len(complement_simple_dict) != 0:
            for i in complement_simple_dict:
                for j in main_structure_dict_adv:
                    if i == j:
                        main_structure_dict_adv.remove(j)
    except Exception:
        pass

    if len(adv_simple_dict) != 0 and flag_empty_content == 0:
        adv_simple_dict = []  # 如果没有，则清空
    if len(complement_simple_dict) != 0 and flag_empty_content == 0:
        complement_simple_dict = []  # 如果没有，则清空


    if len(adv_simple_dict) != 0 and len(adv_simple_dict[0]) == 2:
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in adv_simple_dict]
    elif len(adv_simple_dict) != 0 and len(adv_simple_dict[0]) != 2:
        adv_simple_dict = [adv_simple_dict]
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in adv_simple_dict]

    if len(complement_simple_dict) != 0 and len(complement_simple_dict[0]) == 2:
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in complement_simple_dict]
    elif len(complement_simple_dict) != 0 and len(complement_simple_dict[0]) != 2:
        complement_simple_dict = [complement_simple_dict]
        main_structure_dict_adv = [x for x in main_structure_dict_adv if x not in complement_simple_dict]

    if len(adv) == 0 and len(adv) == 0 and len(complement) == 0:
        main_structure_dict_adv = copy.deepcopy(mark_dict)

    flag_empty_content = 0

    #print("z19", adv_simple_dict)
    #print("adv19", adv)
    #print("com19", complement)
    #print("19", main_structure_dict_adv)

    #20. 如果定语包含状语，则清空状语
    index_adj = 0
    index_adv = 0
    index_check = 0
    index_i = 0
    remove_dict = []
    flag = ""

    adj_1 = copy.deepcopy(adj)
    adv_1 = copy.deepcopy(adv)

    try:
        for i in adj_1:
            if type(i[-1]) == int:
                adj.remove(i[-1])

        for i in adv_1:
            if type(i[-1]) == int:
                adv.remove(i[-1])
    except Exception:
        pass

    # (1) 如果定语和状语相等，且后面跟Proun+noun结构，则保留定语
    try:
        for i in adj_1:
            index_adj = adj_1.index(i)
            #print("i", i)
            for j in adv_1:
                index_adv = adv_1.index(j)
                #print("j", j)
                if (i == j) and (i not in remove_dict):
                    remove_dict = i

        #print("remove", remove_dict)

        for i in remove_dict:
            #index_i = remove_dict.index(i)
            for j in adj:
                if i == j[0]:
                    remove_dict.remove(i)
                    remove_dict.append(j)

        for i in remove_dict:
            for j in mark_dict_backup:
                index_check = mark_dict_backup.index(j)
                if (i[0] == j) and (mark_dict_backup[index_check + 1][1][2:8] == "000100" or
                        mark_dict_backup[index_check + 1][1][9:15] == "000100" or
                        mark_dict_backup[index_check + 1][1][16:22] == "000100" or
                        mark_dict_backup[index_check + 1][1][23:29] == "000100" or
                        mark_dict_backup[index_check + 1][1][30:36] == "000100") and (mark_dict_backup[index_check + 2][1][2:8] == "000111" or
                        mark_dict_backup[index_check + 2][1][9:15] == "000111" or
                        mark_dict_backup[index_check + 2][1][16:22] == "000111" or
                        mark_dict_backup[index_check + 2][1][23:29] == "000111" or
                        mark_dict_backup[index_check + 2][1][30:36] == "000111"):
                    flag = "adj"

        #print("flag", flag)

        if flag == "adj":
            for i in remove_dict:
                for j in adv:
                   if i[0] == j[0]:
                       adv.remove(j)
        elif flag == "":
            for i in remove_dict:
               for j in adj:
                   if i[0] == j[0]:
                       adj.remove(j)
    except Exception:
        pass

    #print("adj", adj)
    #print("adv", adv)

    # (2) 如果定语包含状语，则清空状语
    remove_dict = []

    for i in adj_1:
        for j in adv_1:
            for k in j:
                if (k in i) and (len(i) > len(j)) and (j not in remove_dict):
                    remove_dict.append(j)

    #print("remove_dict", remove_dict)

    for i in remove_dict:
       for j in adv:
           if i[0] == j[0]:
               adv.remove(j)

    #print("adj", adj)
    #print("adv", adv)

    #21. 如果状语包含定语的一部分，则清空定语
    index_adj = 0
    index_adv = 0
    remove_dict = []

    adj_1 = copy.deepcopy(adj)
    adv_1 = copy.deepcopy(adv)

    #print("adj1", adj)
    #print("adv1", adv)
    try:
        for i in adj_1:
            for k in i:
                for j in adv_1:
                    if (k in j) and (len(i) < len(j)) and (i not in remove_dict):
                        remove_dict.append(i)

        #print("remove", remove_dict)

        for i in remove_dict:
            for j in adj:
                if i[0] == j[0]:
                    adj.remove(j)
    except Exception:
        pass
    #adj = copy.deepcopy(adj_1)

    #print("adj2", adj)
    #print("adv2", adv)

    # 22. 去重
    adv_1 = []
    complement_1 = []
    try:
        for i in adv:
            if i not in adv_1:
                adv_1.append(i)

        for i in complement:
            if i not in complement_1:
                complement_1.append(i)
    except Exception:
        pass

    adv = copy.deepcopy(adv_1)
    complement = copy.deepcopy(complement_1)

    #print("adv3", adv)
    #print("complement", complement)

def Treat_backbone():
    global mark_dict
    global predicate_dict
    global subject_dict
    global subject_2_dict
    global object_dict
    global object_2_dict
    global predicate_2_dict
    global modal_verb_conclusion
    global modal_verb_dict
    global compare_verb_dict
    global conj_dict
    global two_verbs_dict
    global verb_j_dict
    global verb_j_conclusion
    global predicate_objectclause_dict
    global subject_objectclause_dict
    global object_objectclause_dict
    global predicate_in_objectclause_dict
    global subject_in_objectclause_dict
    global object_in_objectclause_dict
    global adv_there_be_dict
    global subjectclause_dict
    global objectclause_dict
    global subject_subjectclause_dict
    global predicate_subjectclause_dict
    global object_subjectclause_dict
    global subject_in_subjectclause_dict
    global predicate_in_subjectclause_dict
    global object_in_subjectclause_dict
    global subject_represent_dict
    global predicate_represent_dict
    global object_represent_dict
    global predicate_in_represent_dict
    global object_in_represent_dict
    global main_structure_dict_adv
    global main_structure_dict_adj
    global mark_dict
    global mark_dict_backup
    global main_structure_dict
    global main_structure_dict_backup

    global index_backbone_be
    global index_backbone_modal
    global index_backbone_modal_end
    global index_backbone_compare
    global index_backbone_two_verbs
    global index_backbone_two_verbs_end
    global index_backbone_verb_j
    global index_backbone_ver_j_end
    global index_backbone_objectclause
    global index_backbone_objectclause_end
    global index_backbone_two_subject
    global index_backbone_two_subject_end
    global index_backbone_there_be
    global index_backbone_there_be_end
    global index_v_simple
    global index_backbone_tp_subject
    global index_twoverbconnected
    global tp_adv_dict
    global tp_adv_dict_single
    global tp_adv_dict_ft
    global tp_adv_dict_ft_single
    global adv_sigh_dict
    global adv_as_dict
    global adv_middle_dict
    global adv_simple_dict
    global adv_with_sb_dict
    global adv_inorderto_dict
    global adv_there_be_dict
    global adv_through_dict
    global adv_until_dict
    global complement_degree_to_dict
    global complement_degree_de_dict
    global complement_adj_le_dict
    global complement_degree_dict
    global complement_specialuse_dict
    global complement_specialtreat_dict
    global adj_ap_n_de_dict
    global adj_should_dict
    global adj_v_dict
    global adj_np_v_dict
    global adj_number_dict
    global adj_tp_dict
    global adj_double_dict
    global adj_and_dict
    global adj_and_v_dict
    global adj_belong_dict
    global adj_de_single_dict
    global adj_connected_dict
    global adj_connected_complex_dict
    global adv_compare_dict
    global adj_n_1_dict
    global adj_between_dict
    global adj_prep_dict
    global adj_begin_dict
    global middle_adv_dict
    global adj_be_de_dict
    global adj_note_dict
    global adj_no_v_dict
    global adj
    global adv
    global complement

    index_i_conj = 0
    flag_empty_content = 0
    index_backbone_compare_0 = 0
    adv_compare_dict_0 = []
    main_structure_dict_a = []
    main_structure_dict_b = []
    main_structure_dict_c = []
    main_structure_dict_del_conj = []
    main_rest = []

    #print("mark_dict", mark_dict)

    main_structure_dict_a = copy.deepcopy(mark_dict)
    main_structure_dict_b = copy.deepcopy(mark_dict)
    main_structure_dict_c = copy.deepcopy(mark_dict)
    main_structure_dict = copy.deepcopy(mark_dict)

    adj_1 = copy.deepcopy(adj)
    adv_1 = copy.deepcopy(adv)
    complement_1 = copy.deepcopy(complement)

    try:
        for i in adj_1:
            if type(i[-1]) == int:
                i.remove(i[-1])

        for i in adv_1:
            if type(i[-1]) == int:
                i.remove(i[-1])

        for i in complement_1:
            if type(i[-1]) == int:
                i.remove(i[-1])
    except Exception:
        pass

    #print("adj_1", adj_1)
    #print("adv_1", adv_1)
    #print("main_b", main_structure_dict_b)
    try:
        for i in adj_1:
            for k in i:
                for j in main_structure_dict_a:
                    if k == j:
                        #print("ok")
                        main_structure_dict_a.remove(j)

        for i in adj_1:
            for k in i:
                # print("k", k)
                for j in main_structure_dict_a:
                    if k[0][3::] == j[0][3::]:
                        main_structure_dict_a.remove(j)

        for i in adv_1:
            for k in i:
                #print("k", k)
                for j in main_structure_dict_b:
                    #print("j", j)
                    if k == j:
                        #print("1k,j", k, j)
                        main_structure_dict_b.remove(j)

        for i in adv_1:
            for k in i:
                # print("k", k)
                for j in main_structure_dict_b:
                    if k[0][3::] == j[0][3::]:
                        main_structure_dict_b.remove(j)
                        #print("2k,j", k, j)

        for i in complement_1:
            for k in i:
                for j in main_structure_dict_c:
                    #print("j", j)
                    if k == j:
                        main_structure_dict_c.remove(j)

        for i in complement_1:
            for k in i:
                # print("k", k)
                for j in main_structure_dict_c:
                    if k[0][3::] == j[0][3::]:
                        main_structure_dict_c.remove(j)
    except Exception:
        pass

    #print("main_structure_dict_a", main_structure_dict_a)
    #print("main_structure_dict_b", main_structure_dict_b)

    main_structure_dict = [x for x in main_structure_dict_a if (x in main_structure_dict_b and x in main_structure_dict_c)]
    main_structure_dict_del_conj = copy.deepcopy(main_structure_dict)

    #print("main_structure_dict", main_structure_dict)

    # 1.处理句末标点
    try:
        for i in main_structure_dict:
            if i[0][3::] in dot_dict:
                main_structure_dict.remove(i)
    except Exception:
        pass

    #print("main_structure_dict", main_structure_dict)
    main_structure_dict_backup = copy.deepcopy(main_structure_dict)

    # 2.处理连词
    try:
        for i in main_structure_dict:
            index_i_conj = main_structure_dict.index(i)
            if (i[1][2:8] == "010101") and (i[0][3::] not in ["和", "并", "并且", "且", "及", "以及", "与", "跟"]):
                conj_dict.append(i)
                conj_dict.append(index_i_conj)
    except Exception:
        pass

    try:
        if len(conj_dict) != 0:
            for i in conj_dict:
                for j in main_structure_dict:
                    if i[0][3::] == j[0][3::] and i != j and i[1][0] == j[1][0]:
                        main_structure_dict.remove(j)
    except Exception:
        pass

    main_structure_dict = [x for x in main_structure_dict if x not in conj_dict]
    main_structure_dict_del_conj = copy.deepcopy(main_structure_dict)

    flag_empty_content = 0

    #print("conj_dict", conj_dict)
    #print("Backbone2", main_structure_dict)

    #3. 主语从句
    subjectclause_dict_p = []
    index_subject_subjectclause_content = []
    index_predicate_subjectclause_content = []
    index_object_subjectclause_content = []
    index_subject_in_subjectclause_content = []
    index_object_in_subjectclause_content = []
    index_subject_subjectclause = 0
    index_predicate_subjectclause = 0
    index_object_subjectclause = 0
    index_subject_in_subjectclause = 0
    index_predicate_in_subjectclause = 0
    index_object_in_subjectclause = 0
    try:
        for i in main_structure_dict:
            index_backbone_subjectclause = main_structure_dict.index(i)
            if (i[0][3::] in ["这事","这", "那事", "那"]) and (
                    main_structure_dict[index_backbone_subjectclause + 1][1][2:8] in ["000001", "000101"] or
                    main_structure_dict[index_backbone_subjectclause + 1][1][9:15] in ["000001", "000101"] or
                    main_structure_dict[index_backbone_subjectclause + 1][1][16:22] in ["000001", "000101"] or
                    main_structure_dict[index_backbone_subjectclause + 1][1][23:29] in ["000001", "000101"] or
                    main_structure_dict[index_backbone_subjectclause + 1][1][30:36] in ["000001", "000101"]):
                index_backbone_subjectclause = main_structure_dict.index(i)
                subjectclause_dict_p = main_structure_dict[0:index_backbone_subjectclause]
                subject_subjectclause_dict = main_structure_dict[index_backbone_subjectclause:index_backbone_subjectclause+1]
                index_subject_subjectclause_content = subject_subjectclause_dict[0]
                index_subject_subjectclause = mark_dict_backup.index(index_subject_subjectclause_content)
                subject_subjectclause_dict.append(index_subject_subjectclause)
                predicate_subjectclause_dict = main_structure_dict[index_backbone_subjectclause + 1:index_backbone_subjectclause + 2]
                index_predicate_subjectclause_content = predicate_subjectclause_dict[0]
                index_predicate_subjectclause = mark_dict_backup.index(index_predicate_subjectclause_content)
                predicate_subjectclause_dict.append(index_predicate)
                object_subjectclause_dict = main_structure_dict[index_backbone_subjectclause + 2:index_backbone_subjectclause + 3]
                content = subject_subjectclause_dict[0]
                index_subject_subjectclause = mark_dict_backup.index(index_subject_subjectclause_content)
                subject_subjectclause_dict.append(index_subject_subjectclause)
            elif (i[0][3::] in ["这件","那件"]) and (main_structure_dict[index_backbone_subjectclause + 1][0][3::] == "事"):
                for j in main_structure_dict:
                    if i[0][3::] == j[0][3::] and i != j and i[1][0] == j[1][0]:
                        main_structure_dict.remove(j)
                index_backbone_subjectclause = main_structure_dict.index(i)
                subjectclause_dict_p = main_structure_dict[0:index_backbone_subjectclause]
                subject_subjectclause_dict = main_structure_dict[index_backbone_subjectclause:index_backbone_subjectclause + 2]
                index_subject_subjectclause_content = subject_subjectclause_dict[0]
                index_subject_subjectclause = mark_dict_backup.index(index_subject_subjectclause_content)
                subject_subjectclause_dict.append(index_subject_subjectclause)
                predicate_subjectclause_dict = main_structure_dict[index_backbone_subjectclause + 2:index_backbone_subjectclause + 3]
                index_predicate_subjectclause_content = predicate_subjectclause_dict[0]
                index_predicate = main_structure_dict_del_conj.index(index_predicate_subjectclause_content)
                predicate_subjectclause_dict.append(index_predicate)
                object_subjectclause_dict = main_structure_dict[index_backbone_subjectclause + 3:index_backbone_subjectclause + 4]
                index_object_subjectclause_content = object_subjectclause_dict[0]
                index_object_subjectclause = mark_dict_backup.index(index_object_subjectclause_content)
                object_subjectclause_dict.append(index_object_subjectclause)
    except Exception:
        pass

    try:
        for i in subjectclause_dict_p:
            index_backbone_subjectclause_end = subjectclause_dict_p.index(i)
            if (i[1][2:8] == "000001" or i[1][9:15] == "000001" or i[1][16:22] == "000001" or i[1][23:29] == "000001" or i[1][30:36] == "000001") and (
                    subjectclause_dict_p[index_backbone_subjectclause_end - 1][1][2:8] in ["000001", "000100"] or
                    subjectclause_dict_p[index_backbone_subjectclause_end - 1][1][9:15] in ["000001", "000100"] or
                    subjectclause_dict_p[index_backbone_subjectclause_end - 1][1][16:22] in ["000001", "000100"] or
                    subjectclause_dict_p[index_backbone_subjectclause_end - 1][1][23:29] in ["000001", "000100"] or
                    subjectclause_dict_p[index_backbone_subjectclause_end - 1][1][30:36] in ["000001", "000100"]):
                subject_in_subjectclause_dict = subjectclause_dict_p[0:index_backbone_subjectclause_end]
                index_subject_in_subjectclause_content = subject_in_subjectclause_dict[0]
                index_subject_in_subjectclause = mark_dict_backup.index(index_subject_in_subjectclause_content)
                subject_in_subjectclause_dict.append(index_subject_in_subjectclause)
                predicate_in_subjectclause_dict = subjectclause_dict_p[index_backbone_subjectclause_end:index_backbone_subjectclause_end+1]
                index_predicate_in_subjectclause_content = predicate_in_subjectclause_dict[0]
                index_predicate_in_subjectclause = mark_dict_backup.index(index_predicate_in_subjectclause_content)
                predicate_in_subjectclause_dict.append(index_predicate_in_subjectclause)
                object_in_subjectclause_dict = subjectclause_dict_p[index_backbone_subjectclause_end + 1::]
                index_object_in_subjectclause_content = object_in_subjectclause_dict[0]
                index_object_in_subjectclause = mark_dict_backup.index(index_object_in_subjectclause_content)
                object_in_subjectclause_dict.append(index_object_in_subjectclause)
    except Exception:
        pass

    try:
        if len(subject_subjectclause_dict) == 2 and len(subject_subjectclause_dict[1]) == 36:
            subject_subjectclause_dict = [subject_subjectclause_dict]

        if len(predicate_subjectclause_dict) == 2 and len(predicate_subjectclause_dict[1]) == 36:
            predicate_subjectclause_dict = [predicate_subjectclause_dict]

        if len(object_subjectclause_dict) == 2 and len(object_subjectclause_dict[1]) == 36:
            object_subjectclause_dict = [object_subjectclause_dict]

        if len(subject_in_subjectclause_dict) == 2 and len(subject_in_subjectclause_dict[1]) == 36:
            subject_in_subjectclause_dict = [subject_in_subjectclause_dict]

        if len(predicate_in_subjectclause_dict) == 2 and len(predicate_in_subjectclause_dict[1]) == 36:
            predicate_in_subjectclause_dict = [predicate_in_subjectclause_dict]

        if len(object_in_subjectclause_dict) == 2 and len(object_in_subjectclause_dict[1]) == 36:
            object_in_subjectclause_dict = [object_in_subjectclause_dict]

    except Exception:
        pass

    try:
        main_structure_dict = [x for x in main_structure_dict if x not in subject_subjectclause_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in predicate_subjectclause_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in object_subjectclause_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in subject_in_subjectclause_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in predicate_in_subjectclause_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in object_in_subjectclause_dict]
    except Exception:
        pass

    #print("subjectclause_dict", subjectclause_dict)
    #print("subject_subjectclause_dict", subject_subjectclause_dict)
    #print("predicate_subjectclause_dict", predicate_subjectclause_dict)
    #print("object_subjectclause_dict", object_subjectclause_dict)
    #print("subject_in_subjectclause_dict", subject_in_subjectclause_dict)
    #print("predicate_in_subjectclause_dict", predicate_in_subjectclause_dict)
    #print("object_in_subjectclause_dict", object_in_subjectclause_dict)

    try:
        if (len(subject_subjectclause_dict) == 0 or len(predicate_subjectclause_dict) == 0 or len(object_subjectclause_dict) == 0 or len(subject_in_subjectclause_dict) == 0 or len(predicate_in_subjectclause_dict) == 0 or len(object_in_subjectclause_dict) == 0) and (main_structure_dict != main_structure_dict_del_conj):
            main_structure_dict = copy.deepcopy(main_structure_dict_del_conj)
            subject_subjectclause_dict = []
            predicate_subjectclause_dict = []
            object_subjectclause_dict = []
            subject_in_subjectclause_dict = []
            predicate_in_subjectclause_dict = []
            object_in_subjectclause_dict = []
            for i in main_structure_dict:
                if i[0][3::] in dot_dict:
                    main_structure_dict.remove(i)

        main_rest = copy.deepcopy(main_structure_dict)

        if len(subject_subjectclause_dict) != 0 and len(predicate_subjectclause_dict) != 0 and len(
                subject_in_subjectclause_dict) != 0 and len(predicate_in_subjectclause_dict) != 0:
            return "s_sc", subject_subjectclause_dict, "p_sc", predicate_subjectclause_dict, "o_sc", object_subjectclause_dict, "s_in_sc", subject_in_subjectclause_dict, "p_in_sc", predicate_in_subjectclause_dict, "o_in_sc", object_in_subjectclause_dict, "adj", adj, "adv", adv, "complement", complement, "conj", conj_dict, "main_rest", main_rest

    except Exception:
        pass

    #print("Backbone3", main_structure_dict)

    # 3.5 处理"把、将"主谓结构
    index_subject_content = []
    index_object_content = []
    index_object_2_content = []
    index_subject = 0
    index_object = 0
    index_verb_j = 0
    index_object_2 = 0
    index_backbone_verb_j = 0
    index_backbone_verb_j_end = 0
    index_verb_j_content = ""

    try:
        for i in main_structure_dict:
            index_backbone_verb_j = main_structure_dict.index(i)
            index_verb_j_main = main_structure_dict.index(i)
            if (i[0][3::] in ["把", "将", "势必", "势必将", "试", "试着", "尝试", "坚持", "受到", "受", "遭到", "遭遇", "遇到", "被", "由", "有",
                              "不及", "不如", "比不上", "允许", "准许", "批准", "通过", "须", "需", "需要", "必须"]):
                verb_j_dict = main_structure_dict[index_backbone_verb_j:index_backbone_verb_j + 1]
                index_j_content = verb_j_dict[0]
                index_j = mark_dict_backup.index(index_j_content)
                verb_j_dict.append(index_j)
                verb_j_conclusion = main_structure_dict[index_backbone_verb_j + 1::]
                if (main_structure_dict[index_backbone_verb_j - 1][1][2:8] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_backbone_verb_j - 1][1][9:15] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_backbone_verb_j - 1][1][16:22] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_backbone_verb_j - 1][1][23:29] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_backbone_verb_j - 1][1][30:36] in ["000111", "000100",
                                                                                 "010111"]) and index_backbone_verb_j - 1 == 0:
                    subject_dict = main_structure_dict[index_backbone_verb_j - 1:index_backbone_verb_j]
                    index_subject_content = subject_dict[0]
                    index_subject = mark_dict_backup.index(index_subject_content)
                    subject_dict.append(index_subject)
                    break
    except Exception:
        pass  # 确定情态动词以后覆盖的部分

    #print("verb_j_conclusion", verb_j_conclusion)

    try:
        for i in verb_j_conclusion:
            index_backbone_verb_j_end = verb_j_conclusion.index(i)
            index_verb_j_end_main = main_structure_dict.index(i)
            if i[1][2:8] == "000001" or i[1][9:15] == "000001" or i[1][16:22] == "000001" or \
                    i[1][23:29] == "000001" or i[1][30:36] == "000001":
                predicate_dict = verb_j_conclusion[index_backbone_verb_j_end:index_backbone_verb_j_end + 1]
                index_predicate_content = predicate_dict[0]
                index_predicate = mark_dict_backup.index(index_predicate_content)
                predicate_dict.append(index_predicate)
                if index_verb_j_main + 1 == index_verb_j_end_main:
                    object_dict = verb_j_conclusion[index_backbone_verb_j_end + 1::]
                    index_object_content = object_dict[0]
                    index_object = mark_dict_backup.index(index_object_content)
                    object_dict.append(index_object)
                elif index_verb_j_main + 1 < index_verb_j_end_main:
                    object_dict = main_structure_dict[index_backbone_verb_j + 1:index_backbone_verb_j_end - 1]
                    index_object_content = object_dict[0]
                    index_object = mark_dict_backup.index(index_object_content)
                    object_dict.append(index_object)
                    object_2_dict = main_structure_dict[index_backbone_verb_j_end + 1::]
                    index_object_2_content = object_2_dict[0]
                    index_object_2 = mark_dict_backup.index(index_object_2_content)
                    object_2_dict.append(index_object_2)
                break

    except Exception:
        pass

    try:

        if len(subject_dict) == 2 and len(subject_dict[1]) == 36:
            subject_dict = [subject_dict]

        if len(verb_j_dict) == 2 and len(verb_j_dict[1]) == 36:
            verb_j_dict = [verb_j_dict]

        if len(predicate_dict) == 2 and len(predicate_dict[1]) == 36:
            predicate_dict = [predicate_dict]

        if len(object_dict) == 2 and len(object_dict[1]) == 36:
            object_dict = [object_dict]

        if len(object_2_dict) == 2 and len(object_2_dict[1]) == 36:
            object_2_dict = [object_2_dict]

    except Exception:
        pass

    try:
        main_structure_dict = [x for x in main_structure_dict if x not in subject_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in verb_j_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in predicate_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in object_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in object_2_dict]
    except Exception:
        pass

    # print("s", subject_dict)
    # print("v_j", verb_j_dict)
    # print("p", predicate_dict)
    # print("o", object_dict)
    # print("o_2", object_2_dict)

    try:
        if (len(subject_dict) == 0 or len(verb_j_dict) == 0 or len(
                predicate_dict) == 0) and main_structure_dict != main_structure_dict_del_conj:
            main_structure_dict = copy.deepcopy(main_structure_dict_del_conj)
            subject_dict = []
            verb_j_dict = []
            predicate_dict = []
            object_dict = []
            object_2_dict = []
            for i in main_structure_dict:
                if i[0][3::] in dot_dict:
                    main_structure_dict.remove(i)

        main_rest = copy.deepcopy(main_structure_dict)

        if len(subject_dict) != 0 and len(verb_j_dict) != 0 and len(predicate_dict) != 0:
            return "s", subject_dict, "v_j", verb_j_dict, "p", predicate_dict, "o", object_dict, "o_2", object_2_dict, "adj", adj, "adv", adv, "complement", complement, "conj", conj_dict, "main_rest", main_rest

    except Exception:
        pass

    #print("Backbone3.5", main_structure_dict)

    # 4 处理“自认也是”的双动词结构(中间缺省主语的宾语从句）
    try:
        for i in main_structure_dict:
            index_twoverbconnected = main_structure_dict.index(i)
            if (i[1][2:8] in ["000001", "101000"] or i[1][9:15] in ["000001", "101000"] or i[1][16:22] in ["000001",
                                                                                                           "101000"] or
                i[1][23:29] in ["000001", "101000"] or i[1][30:36] in ["000001", "101000"]) and (
                    main_structure_dict[index_twoverbconnected + 1][1][2:8] == "000001" or
                    main_structure_dict[index_twoverbconnected + 1][1][9:15] == "000001" or
                    main_structure_dict[index_twoverbconnected + 1][1][16:22] == "000001" or
                    main_structure_dict[index_twoverbconnected + 1][1][23:29] == "000001" or
                    main_structure_dict[index_twoverbconnected + 1][1][30:36] == "000001") and (main_structure_dict[index_twoverbconnected + 1][1][2:8] not in ["000111", "000100", "010111"] and
                    main_structure_dict[index_twoverbconnected + 1][1][9:15] not in ["000111", "000100", "010111"] and
                    main_structure_dict[index_twoverbconnected + 1][1][16:22] not in ["000111", "000100", "010111"] and
                    main_structure_dict[index_twoverbconnected + 1][1][23:29] not in ["000111", "000100", "010111"] and
                    main_structure_dict[index_twoverbconnected + 1][1][30:36] not in ["000111", "000100", "010111"]) and main_structure_dict[index_twoverbconnected + 1][0][3::] not in ["代表", "代替", "替"]:
                predicate_objectclause_dict = main_structure_dict[index_twoverbconnected:index_twoverbconnected + 1]
                index_predicate_content = predicate_objectclause_dict[0]
                index_predicate = mark_dict_backup.index(index_predicate_content)
                predicate_objectclause_dict.append(index_predicate)
                predicate_in_objectclause_dict = main_structure_dict[
                                                 index_twoverbconnected + 1:index_twoverbconnected + 2]
                index_predicate_content = predicate_in_objectclause_dict[0]
                index_predicate = mark_dict_backup.index(index_predicate_content)
                predicate_in_objectclause_dict.append(index_predicate)
                object_in_objectclause_dict = main_structure_dict[index_twoverbconnected + 2::]
                index_object_content = object_in_objectclause_dict[0]
                index_object = mark_dict_backup.index(index_object_content)
                object_in_objectclause_dict.append(index_object)
                subject_objectclause_dict = main_structure_dict[0:index_twoverbconnected]
                index_subject_content = subject_objectclause_dict[0]
                index_subject = mark_dict_backup.index(index_subject_content)
                subject_objectclause_dict.append(index_subject)
                #print("1ok")
            elif (i[1][2:8] in ["000001", "101000"] or i[1][9:15] in ["000001", "101000"] or i[1][16:22] in ["000001",
                                                                                                             "101000"] or
                  i[1][23:29] in ["000001", "101000"] or i[1][30:36] in ["000001", "101000"]) and (
                    main_structure_dict[index_twoverbconnected + 1][1][2:8] in ["110101", "000110", "111110"] or
                    main_structure_dict[index_twoverbconnected + 1][1][9:15] in ["110101", "000110", "111110"] or
                    main_structure_dict[index_twoverbconnected + 1][1][16:22] in ["110101", "000110", "111110"] or
                    main_structure_dict[index_twoverbconnected + 1][1][23:29] in ["110101", "000110", "111110"] or
                    main_structure_dict[index_twoverbconnected + 1][1][30:36] in ["110101", "000110", "111110"]) and (
                    main_structure_dict[index_twoverbconnected + 2][1][2:8] == "000001" or
                    main_structure_dict[index_twoverbconnected + 2][1][9:15] == "000001" or
                    main_structure_dict[index_twoverbconnected + 2][1][16:22] == "000001" or
                    main_structure_dict[index_twoverbconnected + 2][1][23:29] == "000001" or
                    main_structure_dict[index_twoverbconnected + 2][1][30:36] == "000001") and main_structure_dict[index_twoverbconnected + 2][0][3::] not in ["代表", "代替", "替"]:
                predicate_objectclause_dict = main_structure_dict[index_twoverbconnected:index_twoverbconnected + 1]
                index_predicate_content = predicate_dict[0]
                index_predicate = mark_dict_backup.index(index_predicate_content)
                predicate_objectclause_dict.append(index_predicate)
                predicate_in_objectclause_dict = main_structure_dict[
                                                 index_twoverbconnected + 1:index_twoverbconnected + 2]
                index_predicate_content = predicate_in_objectclause_dict[0]
                index_predicate = mark_dict_backup.index(index_predicate_content)
                predicate_in_objectclause_dict.append(index_predicate)
                object_in_objectclause_dict = main_structure_dict[index_twoverbconnected + 2::]
                index_object_content = object_in_objectclause_dict[0]
                index_object = mark_dict_backup.index(index_object_content)
                object_in_objectclause_dict.append(index_object)
                subject_objectclause_dict = main_structure_dict[0:index_twoverbconnected]
                index_subject_content = subject_objectclause_dict[0]
                index_subject = mark_dict_backup.index(index_subject_content)
                subject_objectclause_dict.append(index_subject)
                #print("2ok")
    except Exception:
        pass

    try:
        if len(subject_objectclause_dict) == 2 and len(subject_objectclause_dict[1]) == 36:
            subject_objectclause_dict = [subject_objectclause_dict]

        if len(predicate_objectclause_dict) == 2 and len(predicate_objectclause_dict[1]) == 36:
            predicate_objectclause_dict = [predicate_objectclause_dict]

        if len(predicate_in_objectclause_dict) == 2 and len(predicate_dict[1]) == 36:
            predicate_in_objectclause_dict = [predicate_in_objectclause_dict]

        if len(object_in_objectclause_dict) == 2 and len(object_dict[1]) == 36:
            object_in_objectclause_dict = [object_in_objectclause_dict]

    except Exception:
        pass

    try:
        main_structure_dict = [x for x in main_structure_dict if x not in subject_objectclause_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in predicate_objectclause_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in predicate_in_objectclause_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in object_in_objectclause_dict]

    except Exception:
        pass

    # print("s_oc", subject_objectclause_dict)
    # print("p_oc", predicate_objectclause_dict)
    # print("p_in_o", predicate_in_objectclause_dict)
    # print("o_in_o", object_in_objectclause_dict)

    try:
        if (len(subject_objectclause_dict) == 0 or len(predicate_objectclause_dict) == 0 or len(
                predicate_in_objectclause_dict) == 0 or len(
                object_in_objectclause_dict) == 0) and main_structure_dict != main_structure_dict_del_conj:
            main_structure_dict = copy.deepcopy(main_structure_dict_del_conj)
            subject_objectclause_dict = []
            predicate_objectclause_dict = []
            predicate_in_objectclause_dict = []
            object_in_objectclause_dict = []
            for i in main_structure_dict:
                if i[0][3::] in dot_dict:
                    main_structure_dict.remove(i)

        main_rest = copy.deepcopy(main_structure_dict)

        if len(subject_objectclause_dict) != 0 and len(predicate_objectclause_dict) != 0 and len(
                predicate_in_objectclause_dict) != 0 and len(object_in_objectclause_dict) != 0:
            return "s_oc", subject_objectclause_dict, "p_oc", predicate_objectclause_dict, "p_in_oc", predicate_in_objectclause_dict, "o_in_oc", object_in_objectclause_dict, "adj", adj, "adv", adv, "complement", complement, "conj", conj_dict, "main_rest", main_rest

    except Exception:
        pass

    #print("Backbone4", main_structure_dict)

    #5.处理宾语从句结构
    index_subject_objectclause_content = []
    index_object_objectclause_content = []
    index_subject_in_objectclause_content = []
    index_object_in_objectclause_content = []
    index_subject_objectclause = 0
    index_predicate_objectclause = 0
    index_object_objectclause = 0
    index_subject_in_objectclause = 0
    index_predicate_in_objectclause = 0
    index_object_in_objectclause = 0
    try:
        for i in main_structure_dict:
            index_backbone_objectclause = main_structure_dict.index(i)
            if (i[1][2:8] == "000001") and (
                    i[1][9:15] == "101000" or i[1][16:22] == "101000" or i[1][23:29] == "101000" or i[1][
                                                                                                    30:36] == "101000"):
                if (main_structure_dict[index_backbone_objectclause + 1][1][2:8] == "110101" or
                        main_structure_dict[index_backbone_objectclause + 1][1][9:15] == "110101" or
                        main_structure_dict[index_backbone_objectclause + 1][1][16:22] == "110101" or
                        main_structure_dict[index_backbone_objectclause + 1][1][23:29] == "110101" or
                        main_structure_dict[index_backbone_objectclause + 1][1][30:36] == "110101"):
                    predicate_objectclause_dict = main_structure_dict[
                                                  index_backbone_objectclause:index_backbone_objectclause + 2]
                    index_predicate_objectclause_content = predicate_objectclause_dict[0]
                    index_predicate_objectclause = mark_dict_backup.index(index_predicate_objectclause_content)
                    predicate_objectclause_dict.append(index_predicate_objectclause)
                    objectclause_dict = main_structure_dict[index_backbone_objectclause + 2::]
                    if (main_structure_dict[index_backbone_objectclause - 1][1][2:8] in ["000111", "000100",
                                                                                         "010111"] or
                            main_structure_dict[index_backbone_objectclause - 1][1][9:15] in ["000111", "000100",
                                                                                              "010111"] or
                            main_structure_dict[index_backbone_objectclause - 1][1][16:22] in ["000111", "000100",
                                                                                               "010111"] or
                            main_structure_dict[index_backbone_objectclause - 1][1][23:29] in ["000111", "000100",
                                                                                               "010111"] or
                            main_structure_dict[index_backbone_objectclause - 1][1][30:36] in ["000111", "000100",
                                                                                               "010111"]):
                        subject_objectclause_dict = main_structure_dict[
                                                    index_backbone_objectclause - 1:index_backbone_objectclause]
                        index_subject_objectclause_content = subject_objectclause_dict[0]
                        index_subject_objectclause = mark_dict_backup.index(index_subject_objectclause_content)
                        subject_objectclause_dict.append(index_subject_objectclause)
                elif (main_structure_dict[index_backbone_objectclause + 1][1][2:8] != "110101" and
                      main_structure_dict[index_backbone_objectclause + 1][1][9:15] != "110101" and
                      main_structure_dict[index_backbone_objectclause + 1][1][16:22] != "110101" and
                      main_structure_dict[index_backbone_objectclause + 1][1][23:29] != "110101" and
                      main_structure_dict[index_backbone_objectclause + 1][1][30:36] != "110101"):
                    #print("2")
                    predicate_objectclause_dict = main_structure_dict[
                                                  index_backbone_objectclause:index_backbone_objectclause + 1]
                    index_predicate_objectclause_content = predicate_objectclause_dict[0]
                    index_predicate_objectclause = mark_dict_backup.index(index_predicate_objectclause_content)
                    predicate_objectclause_dict.append(index_predicate_objectclause)
                    objectclause_dict = main_structure_dict[index_backbone_objectclause + 1::]
                    if (main_structure_dict[index_backbone_objectclause - 1][1][2:8] in ["000111", "000100",
                                                                                         "010111"] or
                            main_structure_dict[index_backbone_objectclause - 1][1][9:15] in ["000111", "000100",
                                                                                              "010111"] or
                            main_structure_dict[index_backbone_objectclause - 1][1][16:22] in ["000111", "000100",
                                                                                               "010111"] or
                            main_structure_dict[index_backbone_objectclause - 1][1][23:29] in ["000111", "000100",
                                                                                               "010111"] or
                            main_structure_dict[index_backbone_objectclause - 1][1][30:36] in ["000111", "000100",
                                                                                               "010111"]):
                        subject_objectclause_dict = main_structure_dict[
                                                    index_backbone_objectclause - 1:index_backbone_objectclause]
                        index_subject_objectclause_content = subject_objectclause_dict[0]
                        index_subject_objectclause = mark_dict_backup.index(index_subject_objectclause_content)
                        subject_objectclause_dict.append(index_subject_objectclause)
                        #print("s", subject_objectclause_dict)
                        #print("p", predicate_objectclause_dict)
    except Exception:
        pass  # 确定动词以后覆盖的部分

    try:
        for i in objectclause_dict:
            index_backbone_objectclause_end = objectclause_dict.index(i)
            if i[1][2:8] == "000001" or i[1][9:15] == "000001" or i[1][16:22] == "000001" or \
                    i[1][23:29] == "000001" or i[1][30:36] == "000001":
                predicate_in_objectclause_dict = objectclause_dict[
                                                 index_backbone_objectclause_end:index_backbone_objectclause_end + 1]
                index_predicate_in_objectclause_content = predicate_in_objectclause_dict[0]
                index_predicate_in_objectclause = mark_dict_backup.index(index_predicate_in_objectclause_content)
                predicate_in_objectclause_dict.append(index_predicate_in_objectclause)
                #print("1ok")
                if objectclause_dict[index_backbone_objectclause_end - 1][0][3::] in ["把", "将", "势必","势必将", "试","试着", "尝试", "坚持", "受到","受", "遭到", "遭遇", "遇到", "被", "由", "有", "不及", "不如", "比不上", "允许", "准许", "批准", "通过", "须", "需", "需要", "必须"]:
                    #print("2ok")
                    predicate_in_objectclause_dict = objectclause_dict[
                                                     index_backbone_objectclause_end-1:index_backbone_objectclause_end + 1]
                    index_predicate_in_objectclause_content = predicate_in_objectclause_dict[0]
                    index_predicate_in_objectclause = mark_dict_backup.index(index_predicate_in_objectclause_content)
                    predicate_in_objectclause_dict.append(index_predicate_in_objectclause)
                    subject_in_objectclause_dict = objectclause_dict[0:index_backbone_objectclause_end - 1]
                    index_subject_in_objectclause_content = subject_in_objectclause_dict[0]
                    index_subject_in_objectclause = mark_dict_backup.index(index_subject_in_objectclause_content)
                    subject_in_objectclause_dict.append(index_subject_in_objectclause)
                    #print("3ok", objectclause_dict[0:index_backbone_objectclause_end - 1])
                    object_in_objectclause_dict = objectclause_dict[index_backbone_objectclause_end + 1::]
                    index_object_in_objectclause_content = object_in_objectclause_dict[0]
                    index_object_in_objectclause = mark_dict_backup.index(index_object_in_objectclause_content)
                    object_in_objectclause_dict.append(index_object_in_objectclause)
                elif objectclause_dict[0] != objectclause_dict[index_backbone_objectclause_end - 1]:
                    subject_in_objectclause_dict = objectclause_dict[0:index_backbone_objectclause_end - 1]
                    index_subject_in_objectclause_content = subject_in_objectclause_dict[0]
                    index_subject_in_objectclause = mark_dict_backup.index(index_subject_in_objectclause_content)
                    subject_in_objectclause_dict.append(index_subject_in_objectclause)
                    object_in_objectclause_dict = objectclause_dict[index_backbone_objectclause_end + 1::]
                    index_object_in_objectclause_content = object_in_objectclause_dict[0]
                    index_object_in_objectclause = mark_dict_backup.index(index_object_in_objectclause_content)
                    object_in_objectclause_dict.append(index_object_in_objectclause)
                elif objectclause_dict[0] == objectclause_dict[index_backbone_objectclause_end - 1]:
                    subject_in_objectclause_dict = objectclause_dict[0]
                    index_subject_in_objectclause_content = subject_in_objectclause_dict[0]
                    index_subject_in_objectclause = mark_dict_backup.index(index_subject_in_objectclause_content)
                    subject_in_objectclause_dict.append(index_subject_in_objectclause)
                    object_in_objectclause_dict = objectclause_dict[index_backbone_objectclause_end + 1::]
                    index_object_in_objectclause_content = object_in_objectclause_dict[0]
                    index_object_in_objectclause = mark_dict_backup.index(index_object_in_objectclause_content)
                    object_in_objectclause_dict.append(index_object_in_objectclause)
    except Exception:
        pass

    try:
        if len(subject_objectclause_dict) == 2 and len(subject_objectclause_dict[1]) == 36:
            subject_objectclause_dict = [subject_objectclause_dict]

        if len(predicate_objectclause_dict) == 2 and len(predicate_objectclause_dict[1]) == 36:
            predicate_objectclause_dict = [predicate_objectclause_dict]

        if len(subject_in_objectclause_dict) == 2 and len(subject_in_objectclause_dict[1]) == 36:
            subject_in_objectclause_dict = [subject_in_objectclause_dict]

        if len(predicate_in_objectclause_dict) == 2 and len(predicate_in_objectclause_dict[1]) == 36:
            predicate_in_objectclause_dict = [predicate_in_objectclause_dict]

        if len(object_in_objectclause_dict) == 2 and len(object_in_objectclause_dict[1]) == 36:
            object_in_objectclause_dict = [object_in_objectclause_dict]
    except Exception:
        pass

    try:
        main_structure_dict = [x for x in main_structure_dict if x not in subject_objectclause_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in predicate_objectclause_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in subject_in_objectclause_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in predicate_in_objectclause_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in object_in_objectclause_dict]
    except Exception:
        pass

    #print("p_oc", predicate_objectclause_dict)
    #print("s_oc", subject_objectclause_dict)
    #print("p_in_clause", predicate_in_objectclause_dict)
    #print("s_in_clause", subject_in_objectclause_dict)
    #print("o_in_clause", object_in_objectclause_dict)

    try:
        if (len(subject_objectclause_dict) == 0 or len(predicate_objectclause_dict) == 0 or len(
                subject_in_objectclause_dict) == 0 or len(predicate_in_objectclause_dict) == 0) and (main_structure_dict != main_structure_dict_del_conj):
            main_structure_dict = copy.deepcopy(main_structure_dict_del_conj)
            subject_objectclause_dict = []
            predicate_objectclause_dict = []
            subject_in_objectclause_dict = []
            predicate_in_objectclause_dict = []
            object_in_objectclause_dict = []
            for i in main_structure_dict:
                if i[0][3::] in dot_dict:
                    main_structure_dict.remove(i)

        main_rest = copy.deepcopy(main_structure_dict)

        if len(subject_objectclause_dict) != 0 and len(predicate_objectclause_dict) != 0:
            return "p_oc", predicate_objectclause_dict, "s_oc", subject_objectclause_dict, "p_in_oc", predicate_in_objectclause_dict, "s_in_oc", subject_in_objectclause_dict, "o_in_oc:", object_in_objectclause_dict, "adj", adj, "adv", adv, "complement", complement, "conj", conj_dict, "main_rest", main_rest

    except Exception:
        pass

    #print("Backbone5", main_structure_dict)

    #6.处理特殊的谓语动词（与补语不可分）
    index_subject_content = []
    index_predicate_content = []
    index_object_content = []
    index_subject = 0
    index_predicate = 0
    index_object = 0
    try:
        for i in main_structure_dict:
            index_i_v_c = main_structure_dict.index(i)
            if (i[1][2:8] == "000001" or i[1][9:15] == "000001" or i[1][16:22] == "000001" or i[1][23:29] == "000001" or
                i[1][30:36] == "000001") and (main_structure_dict_adv[index_i_v_c + 1][0][3::] in ["出", "过", "起"]) and (main_structure_dict_adv[index_i_v_c + 3][0][3::] in ["来", "去"])\
                    and (main_structure_dict[index_i_v_c  - 1][1][2:8] in ["000111", "000100"] or
                    main_structure_dict[index_i_v_c - 1][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                    main_structure_dict[index_i_v_c - 1][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                    main_structure_dict[index_i_v_c - 1][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                    main_structure_dict[index_i_v_c - 1][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]):
                predicate_dict = main_structure_dict[index_i_v_c:index_i_v_c + 4]
                index_predicate_content = predicate_dict[0]
                index_predicate = mark_dict_backup.index(index_predicate_content)
                predicate_dict.append(index_predicate)
                subject_dict = main_structure_dict[index_i_v_c-1:index_i_v_c]
                index_subject_content = subject_dict[0]
                index_subject = mark_dict_backup.index(index_subject_content)
                subject_dict.append(index_subject)
            elif (i[1][2:8] == "000001" or i[1][9:15] == "000001" or i[1][16:22] == "000001" or i[1][23:29] == "000001" or
                  i[1][30:36] == "000001") and (
                    main_structure_dict[index_i_v_c + 1][1][2:8] in ["000111", "000001"] or
                    main_structure_dict[index_i_v_c + 1][1][9:15] in ["000111", "000001"] or
                    main_structure_dict[index_i_v_c + 1][1][16:22] in ["000111", "000001"] or
                    main_structure_dict[index_i_v_c + 1][1][23:29] in ["000111", "000001"] or
                    main_structure_dict[index_i_v_c + 1][1][30:36] in ["000111", "000001"]) and (
                    main_structure_dict[index_i_v_c + 2][0][3::] in ["来", "去"]) and (
                    main_structure_dict[index_i_v_c - 1][1][2:8] in ["000111", "000100"] or
                    main_structure_dict[index_i_v_c - 1][1][9:15] in ["000111", "000100","110000", "111011", "010111"] or
                    main_structure_dict[index_i_v_c - 1][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                    main_structure_dict[index_i_v_c - 1][1][23:29] in ["000111", "000100","110000", "111011", "010111"] or
                    main_structure_dict[index_i_v_c - 1][1][30:36] in ["000111", "000100","110000", "111011", "010111"]):
                predicate_dict = main_structure_dict[index_i_v_c:index_i_v_c + 3]
                index_predicate_content = predicate_dict[0]
                index_predicate = mark_dict_backup.index(index_predicate_content)
                predicate_dict.append(index_predicate)
                subject_dict = main_structure_dict[index_i_v_c - 1:index_i_v_c]
                index_subject_content = subject_dict[0]
                index_subject = mark_dict_backup.index(index_subject_content)
                subject_dict.append(index_subject)
    except Exception:
        pass

    try:

        if len(subject_dict) == 2 and len(subject_dict[1]) == 36:
            subject_dict = [subject_dict]

        if len(predicate_dict) == 2 and len(predicate_dict[1]) == 36:
            predicate_dict = [predicate_dict]

    except Exception:
        pass

    #print("p", predicate_dict)
    #print("s", subject_dict)

    try:

        main_structure_dict = [x for x in main_structure_dict if x not in subject_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in predicate_dict]

        if len(subject_dict) == 0 and len(predicate_dict) == 0 and main_structure_dict != main_structure_dict_del_conj:
            main_strucutre_dict = copy.deepcopy(main_structure_dict_del_conj)
            subject_dict = []
            predicate_dict = []
            for i in main_structure_dict:
                if i[0][3::] in dot_dict:
                    main_structure_dict.remove(i)

        main_rest = copy.deepcopy(main_structure_dict)

        if len(subject_dict) !=0 and len(predicate_dict) != 0:
            return "p", predicate_dict, "s", subject_dict, "adj", adj, "adv", adv, "complement", complement, "conj", conj_dict, "main_rest", main_rest

    except Exception:
        pass

    #print("Backbone6", main_structure_dict)

    #7. 处理“划分为”(V+prep)结构
    index_v_prep = 0
    index_subject_content = []
    index_predicate_content = []
    index_object_content = []
    index_subject = 0
    index_predicate = 0
    index_object = 0
    try:
        for i in main_structure_dict:
            if (i[1][2:8] == "000001" or i[1][9:15] == "000001" or i[1][16:22] == "000001" or i[1][23:29] == "000001" or
                i[1][30:36] == "000001"):
                index_v_prep = main_structure_dict.index(i)
                if (main_structure_dict[index_v_prep  + 1][1][2:8] == "110011" or
                    main_structure_dict[index_v_prep + 1][1][9:15] == "110011" or
                    main_structure_dict[index_v_prep + 1][1][16:22] == "110011" or
                    main_structure_dict[index_v_prep + 1][1][23:29] == "110011" or
                    main_structure_dict[index_v_prep + 1][1][30:36] == "110011"):
                    subject_dict = main_structure_dict[index_v_prep - 1:index_v_prep]
                    index_subject_content = subject_dict[0]
                    index_subject = mark_dict.index(index_subject_content)
                    subject_dict.append(index_subject)
                    predicate_dict = main_structure_dict[index_v_prep:index_v_prep + 2]
                    index_predicate_content = predicate_dict[0]
                    index_predicate = mark_dict_backup.index(index_predicate_content)
                    predicate_dict.append(index_predicate)
                    object_dict = main_structure_dict[index_v_prep + 2::]
                    index_object_content = object_dict[0]
                    index_object = mark_dict_backup.index(index_object_content)
                    object_dict.append(index_object)
    except Exception:
        pass

    try:
        if len(subject_dict) == 2 and len(subject_dict[1]) == 36:
            subject_dict = [subject_dict]

        if len(predicate_dict) == 2 and len(predicate_dict[1]) == 36:
            predicate_dict = [predicate_dict]

        if len(object_dict) == 2 and len(object_dict[1]) == 36:
            object_dict = [object_dict]
    except Exception:
        pass

    try:
        main_structure_dict = [x for x in main_structure_dict if x not in subject_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in predicate_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in object_dict]
    except Exception:
        pass

    #print("s", subject_dict)
    #print("p", predicate_dict)
    #print("o", object_dict)

    try:
        if len(subject_dict) == 0 and len(predicate_dict) == 0 and len(object_dict) == 0 and main_structure_dict != main_structure_dict_del_conj:
            main_structure_dict = copy.deepcopy(main_structure_dict_del_conj)
            subject_dict = []
            predicate_dict = []
            object_dict = []
            for i in main_structure_dict:
                if i[0][3::] in dot_dict:
                    main_structure_dict.remove(i)

        main_rest = copy.deepcopy(main_structure_dict)

        if len(subject_dict) !=0 and len(predicate_dict) != 0 and len(object_dict) != 0:
            return "s", subject_dict, "p", predicate_dict, "o", object_dict, "adj", adj, "adv", adv, "complement", complement, "conj", conj_dict, "main_rest", main_rest

    except Exception:
        pass

    #print("Backbone7", main_structure_dict)

    #8.处理there be结构
    object_dict_p = []
    index_subject_content = []
    index_predicate_content = []
    index_predicate_2_content = []
    index_object_content = []
    index_subject = 0
    index_object = 0
    index_predicate = 0
    index_predicate_2 = 0

    try:
        for i in main_structure_dict:
            index_backbone_there_be = main_structure_dict.index(i)
            if (i[1][2:8] == "000100" or i[1][9:15] == "000100" or i[1][16:22] == "000100" or i[1][23:29] == "000100" or
                i[1][30:36] == "000100") and (main_structure_dict[index_backbone_there_be + 1][0][3::] == "有"):
                predicate_dict = main_structure_dict[index_backbone_there_be + 1:index_backbone_there_be + 2]
                index_predicate_content = predicate_dict[0]
                index_predicate = mark_dict_backup.index(index_predicate_content)
                predicate_dict.append(index_predicate)
                for i in predicate_dict:
                    for j in main_structure_dict:
                        if i[0][3::] == j[0][3::] and i != j and i[1][0] == j[1][0]:
                            main_structure_dict.remove(j)
                adv_there_be_dict = i
                for i in adv_there_be_dict:
                    for j in main_structure_dict:
                        if i[0][3::] == j[0][3::] and i != j and i[1][0] == j[1][0]:
                            main_structure_dict.remove(j)
                object_dict_p = main_structure_dict[index_backbone_there_be + 2::]

        for i in object_dict_p:
            index_backbone_there_be = object_dict_p.index(i)
            if (i[1][2:8] == "000001" or i[1][9:15] == "000001" or i[1][16:22] == "000001" or i[1][23:29] == "000001" or
                i[1][30:36] == "000001") and (main_structure_dict[index_backbone_there_be + 1][1][2:8] != "110101" or
                                              main_structure_dict[index_backbone_there_be + 1][1][9:15] != "110101" and
                                              main_structure_dict[index_backbone_there_be + 1][1][16:22] != "110101" and
                                              main_structure_dict[index_backbone_there_be + 1][1][23:29] != "110101" and
                                              main_structure_dict[index_backbone_there_be + 1][1][30:36] != "110101"):
                object_dict = object_dict_p[0:index_backbone_there_be + 1]
                index_object_content = object_dict[0]
                index_object = mark_dict_backup.index(index_object_content)
                object_dict.append(index_object)
                predicate_2_dict = object_dict_p[index_backbone_there_be:index_backbone_there_be + 1]
                index_predicate_2_content = predicate_2_dict[0]
                index_predicate_2 = mark_dict_backup.index(index_predicate_2_content)
                predicate_2_dict.append(index_predicate_2)
            elif (i[1][2:8] == "000001" or i[1][9:15] == "000001" or i[1][16:22] == "000001" or i[1][
                                                                                                23:29] == "000001" or i[
                                                                                                                          1][
                                                                                                                      30:36] == "000001") and (
                    main_structure_dict[index_backbone_there_be + 1][1][2:8] == "110101" or
                    main_structure_dict[index_backbone_there_be + 1][1][9:15] == "110101" or
                    main_structure_dict[index_backbone_there_be + 1][1][16:22] == "110101" or
                    main_structure_dict[index_backbone_there_be + 1][1][23:29] == "110101" or
                    main_structure_dict[index_backbone_there_be + 1][1][30:36] == "110101"):
                object_dict = object_dict_p[0:index_backbone_there_be + 2]
                index_object_content = object_dict[0]
                index_object = mark_dict_backup.index(index_object_content)
                object_dict.append(index_object)
                predicate_2_dict = object_dict_p[index_backbone_there_be:index_backbone_there_be + 1]
                index_predicate_2 = mark_dict_backup.index(i)
                predicate_2_dict.append(index_predicate_2)
    except Exception:
        pass

    try:

        if len(predicate_dict) == 2 and len(predicate_dict[1]) == 36:
            predicate_dict = [predicate_dict]

        if len(adv_there_be_dict) == 2 and len(adv_there_be_dict[1]) == 36:
            adv_there_be_dict = [adv_there_be_dict]

        if len(object_dict) == 2 and len(object_dict[1]) == 36:
            object_dict = [object_dict]

        if len(predicate_2_dict) == 2 and len(predicate_2_dict[1]) == 36:
            predicate_2_dict = [predicate_2_dict]
    except Exception:
        pass

    try:
        main_structure_dict = [x for x in main_structure_dict if x not in predicate_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in adv_there_be_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in object_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in predicate_2_dict]
    except Exception:
        pass

    # print("predicate_dict", predicate_dict)
    # print("adv_there_be_dict", adv_there_be_dict)
    # print("object_dict", object_dict)
    # print("predicate_2_dict", predicate_2_dict)

    try:
        if (len(predicate_dict) == 0 or len(adv_there_be_dict) == 0 or len(
                object_dict) == 0) and main_structure_dict != main_structure_dict_del_conj:
            main_structure_dict = copy.deepcopy(main_structure_dict_del_conj)
            predicate_dict = []
            adv_there_be_dict = []
            object_dict = []
            predicate_2_dict = []
            for i in main_structure_dict:
                if i[0][3::] in dot_dict:
                    main_structure_dict.remove(i)

        main_rest = copy.deepcopy(main_structure_dict)

        if len(adv_there_be_dict) != 0 and len(predicate_dict) != 0 and len(object_dict) != 0 and len(
                predicate_2_dict) != 0:
            return "p", predicate_dict, "adv_there_be", adv_there_be_dict, "o", object_dict, "p_2", predicate_2_dict, "adj", adj, "adv", adv, "complement", complement, "conj", conj_dict, "main_rest", main_rest

    except Exception:
        pass

    #print("Backbone8", main_structure_dict)

    #9.处理双动词主谓结构
    index_subject_content = []
    index_predicate_content = []
    index_object_content = []
    index_object_2_content = []
    index_subject = 0
    index_predicate = 0
    index_object = 0
    index_predicate_2 = 0
    index_object_2 = 0
    try:
        for i in main_structure_dict:
            index_backbone_two_verbs = main_structure_dict.index(i)
            if (i[1][2:8] in ["000001", "000101"] or i[1][9:15] in ["000001", "000101"] or i[1][16:22] in ["000001",
                                                                                                           "000101"] or
                i[1][23:29] in ["000001", "000101"] or i[1][30:36] in ["000001", "000101"]) and (
                    main_structure_dict[index_backbone_two_verbs + 1][1][2:8] not in ["110101", "000110"] and
                    main_structure_dict[index_backbone_two_verbs + 1][1][9:15] not in ["110101", "000110"] and
                    main_structure_dict[index_backbone_two_verbs + 1][1][16:22] not in ["110101", "000110"] and
                    main_structure_dict[index_backbone_two_verbs + 1][1][23:29] not in ["110101", "000110"] and
                    main_structure_dict[index_backbone_two_verbs + 1][1][30:36] not in ["110101", "000110"]) and (
                    main_structure_dict[index_backbone_two_verbs + 2][1][2:8] not in ["110101", "000110"] and
                    main_structure_dict[index_backbone_two_verbs + 2][1][9:15] not in ["110101", "000110"] and
                    main_structure_dict[index_backbone_two_verbs + 2][1][16:22] not in ["110101", "000110"] and
                    main_structure_dict[index_backbone_two_verbs + 2][1][23:29] not in ["110101", "000110"] and
                    main_structure_dict[index_backbone_two_verbs + 2][1][30:36] not in ["110101", "000110"]):
                predicate_dict = main_structure_dict[index_backbone_two_verbs:index_backbone_two_verbs + 1]
                index_predicate_content = predicate_dict[0]
                index_predicate = mark_dict_backup.index(index_predicate_content)
                predicate_dict.append(index_predicate)
                two_verbs_dict = main_structure_dict[index_backbone_two_verbs + 1::]
                if (main_structure_dict[index_backbone_two_verbs - 1][1][2:8] in ["000111", "000100", "010111"] or
                        main_structure_dict[index_backbone_two_verbs - 1][1][9:15] in ["000111", "000100", "010111"] or
                        main_structure_dict[index_backbone_two_verbs - 1][1][16:22] in ["000111", "000100", "010111"] or
                        main_structure_dict[index_backbone_two_verbs - 1][1][23:29] in ["000111", "000100", "010111"] or
                        main_structure_dict[index_backbone_two_verbs - 1][1][30:36] in ["000111", "000100", "010111"]):
                    subject_dict = main_structure_dict[index_backbone_two_verbs - 1:index_backbone_two_verbs]
                    index_subject_content = subject_dict[0]
                    index_subject = mark_dict_backup.index(index_subject_content)
                    subject_dict.append(index_subject)
                break
            elif (i[1][2:8] in ["000001", "000101"] or i[1][9:15] in ["000001", "000101"] or i[1][16:22] in ["000001",
                                                                                                             "000101"] or
                  i[1][23:29] in ["000001", "000101"] or i[1][30:36] in ["000001", "000101"]) and (
                    main_structure_dict[index_backbone_two_verbs + 1][1][2:8] in ["110101", "000110"] or
                    main_structure_dict[index_backbone_two_verbs + 1][1][9:15] in ["110101", "000110"] or
                    main_structure_dict[index_backbone_two_verbs + 1][1][16:22] in ["110101", "000110"] or
                    main_structure_dict[index_backbone_two_verbs + 1][1][23:29] in ["110101", "000110"] or
                    main_structure_dict[index_backbone_two_verbs + 1][1][30:36] in ["110101", "000110"]) and (
                    main_structure_dict[index_backbone_two_verbs + 2][1][2:8] not in ["110101", "000110"] and
                    main_structure_dict[index_backbone_two_verbs + 2][1][9:15] not in ["110101", "000110"] and
                    main_structure_dict[index_backbone_two_verbs + 2][1][16:22] not in ["110101", "000110"] and
                    main_structure_dict[index_backbone_two_verbs + 2][1][23:29] not in ["110101", "000110"] and
                    main_structure_dict[index_backbone_two_verbs + 2][1][30:36] not in ["110101", "000110"]):
                predicate_dict = main_structure_dict[index_backbone_two_verbs:index_backbone_two_verbs + 2]
                index_predicate_content = predicate_dict[0]
                index_predicate = mark_dict_backup.index(index_predicate_content)
                predicate_dict.append(index_predicate)
                two_verbs_dict = main_structure_dict[index_backbone_two_verbs + 2::]
                if (main_structure_dict[index_backbone_two_verbs - 1][1][2:8] in ["000111", "000100", "010111"] or
                        main_structure_dict[index_backbone_two_verbs - 1][1][9:15] in ["000111", "000100", "010111"] or
                        main_structure_dict[index_backbone_two_verbs - 1][1][16:22] in ["000111", "000100", "010111"] or
                        main_structure_dict[index_backbone_two_verbs - 1][1][23:29] in ["000111", "000100", "010111"] or
                        main_structure_dict[index_backbone_two_verbs - 1][1][30:36] in ["000111", "000100", "010111"]):
                    subject_dict = main_structure_dict[index_backbone_two_verbs - 1:index_backbone_two_verbs]
                    index_subject_content = subject_dict[0]
                    index_subject = mark_dict_backup.index(index_subject_content)
                    subject_dict.append(index_subject)
                break
            elif (i[1][2:8] in ["000001", "000101"] or i[1][9:15] in ["000001", "000101"] or i[1][16:22] in ["000001",
                                                                                                             "000101"] or
                  i[1][23:29] in ["000001", "000101"] or i[1][30:36] in ["000001", "000101"]) and (
                    main_structure_dict[index_backbone_two_verbs + 1][1][2:8] in ["110101", "000110"] or
                    main_structure_dict[index_backbone_two_verbs + 1][1][9:15] in ["110101", "000110"] or
                    main_structure_dict[index_backbone_two_verbs + 1][1][16:22] in ["110101", "000110"] or
                    main_structure_dict[index_backbone_two_verbs + 1][1][23:29] in ["110101", "000110"] or
                    main_structure_dict[index_backbone_two_verbs + 1][1][30:36] in ["110101", "000110"]) and (
                    main_structure_dict[index_backbone_two_verbs + 2][1][2:8] in ["110101", "000110"] and
                    main_structure_dict[index_backbone_two_verbs + 2][1][9:15] in ["110101", "000110"] and
                    main_structure_dict[index_backbone_two_verbs + 2][1][16:22] in ["110101", "000110"] and
                    main_structure_dict[index_backbone_two_verbs + 2][1][23:29] in ["110101", "000110"] and
                    main_structure_dict[index_backbone_two_verbs + 2][1][30:36] in ["110101", "000110"]):
                predicate_dict = main_structure_dict[index_backbone_two_verbs:index_backbone_two_verbs + 3]
                index_predicate_content = predicate_dict[0]
                index_predicate = mark_dict_backup.index(index_predicate_content)
                predicate_dict.append(index_predicate)
                two_verbs_dict = main_structure_dict[index_backbone_two_verbs + 3::]
                if (main_structure_dict[index_backbone_two_verbs - 1][1][2:8] in ["000111", "000100", "010111"] or
                        main_structure_dict[index_backbone_two_verbs - 1][1][9:15] in ["000111", "000100", "010111"] or
                        main_structure_dict[index_backbone_two_verbs - 1][1][16:22] in ["000111", "000100", "010111"] or
                        main_structure_dict[index_backbone_two_verbs - 1][1][23:29] in ["000111", "000100", "010111"] or
                        main_structure_dict[index_backbone_two_verbs - 1][1][30:36] in ["000111", "000100", "010111"]):
                    subject_dict = main_structure_dict[index_backbone_two_verbs - 1:index_backbone_two_verbs]
                    index_subject_content = subject_dict[0]
                    index_subject = mark_dict_backup.index(index_subject_content)
                    subject_dict.append(index_subject)
                break
    except Exception:
        pass  # 确定动词以后覆盖的部分

    try:
        for i in two_verbs_dict:
            index_backbone_two_verbs_end = two_verbs_dict.index(i)
            if i[1][2:8] == "000001" or i[1][9:15] == "000001" or i[1][16:22] == "000001" or \
                    i[1][23:29] == "000001" or i[1][30:36] == "000001" and (
                    two_verbs_dict[index_backbone_two_verbs_end + 1][1][2:8] not in ["110101", "000110"] and
                    two_verbs_dict[index_backbone_two_verbs_end + 1][1][9:15] not in ["110101", "000110"] and
                    two_verbs_dict[index_backbone_two_verbs_end + 1][1][16:22] not in ["110101", "000110"] and
                    two_verbs_dict[index_backbone_two_verbs_end + 1][1][23:29] not in ["110101", "000110"] and
                    two_verbs_dict[index_backbone_two_verbs_end + 1][1][30:36] not in ["110101", "000110"]) and (
                    two_verbs_dict[index_backbone_two_verbs_end + 2][1][2:8] not in ["110101", "000110"] and
                    two_verbs_dict[index_backbone_two_verbs_end + 2][1][9:15] not in ["110101", "000110"] and
                    two_verbs_dict[index_backbone_two_verbs_end + 2][1][16:22] not in ["110101", "000110"] and
                    two_verbs_dict[index_backbone_two_verbs_end + 2][1][23:29] not in ["110101", "000110"] and
                    two_verbs_dict[index_backbone_two_verbs_end + 2][1][30:36] not in ["110101", "000110"]):
                predicate_2_dict = two_verbs_dict[index_backbone_two_verbs_end:index_backbone_two_verbs_end + 1]
                index_predicate_2_content = predicate_dict[0]
                index_predicate_2 = mark_dict_backup.index(index_predicate_2_content)
                predicate_2_dict.append(index_predicate_2)
                object_dict = two_verbs_dict[0:index_backbone_two_verbs_end]
                index_object_content = object_dict[0]
                index_object = mark_dict_backup.index(index_object_content)
                object_dict.append(index_object)
                object_2_dict = two_verbs_dict[index_backbone_two_verbs_end + 1::]
                index_object_2_content = object_2_dict[0]
                index_object_2 = mark_dict_backup.index(index_object_2_content)
                object_2_dict.append(index_object_2)
                #print("1", object_2_dict)
                break
            elif i[1][2:8] == "000001" or i[1][9:15] == "000001" or i[1][16:22] == "000001" or \
                    i[1][23:29] == "000001" or i[1][30:36] == "000001" and (
                    two_verbs_dict[index_backbone_two_verbs_end + 1][1][2:8] in ["110101", "000110"] and
                    two_verbs_dict[index_backbone_two_verbs_end + 1][1][9:15] in ["110101", "000110"] and
                    two_verbs_dict[index_backbone_two_verbs_end + 1][1][16:22] in ["110101", "000110"] and
                    two_verbs_dict[index_backbone_two_verbs_end + 1][1][23:29] in ["110101", "000110"] and
                    two_verbs_dict[index_backbone_two_verbs_end + 1][1][30:36] in ["110101", "000110"]) and (
                    two_verbs_dict[index_backbone_two_verbs_end + 2][1][2:8] not in ["110101", "000110"] and
                    two_verbs_dict[index_backbone_two_verbs_end + 2][1][9:15] not in ["110101", "000110"] and
                    two_verbs_dict[index_backbone_two_verbs_end + 2][1][16:22] not in ["110101", "000110"] and
                    two_verbs_dict[index_backbone_two_verbs_end + 2][1][23:29] not in ["110101", "000110"] and
                    two_verbs_dict[index_backbone_two_verbs_end + 2][1][30:36] not in ["110101", "000110"]):
                predicate_2_dict = two_verbs_dict[index_backbone_two_verbs_end:index_backbone_two_verbs_end + 2]
                index_predicate_2_content = predicate_dict[0]
                index_predicate_2 = mark_dict_backup.index(index_predicate_2_content)
                predicate_2_dict.append(index_predicate_2)
                object_dict = two_verbs_dict[0:index_backbone_two_verbs_end]
                index_object_content = object_dict[0]
                index_object = mark_dict_backup.index(index_object_content)
                object_dict.append(index_object)
                object_2_dict = two_verbs_dict[index_backbone_two_verbs_end + 2::]
                index_object_2_content = object_2_dict[0]
                index_object_2 = mark_dict_backup.index(index_object_2_content)
                object_2_dict.append(index_object_2)
                #print("2", object_2_dict)
                break
            elif i[1][2:8] == "000001" or i[1][9:15] == "000001" or i[1][16:22] == "000001" or \
                    i[1][23:29] == "000001" or i[1][30:36] == "000001" and (
                    two_verbs_dict[index_backbone_two_verbs_end + 1][1][2:8] in ["110101", "000110"] and
                    two_verbs_dict[index_backbone_two_verbs_end + 1][1][9:15] in ["110101", "000110"] and
                    two_verbs_dict[index_backbone_two_verbs_end + 1][1][16:22] in ["110101", "000110"] and
                    two_verbs_dict[index_backbone_two_verbs_end + 1][1][23:29] in ["110101", "000110"] and
                    two_verbs_dict[index_backbone_two_verbs_end + 1][1][30:36] in ["110101", "000110"]) and (
                    two_verbs_dict[index_backbone_two_verbs_end + 2][1][2:8] in ["110101", "000110"] and
                    two_verbs_dict[index_backbone_two_verbs_end + 2][1][9:15] in ["110101", "000110"] and
                    two_verbs_dict[index_backbone_two_verbs_end + 2][1][16:22] in ["110101", "000110"] and
                    two_verbs_dict[index_backbone_two_verbs_end + 2][1][23:29] in ["110101", "000110"] and
                    two_verbs_dict[index_backbone_two_verbs_end + 2][1][30:36] in ["110101", "000110"]):
                predicate_2_dict = two_verbs_dict[index_backbone_two_verbs_end:index_backbone_two_verbs_end + 2]
                index_predicate_2_content = predicate_dict[0]
                index_predicate_2 = mark_dict_backup.index(index_predicate_2_content)
                predicate_2_dict.append(index_predicate_2)
                object_dict = two_verbs_dict[0:index_backbone_two_verbs_end]
                index_object_content = object_dict[0]
                index_object = mark_dict_backup.index(index_object_content)
                object_dict.append(index_object)
                object_2_dict = two_verbs_dict[index_backbone_two_verbs_end + 3::]
                index_object_2_content = object_2_dict[0]
                index_object_2 = mark_dict_backup.index(index_object_2_content)
                object_2_dict.append(index_object_2)
                #print("3", object_2_dict)
                break
    except Exception:
        pass

    try:

        if len(subject_dict) == 2 and len(subject_dict[1]) == 36:
            subject_dict = [subject_dict]

        if len(predicate_dict) == 2 and len(predicate_dict[1]) == 36:
            predicate_dict = [predicate_dict]

        if len(predicate_2_dict) == 2 and len(predicate_2_dict[1]) == 36:
            predicate_2_dict = [predicate_2_dict]

        if len(object_dict) == 2 and len(object_dict[1]) == 36:
            object_dict = [object_dict]

        if len(object_2_dict) == 2 and len(object_2_dict[1]) == 36:
            object_2_dict = [object_2_dict]

    except Exception:
        pass

    try:
        main_structure_dict = [x for x in main_structure_dict if x not in subject_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in predicate_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in predicate_2_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in object_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in object_2_dict]
    except Exception:
        pass

    try:
        if (len(subject_dict) == 0 or len(predicate_dict) == 0 or len(predicate_2_dict) == 0 or len(
                object_dict) == 0 or len(object_2_dict) == 0) and (main_structure_dict != main_structure_dict_del_conj):
            main_structure_dict = copy.deepcopy(main_structure_dict_del_conj)
            subject_dict = []
            predicate_dict = []
            predicate_2_dict = []
            object_dict = []
            object_2_dict = []
            for i in main_structure_dict:
                if i[0][3::] in dot_dict:
                    main_structure_dict.remove(i)

        main_rest = copy.deepcopy(main_structure_dict)

        if len(subject_dict) != 0 and len(predicate_dict) != 0 and len(predicate_2_dict) != 0:
            return "s", subject_dict, "p", predicate_dict, "p_2", predicate_2_dict, "o", object_dict, "o_2", object_2_dict, "adj", adj, "adv", adv, "complement", complement, "conj", conj_dict, "main_rest", main_rest

    except Exception:
        pass

    #print("Backbone9", main_structure_dict)

    #10 处理双重主谓结构的短句“我来抛砖大家引玉"
    index_two_sen = 0
    index_subject_1_content = []
    index_predicate_1_content = []
    index_subject_2_content = []
    index_predicate_2_content = []
    index_subject_1 = 0
    index_predicate_1 = 0
    index_subject_2 = 0
    index_predicate_2 = 0

    try:
        for i in main_structure_dict:
            index_two_sen = main_structure_dict.index(i)
            if (i[1][2:8] in ["000001", "000101"] or i[1][9:15] in ["000001", "000101"] or i[1][16:22] in ["000001","000101"] or
                i[1][23:29] in ["000001", "000101"] or i[1][30:36] in ["000001", "000101"]) and (main_structure_dict[index_two_sen - 1][1][2:8] in ["000111", "000100", "110000", "111011","010111"] or
                    main_structure_dict[index_two_sen - 1][1][9:15] in ["000111", "000100", "110000", "111011","010111"] or
                    main_structure_dict[index_two_sen - 1][1][16:22] in ["000111", "000100", "110000", "111011","010111"] or
                    main_structure_dict[index_two_sen - 1][1][23:29] in ["000111", "000100", "110000", "111011","010111"] or
                    main_structure_dict[index_two_sen - 1][1][30:36] in ["000111", "000100", "110000", "111011","010111"]) and (
                    main_structure_dict[index_two_sen + 1][1][2:8] in ["000111", "000100", "110000", "111011","010111"] or
                    main_structure_dict[index_two_sen + 1][1][9:15] in ["000111", "000100", "110000", "111011","010111"] or
                    main_structure_dict[index_two_sen + 1][1][16:22] in ["000111", "000100", "110000", "111011","010111"] or
                    main_structure_dict[index_two_sen + 1][1][23:29] in ["000111", "000100", "110000", "111011","010111"] or
                    main_structure_dict[index_two_sen + 1][1][30:36] in ["000111", "000100", "110000", "111011","010111"]) and (
                    main_structure_dict[index_two_sen + 2][1][2:8] in ["000001", "000101"] or
                    main_structure_dict[index_two_sen + 2][1][9:15] in ["000001", "000101"] or
                    main_structure_dict[index_two_sen + 2][1][16:22] in ["000001", "000101"] or
                    main_structure_dict[index_two_sen + 2][1][23:29] in ["000001", "000101"] or
                    main_structure_dict[index_two_sen + 2][1][30:36] in ["000001", "000101"]):
                subject_dict = main_structure_dict[index_two_sen - 1:index_two_sen]
                index_subject_1 = mark_dict_backup.index(subject_dict[0])
                subject_dict.append(index_subject_1)
                predicate_dict = main_structure_dict[index_two_sen:index_two_sen + 1]
                index_predicate_1 = mark_dict_backup.index(predicate_dict[0])
                predicate_dict.append(index_predicate_1)
                subject_2_dict = main_structure_dict[index_two_sen + 1:index_two_sen + 2]
                index_subject_2 = mark_dict_backup.index(subject_2_dict[0])
                subject_2_dict.append(index_subject_2)
                predicate_2_dict = main_structure_dict[index_two_sen + 2::]
                index_predicate_2 = mark_dict_backup.index(predicate_2_dict[0])
                predicate_2_dict.append(index_predicate_2)
    except Exception:
        pass

    try:
        if len(subject_dict) == 2 and len(subject_dict[1]) == 36:
            subject_dict = [subject_dict]
        if len(predicate_dict) == 2 and len(predicate_dict[1]) == 36:
            predicate_dict = [predicate_dict]
        if len(subject_2_dict) == 2 and len(subject_2_dict[1]) == 36:
            subject_2_dict = [subject_2_dict]
        if len(predicate_2_dict) == 2 and len(predicate_2_dict[1]) == 36:
            predicate_2_dict = [predicate_2_dict]
    except Exception:
        pass

    try:
        main_structure_dict = [x for x in main_structure_dict if x not in subject_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in predicate_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in subject_2_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in predicate_2_dict]
    except Exception:
        pass

    #print("s1", subject_dict)
    #print("s2", predicate_dict)
    #print("p1", subject_2_dict)
    #print("p2", predicate_2_dict)


    try:
        if len(subject_dict) == 0 and len(predicate_dict) == 0 and len(subject_2_dict) == 0 and len(
                predicate_2_dict) == 0 and main_structure_dict != main_structure_dict_del_conj:
            main_structure_dict = copy.deepcopy(main_structure_dict_del_conj)
            subject_dict = []
            predicate_dict = []
            subject_2_dict = []
            predicate_2_dict = []

        main_rest = copy.deepcopy(main_structure_dict)

        if len(subject_dict) != 0 and len(predicate_dict) != 0 and len(subject_2_dict) != 0 and len(
                predicate_2_dict) != 0:
            return "s", subject_dict, "p", predicate_dict, "s_2", subject_2_dict, "p_2", predicate_2_dict, "adj", adj, "adv", adv, "complement", complement, "conj", conj_dict, "main_rest", main_rest

    except Exception:
        pass

    #print("Backbone10", main_structure_dict)

    #11 处理“代替”/“代表”XXX+V的结构
    index_subject_represent_content = []
    index_object_represent_content = []
    index_predicate_represent_content = []
    index_object_in_represent_content = []
    represent_dict = []
    index_subject_represent = 0
    index_predicate_represent = 0
    index_object_represent = 0
    index_predicate_in_represent = 0
    index_object_in_represent = 0
    index_represent_end = 0
    try:
        for i in main_structure_dict:
            index_represent = main_structure_dict.index(i)
            if i[1][2:8] == "000001" or i[1][9:15] == "000001" or i[1][16:22] == "000001" or i[1][23:29] == "000001" or i[1][30:36] == "000001" and i[0][3::] in ["代替", "代表", "替"]:
                #print("ok1", i)
                if (main_structure_dict[index_represent - 1][0][3::] not in ["是","就是","真是", "还是"]) and (main_structure_dict[index_represent + 1][1][2:8] in ["000111", "000100", "010111"] or
                        main_structure_dict[index_represent + 1][1][9:15] in ["000111", "000100", "010111"] or
                        main_structure_dict[index_represent + 1][1][16:22] in ["000111", "000100", "010111"] or
                        main_structure_dict[index_represent + 1][1][23:29] in ["000111", "000100", "010111"] or
                        main_structure_dict[index_represent + 1][1][30:36] in ["000111", "000100", "010111"]) and (main_structure_dict[index_represent + 2][1][2:8] in ["000001", "000101"] or
                        main_structure_dict[index_represent + 2][1][9:15] in ["000001", "000101"] or
                        main_structure_dict[index_represent + 2][1][16:22] in ["000001", "000101"] or
                        main_structure_dict[index_represent + 2][1][23:29] in ["000001", "000101"] or
                        main_structure_dict[index_represent + 2][1][30:36] in ["000001", "000101"]):
                    predicate_represent_dict = main_structure_dict[index_represent:index_represent + 1]
                    index_predicate_represent_content = predicate_represent_dict[0]
                    index_predicate_represent = mark_dict_backup.index(index_predicate_represent_content)
                    predicate_represent_dict.append(index_predicate_represent)
                    represent_dict = main_structure_dict[index_represent + 1::]
                    #print("1ok")
                    object_represent_dict = main_structure_dict[index_represent+1:index_represent + 2]
                    index_object_represent_content = object_represent_dict[0]
                    index_object_represent = mark_dict_backup.index(index_object_represent_content)
                    object_represent_dict.append(index_object_represent)
                    predicate_in_represent_dict = main_structure_dict[index_represent + 2:index_represent + 3]
                    index_p_in_represent_content = predicate_in_represent_dict[0]
                    index_p_in_represent = mark_dict_backup.index(index_p_in_represent_content)
                    predicate_in_represent_dict.append(index_p_in_represent)
                    object_in_represent_dict = main_structure_dict[index_represent + 3::]
                    index_o_in_represent_content = object_in_represent_dict[0]
                    index_o_in_represent = mark_dict_backup.index(index_o_in_represent_content)
                    object_in_represent_dict.append(index_o_in_represent)
                    if (main_structure_dict[index_represent - 1][1][2:8] in ["000111", "000100", "010111"] or
                            main_structure_dict[index_represent - 1][1][9:15] in ["000111", "000100", "010111"] or
                            main_structure_dict[index_represent - 1][1][16:22] in ["000111", "000100", "010111"] or
                            main_structure_dict[index_represent - 1][1][23:29] in ["000111", "000100", "010111"] or
                            main_structure_dict[index_represent - 1][1][30:36] in ["000111", "000100", "010111"]):
                        subject_represent_dict = main_structure_dict[index_represent - 1:index_represent]
                        index_subject_represent_content = subject_represent_dict[0]
                        index_subject_represent = mark_dict_backup.index(index_subject_represent_content)
                        subject_represent_dict.append(index_subject_represent)
                        break
                elif (main_structure_dict[index_represent - 1][0][3::] in ["是","就是","真是", "还是"]) and (main_structure_dict[index_represent + 1][1][2:8] in ["000111", "000100", "010111"] or
                        main_structure_dict[index_represent + 1][1][9:15] in ["000111", "000100", "010111"] or
                        main_structure_dict[index_represent + 1][1][16:22] in ["000111", "000100", "010111"] or
                        main_structure_dict[index_represent + 1][1][23:29] in ["000111", "000100", "010111"] or
                        main_structure_dict[index_represent + 1][1][30:36] in ["000111", "000100", "010111"]) and (main_structure_dict[index_represent + 2][1][2:8] in ["000001", "000101"] or
                        main_structure_dict[index_represent + 2][1][9:15] in ["000001", "000101"] or
                        main_structure_dict[index_represent + 2][1][16:22] in ["000001", "000101"] or
                        main_structure_dict[index_represent + 2][1][23:29] in ["000001", "000101"] or
                        main_structure_dict[index_represent + 2][1][30:36] in ["000001", "000101"]):
                    #print("ok2")
                    predicate_represent_dict = main_structure_dict[index_represent-1:index_represent + 1]
                    index_predicate_represent_content = predicate_represent_dict[0]
                    index_predicate_represent = mark_dict_backup.index(index_predicate_represent_content)
                    predicate_represent_dict.append(index_predicate_represent)
                    #print("1ok")
                    object_represent_dict = main_structure_dict[index_represent+1:index_represent + 2]
                    index_object_represent_content = object_represent_dict[0]
                    index_object_represent = mark_dict_backup.index(index_object_represent_content)
                    object_represent_dict.append(index_object_represent)
                    predicate_in_represent_dict = main_structure_dict[index_represent + 2:index_represent + 3]
                    index_p_in_represent_content = predicate_in_represent_dict[0]
                    index_p_in_represent = mark_dict_backup.index(index_p_in_represent_content)
                    predicate_in_represent_dict.append(index_p_in_represent)
                    object_in_represent_dict = main_structure_dict[index_represent + 3::]
                    index_o_in_represent_content = object_in_represent_dict[0]
                    index_o_in_represent = mark_dict_backup.index(index_o_in_represent_content)
                    object_in_represent_dict.append(index_o_in_represent)
                    if (main_structure_dict[index_represent - 2][1][2:8] in ["000111", "000100", "010111"] or
                            main_structure_dict[index_represent - 2][1][9:15] in ["000111", "000100", "010111"] or
                            main_structure_dict[index_represent - 2][1][16:22] in ["000111", "000100", "010111"] or
                            main_structure_dict[index_represent - 2][1][23:29] in ["000111", "000100", "010111"] or
                            main_structure_dict[index_represent - 2][1][30:36] in ["000111", "000100", "010111"]):
                        subject_represent_dict = main_structure_dict[index_represent - 2:index_represent-1]
                        index_subject_represent_content = subject_represent_dict[0]
                        index_subject_represent = mark_dict_backup.index(index_subject_represent_content)
                        subject_represent_dict.append(index_subject_represent)
                        break
    except Exception:
        pass

    try:
        if len(subject_represent_dict) == 2 and len(subject_represent_dict[1]) == 36:
            subject_represent_dict = [subject_represent_dict]

        if len(predicate_represent_dict) == 2 and len(predicate_represent_dict[1]) == 36:
            predicate_represent_dict = [predicate_represent_dict]

        if len(object_represent_dict) == 2 and len(predicate_represent_dict[1]) == 36:
            predicate_represent_dict = [predicate_represent_dict]

        if len(predicate_in_represent_dict) == 2 and len(predicate_in_represent_dict[1]) == 36:
            predicate_in_represent_dict = [predicate_in_represent_dict]

        if len(object_in_represent_dict) == 2 and len(object_in_represent_dict[1]) == 36:
            object_in_represent_dict = [object_in_represent_dict]

    except Exception:
        pass

    try:
        main_structure_dict = [x for x in main_structure_dict if x not in subject_represent_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in predicate_represent_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in object_represent_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in predicate_in_represent_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in object_in_represent_dict]

    except Exception:
        pass

    #print("p_re", predicate_represent_dict)
    #print("s_re", subject_represent_dict)
    #print("o_re", object_represent_dict)
    #print("p_in_re", predicate_in_represent_dict)
    #print("o_in_re", object_in_represent_dict)

    try:
        if (len(subject_represent_dict) == 0 or len(predicate_represent_dict) == 0 or len(
            object_represent_dict) == 0 or len(predicate_in_represent_dict) == 0) and (main_structure_dict != main_structure_dict_del_conj):
            main_structure_dict = copy.deepcopy(main_structure_dict_del_conj)
            subject_represent_dict = []
            predicate_represent_dict = []
            object_represent_dict = []
            predicate_in_represent_dict = []
            object_in_represent_dict = []
            for i in main_structure_dict:
                if i[0][3::] in dot_dict:
                    main_structure_dict.remove(i)

        main_rest = copy.deepcopy(main_structure_dict)

        if len(subject_represent_dict) != 0 and len(predicate_represent_dict) != 0 and len(object_represent_dict) != 0 and len(predicate_in_represent_dict) != 0 and len(object_in_represent_dict) != 0:
            return "p_re:", predicate_represent_dict, "s_re", subject_represent_dict, "o_re", object_represent_dict, "p_in_re", predicate_in_represent_dict, "o_in_re", object_in_represent_dict, "adj", adj, "adv", adv, "complement", complement, "conj", conj_dict, "main_rest", main_rest

    except Exception:
        pass

    #print("Backbone11", main_structure_dict)

    #12.处理时间地点+谓+宾结构
    index_subject_content = []
    index_predicate_content = []
    index_object_content = []
    index_subject = 0
    index_predicate = 0
    index_object = 0
    try:
        for i in main_structure_dict:
            index_v_tp = main_structure_dict.index(i)
            if (i[1][2:8] == "000001" or i[1][9:15] == "000001" or i[1][16:22] == "000001" or i[1][23:29] == "000001" or
                    i[1][30:36] == "000001"):
                index_v_tp = main_structure_dict.index(i)
                if (main_structure_dict[index_v_tp - 1][1][2:8] in ["110000", "111011"] or
                    main_structure_dict[index_v_tp - 1][1][9:15] in ["110000", "111011"] or
                    main_structure_dict[index_v_tp - 1][1][16:22] in ["110000", "111011"] or
                    main_structure_dict[index_v_tp - 1][1][23:29] in ["110000", "111011"] or
                    main_structure_dict[index_v_tp - 1][1][30:36] in ["110000", "111011"]) and (
                        main_structure_dict[index_v_tp - 1] == main_structure_dict[0]):
                    subject_dict = main_structure_dict[index_v_tp - 1:index_v_tp]
                    index_subject_content = subject_dict[0]
                    index_subject = mark_dict_backup.index(index_subject_content)
                    subject_dict.append(index_subject)
                    predicate_dict = main_structure_dict[index_v_tp:index_v_tp + 1]
                    index_predicate_content = predicate_dict[0]
                    index_predicate = mark_dict_backup.index(index_predicate_content)
                    predicate_dict.append(index_predicate)
                    object_dict = main_structure_dict[index_v_tp + 1::]
                    index_object_content = object_dict[0]
                    index_object = mark_dict_backup.index(index_object_content)
                    object_dict.append(index_object)
                elif (main_structure_dict[index_v_tp - 1][1][2:8] in ["110000", "111011"] or
                      main_structure_dict[index_v_tp - 1][1][9:15] in ["110000", "111011"] or
                      main_structure_dict[index_v_tp - 1][1][16:22] in ["110000", "111011"] or
                      main_structure_dict[index_v_tp - 1][1][23:29] in ["110000", "111011"] or
                      main_structure_dict[index_v_tp - 1][1][30:36] in ["110000", "111011"]) and (
                        main_structure_dict[index_v_tp - 2][1][2:8] in ["000111", "000101"] or
                        main_structure_dict[index_v_tp - 2][1][9:15] in ["000111", "000101"] or
                        main_structure_dict[index_v_tp - 2][1][16:22] in ["000111", "000101"] or
                        main_structure_dict[index_v_tp - 2][1][23:29] in ["000111", "000101"] or
                        main_structure_dict[index_v_tp - 2][1][30:36] in ["000111", "000101"]):
                    subject_dict = main_structure_dict[index_v_tp - 2:index_v_tp]
                    index_subject_content = subject_dict[0]
                    index_subject = mark_dict_backup.index(index_subject_content)
                    subject_dict.append(index_subject)
                    predicate_dict = main_structure_dict[index_v_tp:index_v_tp + 1]
                    index_predicate_content = predicate_dict[0]
                    index_predicate = mark_dict_backup.index(index_predicate_content)
                    predicate_dict.append(index_predicate)
                    object_dict = main_structure_dict[index_v_tp + 1::]
                    index_object_content = object_dict[0]
                    index_object = mark_dict_backup.index(index_object_content)
                    object_dict.append(index_object)
                elif (index_v_tp - 3 != 0) and (index_v_tp - 4 != 0) and (
                        main_structure_dict[index_v_tp - 1][1][2:8] in ["110000", "111011"] or
                        main_structure_dict[index_v_tp - 1][1][9:15] in ["110000", "111011"] or
                        main_structure_dict[index_v_tp - 1][1][16:22] in ["110000", "111011"] or
                        main_structure_dict[index_v_tp - 1][1][23:29] in ["110000", "111011"] or
                        main_structure_dict[index_v_tp - 1][1][30:36] in ["110000", "111011"]) and (
                        main_structure_dict[index_v_tp - 2][1][2:8] in ["000111", "000101"] or
                        main_structure_dict[index_v_tp - 2][1][9:15] in ["000111", "000101"] or
                        main_structure_dict[index_v_tp - 2][1][16:22] in ["000111", "000101"] or
                        main_structure_dict[index_v_tp - 2][1][23:29] in ["000111", "000101"] or
                        main_structure_dict[index_v_tp - 2][1][30:36] in ["000111", "000101"]) and (
                        main_structure_dict[index_v_tp - 3][1][2:8] in ["000111", "000101"] or
                        main_structure_dict[index_v_tp - 3][1][9:15] in ["000111", "000101"] or
                        main_structure_dict[index_v_tp - 3][1][16:22] in ["000111", "000101"] or
                        main_structure_dict[index_v_tp - 3][1][23:29] in ["000111", "000101"] or
                        main_structure_dict[index_v_tp - 3][1][30:36] in ["000111", "000101"]) and (
                        main_structure_dict[index_v_tp - 4][1][2:8] not in ["000111", "000101"] and
                        main_structure_dict[index_v_tp - 4][1][9:15] not in ["000111", "000101"] and
                        main_structure_dict[index_v_tp - 4][1][16:22] not in ["000111", "000101"] and
                        main_structure_dict[index_v_tp - 4][1][23:29] not in ["000111", "000101"] and
                        main_structure_dict[index_v_tp - 4][1][30:36] not in ["000111", "000101"]):
                    subject_dict = main_structure_dict[index_v_tp - 3:index_v_tp]
                    index_subject_content = subject_dict[0]
                    index_subject = mark_dict_backup.index(index_subject_content)
                    subject_dict.append(index_subject)
                    predicate_dict = main_structure_dict[index_v_tp:index_v_tp + 1]
                    index_predicate_content = predicate_dict[0]
                    index_predicate = mark_dict_backup.index(index_predicate_content)
                    predicate_dict.append(index_predicate)
                    object_dict = main_structure_dict[index_v_tp + 1::]
                    index_object_content = object_dict[0]
                    index_object = mark_dict_backup.index(index_object_content)
                    object_dict.append(index_object)
                elif (main_structure_dict[index_v_tp - 1][1][2:8] in ["110000", "111011"] or
                      main_structure_dict[index_v_tp - 1][1][9:15] in ["110000", "111011"] or
                      main_structure_dict[index_v_tp - 1][1][16:22] in ["110000", "111011"] or
                      main_structure_dict[index_v_tp - 1][1][23:29] in ["110000", "111011"] or
                      main_structure_dict[index_v_tp - 1][1][30:36] in ["110000", "111011"]) and (
                        main_structure_dict[index_v_tp - 2][1][2:8] in ["000111", "000100"] or
                        main_structure_dict[index_v_tp - 2][1][9:15] in ["000111", "000100"] or
                        main_structure_dict[index_v_tp - 2][1][16:22] in ["000111", "000100"] or
                        main_structure_dict[index_v_tp - 2][1][23:29] in ["000111", "000100"] or
                        main_structure_dict[index_v_tp - 2][1][30:36] in ["000111", "000100"]) and (
                        main_structure_dict[index_v_tp - 3][1][2:8] in ["000111", "000100"] or
                        main_structure_dict[index_v_tp - 3][1][9:15] in ["000111", "000100"] or
                        main_structure_dict[index_v_tp - 3][1][16:22] in ["000111", "000100"] or
                        main_structure_dict[index_v_tp - 3][1][23:29] in ["000111", "000100"] or
                        main_structure_dict[index_v_tp - 3][1][30:36] in ["000111", "000100"]):
                    subject_dict = main_structure_dict[index_v_tp - 3:index_v_tp]
                    index_subject_content = subject_dict[0]
                    index_subject = mark_dict_backup.index(index_subject_content)
                    subject_dict.append(index_subject)
                    predicate_dict = main_structure_dict[index_v_tp:index_v_tp + 1]
                    index_predicate_content = predicate_dict[0]
                    index_predicate = mark_dict_backup.index(index_predicate_content)
                    predicate_dict.append(index_predicate)
                    object_dict = main_structure_dict[index_v_tp + 1::]
                    index_object_content = object_dict[0]
                    index_object = mark_dict_backup.index(index_object_content)
                    object_dict.append(index_object)
                elif (main_structure_dict[index_v_tp - 1][1][2:8] in ["110000", "111011"] or
                      main_structure_dict[index_v_tp - 1][1][9:15] in ["110000", "111011"] or
                      main_structure_dict[index_v_tp - 1][1][16:22] in ["110000", "111011"] or
                      main_structure_dict[index_v_tp - 1][1][23:29] in ["110000", "111011"] or
                      main_structure_dict[index_v_tp - 1][1][30:36] in ["110000", "111011"]) and (
                        main_structure_dict[index_v_tp - 2][1][2:8] in ["000111", "000100"] or
                        main_structure_dict[index_v_tp - 2][1][9:15] in ["000111", "000100"] or
                        main_structure_dict[index_v_tp - 2][1][16:22] in ["000111", "000100"] or
                        main_structure_dict[index_v_tp - 2][1][23:29] in ["000111", "000100"] or
                        main_structure_dict[index_v_tp - 2][1][30:36] in ["000111", "000100"]) and (
                        main_structure_dict[index_v_tp - 3][1][2:8] not in ["000111", "000100"] and
                        main_structure_dict[index_v_tp - 3][1][9:15] not in ["000111", "000100"] and
                        main_structure_dict[index_v_tp - 3][1][16:22] not in ["000111", "000100"] and
                        main_structure_dict[index_v_tp - 3][1][23:29] not in ["000111", "000100"] and
                        main_structure_dict[index_v_tp - 3][1][30:36] not in ["000111", "000100"]):
                    subject_dict = main_structure_dict[index_v_tp - 2:index_v_tp]
                    index_subject_content = subject_dict[0]
                    index_subject = mark_dict_backup.index(index_subject_content)
                    subject_dict.append(index_subject)
                    predicate_dict = main_structure_dict[index_v_tp:index_v_tp + 1]
                    index_predicate_content = predicate_dict[0]
                    index_predicate = mark_dict_backup.index(index_predicate_content)
                    predicate_dict.append(index_predicate)
                    object_dict = main_structure_dict[index_v_tp + 1::]
                    index_object_content = object_dict[0]
                    index_object = mark_dict_backup.index(index_object_content)
                    object_dict.append(index_object)
    except Exception:
        pass

    try:

        if len(subject_dict) == 2 and len(subject_dict[1]) == 36:
            subject_dict = [subject_dict]

        if len(predicate_dict) == 2 and len(predicate_dict[1]) == 36:
            predicate_dict = [predicate_dict]

        if len(object_dict) == 2 and len(object_dict[1]) == 36:
            object_dict = [object_dict]

    except Exception:
        pass

    try:
        main_structure_dict = [x for x in main_structure_dict if x not in subject_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in predicate_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in object_dict]
    except Exception:
        pass

    # print("s", subject_dict)
    # print("p", predicate_dict)
    # print("o", object_dict)

    try:
        if len(subject_dict) == 0 and len(predicate_dict) == 0 and main_structure_dict != main_structure_dict_del_conj:
            main_strucutre_dict = copy.deepcopy(main_structure_dict_del_conj)
            subject_dict = []
            predicate_dict = []
            object_dict = []
            for i in main_structure_dict:
                if i[0][3::] in dot_dict:
                    main_structure_dict.remove(i)

        main_rest = copy.deepcopy(main_structure_dict)

        if len(subject_dict) != 0 and len(predicate_dict) != 0:
            return "s", subject_dict, "p", predicate_dict, "o", object_dict, "adj", adj, "adv", adv, "complement", complement, "conj", conj_dict, "main_rest", main_rest

    except Exception:
        pass

    #print("Backbone12", main_structure_dict)

    #13.处理时间地点做宾语结构
    index_subject_content = []
    index_predicate_content = []
    index_object_content = []
    index_subject = 0
    index_predicate = 0
    index_object = 0
    try:
        for i in main_structure_dict:
            if (i[1][2:8] == "000001" or i[1][9:15] == "000001" or i[1][16:22] == "000001" or i[1][23:29] == "000001" or
                    i[1][30:36] == "000001"):
                index_v_tp_asobject = main_structure_dict.index(i)
                if (main_structure_dict[index_v_tp_asobject + 1][1][2:8] in ["110000", "111011"] or
                    main_structure_dict[index_v_tp_asobject + 1][1][9:15] in ["110000", "111011"] or
                    main_structure_dict[index_v_tp_asobject + 1][1][16:22] in ["110000", "111011"] or
                    main_structure_dict[index_v_tp_asobject + 1][1][23:29] in ["110000", "111011"] or
                    main_structure_dict[index_v_tp_asobject + 1][1][30:36] in ["110000", "111011"]) and (
                        main_structure_dict[index_v_tp_asobject - 1][1][2:8] in ["000111", "000100"] or
                        main_structure_dict[index_v_tp_asobject - 1][1][9:15] in ["000111", "000100"] or
                        main_structure_dict[index_v_tp_asobject - 1][1][16:22] in ["000111", "000100"] or
                        main_structure_dict[index_v_tp_asobject - 1][1][23:29] in ["000111", "000100"] or
                        main_structure_dict[index_v_tp_asobject - 1][1][30:36] in ["000111", "000100"]):
                    subject_dict = main_structure_dict[0:index_v_tp_asobject]
                    index_subject_content = subject_dict[0]
                    index_subject = mark_dict_backup.index(index_subject_content)
                    subject_dict.append(index_subject)
                    predicate_dict = main_structure_dict[index_v_tp_asobject:index_v_tp_asobject + 1]
                    index_predicate_content = predicate_dict[0]
                    index_predicate = mark_dict_backup.index(index_predicate_content)
                    predicate_dict.append(index_predicate)
                    object_dict = main_structure_dict[index_v_tp_asobject + 1::]
                    index_object_content = object_dict[0]
                    index_object = mark_dict_backup.index(index_object_content)
                    object_dict.append(index_object)
                elif (main_structure_dict[index_v_tp_asobject + 1][1][2:8] == "110011" or
                      main_structure_dict[index_v_tp_asobject + 1][1][9:15] == "110011" or
                      main_structure_dict[index_v_tp_asobject + 1][1][16:22] == "110011" or
                      main_structure_dict[index_v_tp_asobject + 1][1][23:29] == "110011" or
                      main_structure_dict[index_v_tp_asobject + 1][1][30:36] == "110011") and (
                        main_structure_dict[index_v_tp_asobject + 2][1][2:8] in ["110000", "111011"] or
                        main_structure_dict[index_v_tp_asobject + 2][1][9:15] in ["110000", "111011"] or
                        main_structure_dict[index_v_tp_asobject + 2][1][16:22] in ["110000", "111011"] or
                        main_structure_dict[index_v_tp_asobject + 2][1][23:29] in ["110000", "111011"] or
                        main_structure_dict[index_v_tp_asobject + 2][1][30:36] in ["110000", "111011"]
                ) and (
                        main_structure_dict[index_v_tp_asobject - 1][1][2:8] in ["000111", "000100"] or
                        main_structure_dict[index_v_tp_asobject - 1][1][9:15] in ["000111", "000100"] or
                        main_structure_dict[index_v_tp_asobject - 1][1][16:22] in ["000111", "000100"] or
                        main_structure_dict[index_v_tp_asobject - 1][1][23:29] in ["000111", "000100"] or
                        main_structure_dict[index_v_tp_asobject - 1][1][30:36] in ["000111", "000100"]):
                    subject_dict = main_structure_dict[0:index_v_tp_asobject]
                    index_subject_content = subject_dict[0]
                    index_subject = mark_dict_backup.index(index_subject_content)
                    subject_dict.append(index_subject)
                    predicate_dict = main_structure_dict[index_v_tp_asobject:index_v_tp_asobject + 2]
                    index_predicate_content = predicate_dict[0]
                    index_predicate = mark_dict_backup.index(index_predicate_content)
                    predicate_dict.append(index_predicate)
                    object_dict = main_structure_dict[index_v_tp_asobject + 2::]
                    index_object_content = object_dict[0]
                    index_object = mark_dict_backup.index(index_object_content)
                    object_dict.append(index_object)
    except Exception:
        pass

    try:
        if len(subject_dict) == 2 and len(subject_dict[1]) == 36:
            subject_dict = [subject_dict]

        if len(predicate_dict) == 2 and len(predicate_dict[1]) == 36:
            predicate_dict = [predicate_dict]

        if len(object_dict) == 2 and len(object_dict[1]) == 36:
            object_dict = [object_dict]
    except Exception:
        pass

    # print("s", subject_dict)
    # print("p", predicate_dict)
    # print("o", object_dict)

    try:
        main_structure_dict = [x for x in main_structure_dict if x not in subject_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in predicate_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in object_dict]
    except Exception:
        pass

    try:
        if len(subject_dict) == 0 and len(predicate_dict) == 0 and main_structure_dict != main_structure_dict_del_conj:
            main_strucutre_dict = copy.deepcopy(main_structure_dict_del_conj)
            subject_dict = []
            predicate_dict = []
            object_dict = []
            for i in main_structure_dict:
                if i[0][3::] in dot_dict:
                    main_structure_dict.remove(i)

        main_rest = copy.deepcopy(main_structure_dict)

        if len(subject_dict) != 0 and len(predicate_dict) != 0:
            return "s", subject_dict, "p", predicate_dict, "o", object_dict, "adj", adj, "adv", adv, "complement", complement, "conj", conj_dict, "main_rest", main_rest

    except Exception:
        pass

    #print("Backbone13", main_structure_dict)

    # 14. 时间地点状语替代主语
    index_subject_content = []
    index_predicate_content = []
    index_object_content = []
    index_subject = 0
    index_object = 0
    index_predicate = 0
    try:
        for i in main_structure_dict:
            index_backbone_tp_subject = main_structure_dict.index(i)
            if (i[1][2:8] in ["110000", "111011", "010111"] or i[1][9:15] in ["110000", "111011", "010111"] or i[1][
                                                                                                               16:22] in [
                    "110000", "111011", "010111"] or i[1][23:29] in ["110000", "111011", "010111"] or i[1][30:36] in [
                    "110000", "111011", "010111"]) and (
                    main_structure_dict[index_backbone_tp_subject + 2][1][2:8] == "000001" or
                    main_structure_dict[index_backbone_tp_subject + 2][1][9:15] == "000001" or
                    main_structure_dict[index_backbone_tp_subject + 2][1][16:22] == "000001" or
                    main_structure_dict[index_backbone_tp_subject + 2][1][23:29] == "000001" or
                    main_structure_dict[index_backbone_tp_subject + 2][1][30:36] == "000001") and (
                    main_structure_dict[index_backbone_tp_subject + 1][1][2:8] == "110101" or
                    main_structure_dict[index_backbone_tp_subject + 1][1][9:15] == "110101" or
                    main_structure_dict[index_backbone_tp_subject + 1][1][16:22] == "110101" or
                    main_structure_dict[index_backbone_tp_subject + 1][1][23:29] == "110101" or
                    main_structure_dict[index_backbone_tp_subject + 1][1][30:36] == "110101"):
                predicate_dict = main_structure_dict[index_backbone_tp_subject + 1:index_backbone_tp_subject + 3]
                index_predicate_content = predicate_dict[0]
                index_predicate = mark_dict_backup.index(index_predicate_content)
                predicate_dict.append(index_predicate)
                subject_dict = main_structure_dict[index_backbone_tp_subject:index_backbone_tp_subject + 1]
                index_subject_content = subject_dict[0]
                index_subject = mark_dict_backup.index(index_subject_content)
                subject_dict.append(index_subject)
                object_dict = main_structure_dict[index_backbone_tp_subject + 3::]
                index_object_content = object_dict[0]
                index_object = mark_dict_backup.index(index_object_content)
                object_dict.append(index_object)
                # print("test1")
            elif (i[1][2:8] in ["110000", "111011", "010111"] or i[1][9:15] in ["110000", "111011", "010111"] or i[1][
                                                                                                                 16:22] in [
                      "110000", "111011", "010111"] or i[1][23:29] in ["110000", "111011", "010111"] or i[1][30:36] in [
                      "110000", "111011", "010111"]) and (
                    main_structure_dict[index_backbone_tp_subject + 1][1][2:8] == "000001" or
                    main_structure_dict[index_backbone_tp_subject + 1][1][9:15] == "000001" or
                    main_structure_dict[index_backbone_tp_subject + 1][1][16:22] == "000001" or
                    main_structure_dict[index_backbone_tp_subject + 1][1][23:29] == "000001" or
                    main_structure_dict[index_backbone_tp_subject + 1][1][30:36] == "000001") and (
                    main_structure_dict[index_backbone_tp_subject + 2][1][2:8] == "110101" or
                    main_structure_dict[index_backbone_tp_subject + 2][1][9:15] == "110101" or
                    main_structure_dict[index_backbone_tp_subject + 2][1][16:22] == "110101" or
                    main_structure_dict[index_backbone_tp_subject + 2][1][23:29] == "110101" or
                    main_structure_dict[index_backbone_tp_subject + 2][1][30:36] == "110101"):
                predicate_dict = main_structure_dict[index_backbone_tp_subject + 1:index_backbone_tp_subject + 3]
                index_predicate_content = predicate_dict[0]
                index_predicate = mark_dict_backup.index(index_predicate_content)
                predicate_dict.append(index_predicate)
                subject_dict = main_structure_dict[index_backbone_tp_subject:index_backbone_tp_subject + 1]
                index_subject_content = subject_dict[0]
                index_subject = mark_dict_backup.index(index_subject_content)
                subject_dict.append(index_subject)
                object_dict = main_structure_dict[index_backbone_tp_subject + 3::]
                index_object_content = object_dict[0]
                index_object = mark_dict_backup.index(index_object_content)
                object_dict.append(index_object)
                # print("test2")
            elif (i[1][2:8] in ["110000", "111011", "010111"] or i[1][9:15] in ["110000", "111011", "010111"] or i[1][
                                                                                                                 16:22] in [
                      "110000", "111011", "010111"] or i[1][23:29] in ["110000", "111011", "010111"] or i[1][30:36] in [
                      "110000", "111011", "010111"]) and (
                    main_structure_dict[index_backbone_tp_subject + 1][1][2:8] == "000001" or
                    main_structure_dict[index_backbone_tp_subject + 1][1][9:15] == "000001" or
                    main_structure_dict[index_backbone_tp_subject + 1][1][16:22] == "000001" or
                    main_structure_dict[index_backbone_tp_subject + 1][1][23:29] == "000001" or
                    main_structure_dict[index_backbone_tp_subject + 1][1][30:36] == "000001") and (
                    main_structure_dict[index_backbone_tp_subject + 2][1][2:8] != "110101" and
                    main_structure_dict[index_backbone_tp_subject + 2][1][9:15] != "110101" and
                    main_structure_dict[index_backbone_tp_subject + 2][1][16:22] != "110101" and
                    main_structure_dict[index_backbone_tp_subject + 2][1][23:29] != "110101" and
                    main_structure_dict[index_backbone_tp_subject + 2][1][30:36] != "110101") and (
                    main_structure_dict[index_backbone_tp_subject - 1][1][2:8] not in ["000100", "000111", "010111"] and
                    main_structure_dict[index_backbone_tp_subject - 1][1][9:15] not in ["000100", "000111",
                                                                                        "010111"] and
                    main_structure_dict[index_backbone_tp_subject - 1][1][16:22] not in ["000100", "000111",
                                                                                         "010111"] and
                    main_structure_dict[index_backbone_tp_subject - 1][1][23:29] not in ["000100", "000111",
                                                                                         "010111"] and
                    main_structure_dict[index_backbone_tp_subject - 1][1][30:36] not in ["000100", "000111", "010111"]):
                predicate_dict = main_structure_dict[index_backbone_tp_subject + 1:index_backbone_tp_subject + 2]
                index_predicate_content = predicate_dict[0]
                index_predicate = mark_dict_backup.index(index_predicate_content)
                predicate_dict.append(index_predicate)
                subject_dict = main_structure_dict[index_backbone_tp_subject:index_backbone_tp_subject + 1]
                index_subject_content = subject_dict[0]
                index_subject = mark_dict_backup.index(index_subject_content)
                subject_dict.append(index_subject)
                object_dict = main_structure_dict[index_backbone_tp_subject + 2::]
                index_object_content = object_dict[0]
                index_object = mark_dict_backup.index(index_object_content)
                object_dict.append(index_object)
                # print("test3", subject_dict)
            elif (i[1][2:8] in ["110000", "111011", "010111"] or i[1][9:15] in ["110000", "111011", "010111"] or i[1][
                                                                                                                 16:22] in [
                      "110000", "111011", "010111"] or i[1][23:29] in ["110000", "111011", "010111"] or i[1][30:36] in [
                      "110000", "111011", "010111"]) and (
                    main_structure_dict[index_backbone_tp_subject + 1][1][2:8] == "000001" or
                    main_structure_dict[index_backbone_tp_subject + 1][1][9:15] == "000001" or
                    main_structure_dict[index_backbone_tp_subject + 1][1][16:22] == "000001" or
                    main_structure_dict[index_backbone_tp_subject + 1][1][23:29] == "000001" or
                    main_structure_dict[index_backbone_tp_subject + 1][1][30:36] == "000001") and (
                    main_structure_dict[index_backbone_tp_subject + 2][1][2:8] != "110101" and
                    main_structure_dict[index_backbone_tp_subject + 2][1][9:15] != "110101" and
                    main_structure_dict[index_backbone_tp_subject + 2][1][16:22] != "110101" and
                    main_structure_dict[index_backbone_tp_subject + 2][1][23:29] != "110101" and
                    main_structure_dict[index_backbone_tp_subject + 2][1][30:36] != "110101") and (
                    main_structure_dict[index_backbone_tp_subject - 1][1][2:8] in ["000100", "000111", "010111"] or
                    main_structure_dict[index_backbone_tp_subject - 1][1][9:15] in ["000100", "000111", "010111"] or
                    main_structure_dict[index_backbone_tp_subject - 1][1][16:22] in ["000100", "000111", "010111"] or
                    main_structure_dict[index_backbone_tp_subject - 1][1][23:29] in ["000100", "000111", "010111"] or
                    main_structure_dict[index_backbone_tp_subject - 1][1][30:36] in ["000100", "000111",
                                                                                     "010111"]) and (
                    main_structure_dict[index_backbone_tp_subject - 1][1][2:8] != "000001" and
                    main_structure_dict[index_backbone_tp_subject - 1][1][9:15] != "000001" and
                    main_structure_dict[index_backbone_tp_subject - 1][1][16:22] != "000001" and
                    main_structure_dict[index_backbone_tp_subject - 1][1][23:29] != "000001" and
                    main_structure_dict[index_backbone_tp_subject - 1][1][30:36] != "000001"):
                predicate_dict = main_structure_dict[index_backbone_tp_subject + 1:index_backbone_tp_subject + 2]
                index_predicate_content = predicate_dict[0]
                index_predicate = mark_dict_backup.index(index_predicate_content)
                predicate_dict.append(index_predicate)
                subject_dict = main_structure_dict[index_backbone_tp_subject - 1:index_backbone_tp_subject + 1]
                index_subject_content = subject_dict[0]
                index_subject = mark_dict_backup.index(index_subject_content)
                subject_dict.append(index_subject)
                object_dict = main_structure_dict[index_backbone_tp_subject + 2::]
                index_object_content = object_dict[0]
                index_object = mark_dict_backup.index(index_object_content)
                object_dict.append(index_object)
                # print("test4", i)
    except Exception:
        pass

    try:
        main_structure_dict = [x for x in main_structure_dict if x not in predicate_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in subject_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in object_dict]
    except Exception:
        pass

    # print("subject_dict", subject_dict)
    # print("predicate_dict", predicate_dict)
    # print("object_dict", object_dict)

    try:
        if (len(predicate_dict) == 0 or len(subject_dict) == 0 or len(object_dict) == 0) and (
                main_structure_dict != main_structure_dict_del_conj):
            main_structure_dict = copy.deepcopy(main_structure_dict_del_conj)
            predicate_dict = []
            subject_dict = []
            object_dict = []
            for i in main_structure_dict:
                if i[0][3::] in dot_dict:
                    main_structure_dict.remove(i)

        main_rest = copy.deepcopy(main_structure_dict)

        if len(subject_dict) != 0 and len(predicate_dict) != 0:
            return "s", subject_dict, "p", predicate_dict, "o", object_dict, "adj", adj, "adv", adv, "complement", complement, "conj", conj_dict, "main_rest", main_rest

    except Exception:
        pass

    #print("Backbone14", main_structure_dict)

    #15.处理"是...的"结构的主谓结构
    index_subject_content = []
    index_predicate_content = []
    index_object_content = []
    index_subject = 0
    index_predicate = 0
    index_object = 0
    try:
        for i in main_structure_dict:
            index_backbone_be = main_structure_dict.index(i)
            if (i[0][3::] in ["是", "就是", "便是", "正是", "而是", "成了", "好像", "好象"])\
                    and (main_structure_dict[index_backbone_be + 1][0][3::] != "否")\
                    and (main_structure_dict[-1][0][3::] == "的") and (main_structure_dict[index_backbone_be - 1][1][2:8] not in ["000110", "110101"] and
                     main_structure_dict[index_backbone_be - 1][1][9:15] not in ["000110", "110101"] and
                     main_structure_dict[index_backbone_be - 1][1][16:22] not in ["000110", "110101"] and
                     main_structure_dict[index_backbone_be - 1][1][23:29] not in ["000110", "110101"] and
                     main_structure_dict[index_backbone_be - 1][1][30:36] not in ["000110", "110101"]):
                predicate_dict = main_structure_dict[index_backbone_be:index_backbone_be +1]
                index_predicate_content = predicate_dict[0]
                index_predicate = mark_dict_backup.index(index_predicate_content)
                predicate_dict.append(index_predicate)
                index_backbone_be = main_structure_dict.index(i)
                object_dict = main_structure_dict[index_backbone_be+1::]
                index_object_content = object_dict[0]
                index_object = mark_dict_backup.index(index_object_content)
                object_dict.append(index_object)
                subject_dict = main_structure_dict[0:index_backbone_be]
                index_subject_content = subject_dict[0]
                index_subject = mark_dict_backup.index(index_subject_content)
                subject_dict.append(index_subject)
                #print("1ok")
            elif (i[0][3::] in ["是", "就是", "便是", "正是", "而是", "成了", "好像", "好象"]) \
                    and (main_structure_dict[index_backbone_be + 1][0][3::] != "否") \
                    and (main_structure_dict[-1][0][3::] == "的")\
                    and (main_structure_dict[index_backbone_be - 1][1][2:8] in ["000110", "110101"] or
                    main_structure_dict[index_backbone_be - 1][1][9:15] in ["000110", "110101", "010111"] or
                    main_structure_dict[index_backbone_be - 1][1][16:22] in ["000110", "110101", "010111"] or
                    main_structure_dict[index_backbone_be - 1][1][23:29] in ["000110", "110101", "010111"] or
                    main_structure_dict[index_backbone_be - 1][1][30:36] in ["000110", "110101", "010111"]):
                predicate_dict = main_structure_dict[index_backbone_be-1:index_backbone_be + 1]
                index_predicate_content = predicate_dict[0]
                index_predicate = mark_dict_backup.index(index_predicate_content)
                predicate_dict.append(index_predicate)
                index_backbone_be = main_structure_dict.index(i)
                object_dict = main_structure_dict[index_backbone_be + 1::]
                index_object_content = object_dict[0]
                index_object = mark_dict_backup.index(index_object_content)
                object_dict.append(index_object)
                subject_dict = main_structure_dict[0:index_backbone_be]
                index_subject_content = subject_dict[0]
                index_subject = mark_dict_backup.index(index_subject_content)
                subject_dict.append(index_subject)
                #print("2ok")
            elif (i[0][3::] in ["是", "就是", "便是", "正是", "而是", "成了", "好像", "好象"])\
                    and (main_structure_dict[index_backbone_be + 1][0][3::] != "否")  and (
                     main_structure_dict[index_backbone_be - 1][1][9:15] not in ["000110", "110101"] and
                     main_structure_dict[index_backbone_be - 1][1][16:22] not in ["000110", "110101"] and
                     main_structure_dict[index_backbone_be - 1][1][23:29] not in ["000110", "110101"] and
                     main_structure_dict[index_backbone_be - 1][1][30:36] not in ["000110", "110101"]):
                index_backbone_be = main_structure_dict.index(i)
                predicate_dict = main_structure_dict[index_backbone_be:index_backbone_be +1]
                index_predicate_content = predicate_dict[0]
                index_predicate = mark_dict_backup.index(index_predicate_content)
                predicate_dict.append(index_predicate)
                index_backbone_be = main_structure_dict.index(i)
                object_dict = main_structure_dict[index_backbone_be+1::]
                index_object_content = object_dict[0]
                index_object = mark_dict_backup.index(index_object_content)
                object_dict.append(index_object)
                subject_dict = main_structure_dict[index_backbone_be - 1:index_backbone_be]
                index_subject_content = subject_dict[0]
                index_subject = mark_dict_backup.index(index_subject_content)
                subject_dict.append(index_subject)
                #print("3ok")
            elif (i[0][3::] in ["是", "就是", "便是", "正是", "而是", "成了", "好像", "好象"])\
                    and (main_structure_dict[index_backbone_be + 1][0][3::] != "否")  and (main_structure_dict[index_backbone_be - 1][1][9:15] in ["000110", "110101"] or
                         main_structure_dict[index_backbone_be - 1][1][16:22] in ["000110", "110101"] or
                         main_structure_dict[index_backbone_be - 1][1][23:29] in ["000110", "110101"] or
                         main_structure_dict[index_backbone_be - 1][1][30:36] in ["000110", "110101"]):
                index_backbone_be = main_structure_dict.index(i)
                predicate_dict = main_structure_dict[index_backbone_be-1:index_backbone_be +1]
                index_predicate_content = predicate_dict[0]
                index_predicate = mark_dict_backup.index(index_predicate_content)
                predicate_dict.append(index_predicate)
                index_backbone_be = main_structure_dict.index(i)
                object_dict = main_structure_dict[index_backbone_be+1::]
                index_object_content = object_dict[0]
                index_object = mark_dict_backup.index(index_object_content)
                object_dict.append(index_object)
                subject_dict = main_structure_dict[0:index_backbone_be]
                index_subject_content = subject_dict[0]
                index_subject = mark_dict_backup.index(index_subject_content)
                subject_dict.append(index_subject)
                #print("4ok")
            elif (i[0][3::] in ["是", "就是", "便是", "正是", "而是", "成了", "好像", "好象"]) and (main_structure_dict[index_backbone_be + 1][0][3::] !="否") and (main_structure_dict[index_backbone_be - 1][1][9:15] not in ["000110", "110101"] and
                     main_structure_dict[index_backbone_be - 1][1][16:22] not in ["000110", "110101"] and
                     main_structure_dict[index_backbone_be - 1][1][23:29] not in ["000110", "110101"] and
                     main_structure_dict[index_backbone_be - 1][1][30:36] not in ["000110", "110101"]):
                predicate_dict = main_structure_dict[index_backbone_be:index_backbone_be +1]
                index_predicate_content = predicate_dict[0]
                index_predicate = mark_dict_backup.index(index_predicate_content)
                predicate_dict.append(index_predicate)
                index_backbone_be = main_structure_dict.index(i)
                object_dict = main_structure_dict[index_backbone_be+1::]
                index_object_content = object_dict[0]
                index_object = mark_dict_backup.index(index_object_content)
                object_dict.append(index_object)
                subject_dict = main_structure_dict[0:index_backbone_be]
                index_subject_content = subject_dict[0]
                index_subject = mark_dict_backup.index(index_subject_content)
                subject_dict.append(index_subject)
                #print("5ok")
            elif (i[0][3::] in ["是", "就是", "便是", "正是", "而是", "成了", "好像", "好象"]) and (main_structure_dict[index_backbone_be + 1][0][3::] !="否") and (main_structure_dict[index_backbone_be - 1][1][9:15] in ["000110", "110101"] or
                         main_structure_dict[index_backbone_be - 1][1][16:22] in ["000110", "110101"] or
                         main_structure_dict[index_backbone_be - 1][1][23:29] in ["000110", "110101"] or
                         main_structure_dict[index_backbone_be - 1][1][30:36] in ["000110", "110101"]):
                predicate_dict = main_structure_dict[index_backbone_be-1:index_backbone_be +1]
                index_predicate_content = predicate_dict[0]
                index_predicate = mark_dict_backup.index(index_predicate_content)
                predicate_dict.append(index_predicate)
                index_backbone_be = main_structure_dict.index(i)
                object_dict = main_structure_dict[index_backbone_be+1::]
                index_object_content = object_dict[0]
                index_object = mark_dict_backup.index(index_object_content)
                object_dict.append(index_object)
                subject_dict = main_structure_dict[index_backbone_be - 1:index_backbone_be]
                index_subject_content = subject_dict[0]
                index_subject = mark_dict_backup.index(index_subject_content)
                subject_dict.append(index_subject)
                #print("6ok")
    except Exception:
        pass

    try:
        if len(subject_dict) == 2 and len(subject_dict[1]) == 36:
            subject_dict = [subject_dict]

        if len(predicate_dict) == 2 and len(predicate_dict[1]) == 36:
            predicate_dict = [predicate_dict]

        if len(object_dict) == 2 and len(object_dict[1]) == 36:
            object_dict = [object_dict]
    except Exception:
        pass

    try:
        main_structure_dict = [x for x in main_structure_dict if x not in subject_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in predicate_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in object_dict]
    except Exception:
        pass

    index_i = 0

    #print("subject_dict[0:-1]", subject_dict[0:-1])

    if len(subject_dict) > 0:
        for i in subject_dict[0:-1]:
            index_i = subject_dict.index(i)
            if i[1][2:8] == "000001" or i[1][9:15] == "000001" or i[1][16:22] == "000001" or i[1][23:29] == "000001" or i[1][30:36] == "000001":
                predicate_in_subjectclause_dict = subject_dict[index_i:index_i+1]
                index_p_in_sc_content = predicate_in_subjectclause_dict[-1]
                index_p_in_sc = mark_dict_backup.index(index_p_in_sc_content)
                predicate_in_subjectclause_dict.append(index_p_in_sc)
                object_in_subjectclause_dict = subject_dict[index_i+1:-1]
                index_o_in_sc_content = object_in_subjectclause_dict[-1]
                index_o_in_sc = mark_dict_backup.index(index_o_in_sc_content)
                object_in_subjectclause_dict.append(index_o_in_sc)
                predicate_subjectclause_dict = copy.deepcopy(predicate_dict)
                predicate_dict = []
                #print("p", predicate_dict)
                object_subjectclause_dict = copy.deepcopy(object_dict)
                object_dict = []
                #print("o", object_dict)
                if index_i != 0:
                    subject_in_subjectclause_dict = subject_dict[0:index_i]
                    index_s_in_sc_content = subject_in_subjectclause_dict[-1]
                    index_s_in_sc = mark_dict_backup.index(index_s_in_sc_content)
                    subject_in_subjectclause_dict.append(index_s_in_sc)
                    subject_dict = []
                    #print("s", subject_dict)
                    break

    # print("s_in_sc", subject_in_subjectclause_dict)
    # print("p_in_sc", predicate_in_subjectclause_dict)
    # print("o_in_sc", object_in_subjectclause_dict)
    # print("p_sc", predicate_subjectclause_dict)
    # print("o_sc", object_subjectclause_dict)
    # print("p", predicate_dict)
    # print("o", object_dict)

    try:
        if (len(subject_dict) == 0 or len(predicate_dict) == 0 or len(object_dict) == 0) and (main_structure_dict != main_structure_dict_del_conj):
            main_structure_dict = copy.deepcopy(main_structure_dict_del_conj)
            subject_dict = []
            predicate_dict = []
            object_dict = []
            for i in main_structure_dict:
                if i[0][3::] in dot_dict:
                    main_structure_dict.remove(i)

        main_rest = copy.deepcopy(main_structure_dict)

        if len(subject_dict) != 0 and len(predicate_dict) != 0 and len(object_dict) != 0:
            return "s", subject_dict, "p", predicate_dict, "o", object_dict, "adj", adj, "adv", adv, "complement", complement, "conj", conj_dict, "main_rest", main_rest
        elif len(predicate_in_subjectclause_dict) != 0 and len(predicate_subjectclause_dict) != 0:
            return "s_in_sc", subject_in_subjectclause_dict, "p_in_sc", predicate_in_subjectclause_dict, "o_in_sc", object_in_subjectclause_dict, "p_sc", predicate_subjectclause_dict, "o_sc", object_subjectclause_dict, "main_rest", main_rest

    except Exception:
        pass

    #print("Backbone15", main_structure_dict)

    #16.处理带情态动词的主谓结构
    index_subject_content = []
    index_modal_content = []
    index_predicate_content = []
    index_object_content = []
    index_subject = 0
    index_modal = 0
    index_predicate = 0
    index_object = 0
    try:
        for i in main_structure_dict:
            index_backbone_modal = main_structure_dict.index(i)
            #print(index_backbone_modal)
            if (i[1][2:8] == "110101" or i[1][9:15] == "110101" or i[1][16:22] == "110101" or i[1][23:29] == "110101" or i[1][30:36] == "110101") and (
            i[0][3::] in ["给", "使", "让", "受", "受到", "被", "遭到", "会", "想", "想要", "要", "敢于", "勇于", "做出", "拼命"]):
                modal_verb_dict = main_structure_dict[index_backbone_modal:index_backbone_modal+1]
                index_backbone_modal = main_structure_dict.index(i)
                modal_verb_conclusion = main_structure_dict[index_backbone_modal+1::]
                index_modal_content = modal_verb_dict[0]
                index_modal = mark_dict_backup.index(index_modal_content)
                modal_verb_dict.append(index_modal)
                if (main_structure_dict[index_backbone_modal - 1][1][2:8] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_backbone_modal - 1][1][9:15] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_backbone_modal - 1][1][16:22] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_backbone_modal - 1][1][23:29] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_backbone_modal - 1][1][30:36] in ["000111", "000100", "010111"]) and index_backbone_modal-1 == 0:
                    if len(subject_dict) == 0:
                        subject_dict = main_structure_dict[index_backbone_modal - 1:index_backbone_modal]
                        index_subject_content = subject_dict[0]
                        index_subject = mark_dict_backup.index(index_subject_content)
                        subject_dict.append(index_subject)
                        if (index_backbone_modal - 2 > 0) and (main_structure_dict[index_backbone_modal - 2][1][2:8] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_backbone_modal - 2][1][9:15] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_backbone_modal - 2][1][16:22] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_backbone_modal - 2][1][23:29] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_backbone_modal - 2][1][30:36] in ["000111", "000100", "010111"]):
                            subject_dict = main_structure_dict[index_backbone_modal - 2:index_backbone_modal]
                            index_subject_content = subject_dict[0]
                            index_subject = mark_dict_backup.index(index_subject_content)
                            subject_dict.append(index_subject)
    except Exception:
        pass

    try:
        for i in modal_verb_conclusion:
            index_backbone_modal_end = modal_verb_conclusion.index(i)
            if i[0][3::] == "去":
                for j in modal_verb_conclusion:
                    if j[0][3::] == i[0][3::] and i != j:
                        modal_verb_conclusion.remove(j)
                index_backbone_modal_end = modal_verb_conclusion.index(i)
                if (modal_verb_conclusion[index_backbone_modal_end + 1][1][2:8] == "000001" or
                    modal_verb_conclusion[index_backbone_modal_end + 1][1][9:15] == "000001" or
                    modal_verb_conclusion[index_backbone_modal_end + 1][1][16:22] == "000001" or
                    modal_verb_conclusion[index_backbone_modal_end + 1][1][23:29] == "000001" or
                    modal_verb_conclusion[index_backbone_modal_end + 1][1][30:36] == "000001"):
                    predicate_dict = modal_verb_conclusion[index_backbone_modal_end:index_backbone_modal_end + 2]
                    index_predicate_content = predicate_dict[0]
                    index_predicate = mark_dict_backup.index(index_predicate_content)
                    predicate_dict.append(index_predicate)
                    object_dict = modal_verb_conclusion[index_backbone_modal_end+2::]
                    index_object_content = object_dict[0]
                    index_object = mark_dict_backup.index(index_object_content)
                    object_dict.append(index_object)
                    break
            elif i[1][2:8] == "000001" or i[1][9:15] == "000001" or i[1][16:22] == "000001" or \
                    i[1][23:29] == "000001" or i[1][30:36] == "000001" and i[0][3:] != "去":
                predicate_dict = modal_verb_conclusion[index_backbone_modal_end:index_backbone_modal_end+1]
                index_predicate_content = predicate_dict[0]
                index_predicate = mark_dict_backup.index(index_predicate_content)
                predicate_dict.append(index_predicate)
                for j in modal_verb_conclusion:
                    if j[0][3::] == i[0][3::] and i != j:
                        modal_verb_conclusion.remove(j)
                index_backbone_modal_end = modal_verb_conclusion.index(i)
                object_dict = modal_verb_conclusion[index_backbone_modal_end + 1::]
                index_object_content = object_dict[0]
                index_object = mark_dict_backup.index(index_object_content)
                object_dict.append(index_object)
            elif (i[1][2:8] == "000101" or i[1][9:15] == "000101" or i[1][16:22] == "000101" or i[1][23:29] == "000101" or i[1][30:36] == "000101"):
                predicate_dict = modal_verb_conclusion[index_backbone_modal:index_backbone_modal+1]
                index_predicate_content = predicate_dict[0]
                index_predicate = mark_dict_backup.index(index_predicate_content)
                predicate_dict.append(index_predicate)
                object_dict = modal_verb_conclusion[index_backbone_modal_end::]
                index_object_content = object_dict[0]
                index_object = mark_dict_backup.index(index_object_content)
                object_dict.append(index_object)
    except Exception:
        pass

    try:

        if len(subject_dict) == 2 and len(subject_dict[1]) == 36:
            subject_dict = [subject_dict]

        if len(modal_verb_dict) == 2 and len(modal_verb_dict[1]) == 36:
            modal_verb_dict = [modal_verb_dict]

        if len(predicate_dict) == 2 and len(predicate_dict[1]) == 36:
            predicate_dict = [predicate_dict]

        if len(object_dict) == 2 and len(object_dict[1]) == 36:
            object_dict = [object_dict]

    except Exception:
        pass

    try:
        main_structure_dict = [x for x in main_structure_dict if x not in subject_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in modal_verb_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in predicate_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in object_dict]
    except Exception:
        pass

    #print("s", subject_dict)
    #print("m", modal_verb_dict)
    #print("p", predicate_dict)
    #print("o", object_dict)

    try:
        if (len(subject_dict) == 0 or len(modal_verb_dict) == 0 or len(predicate_dict) == 0) and (main_structure_dict != main_structure_dict_del_conj):
            main_structure_dict = copy.deepcopy(main_structure_dict_del_conj)
            subject_dict = []
            modal_verb_dict = []
            predicate_dict = []
            object_dict = []
            for i in main_structure_dict:
                if i[0][3::] in dot_dict:
                    main_structure_dict.remove(i)

        main_rest = copy.deepcopy(main_structure_dict)

        if len(subject_dict) !=0 and len(modal_verb_dict) and len(predicate_dict) != 0:
            return "s", subject_dict, "mv", modal_verb_dict, "p", predicate_dict, "o", object_dict, "adj", adj, "adv", adv, "complement", complement, "conj", conj_dict, "main_rest", main_rest

    except Exception:
        pass

    #print("Backbone16", main_structure_dict)

    #17.处理比较的主谓结构
    adv_compare_dict_p = []
    index_subject_content = []
    index_predicate_content = []
    index_object_content = []
    index_subject = 0
    index_object = 0
    try:
        for i in main_structure_dict:
            index_backbone_compare = main_structure_dict.index(i)
            if (i[1][2:8] == "000001" or i[1][9:15] == "000001" or i[1][16:22] == "000001" or i[1][23:29] == "000001" or i[1][30:36] == "000001") and i[0][3:] in ["比", "远比"]:
                index_backbone_compare = main_structure_dict.index(i)
                adv_compare_dict_p = main_structure_dict[index_backbone_compare::]
                #print("adv_1", adv_compare_dict_0)
                if (main_structure_dict[index_backbone_compare - 1][1][2:8] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_backbone_compare - 1][1][9:15] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_backbone_compare - 1][1][16:22] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_backbone_compare - 1][1][23:29] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_backbone_compare - 1][1][30:36] in ["000111", "000100", "010111"]) and (
                        main_structure_dict[index_backbone_compare - 2][1][2:8] in ["000111", "000100", "000101", "010111"] or
                        main_structure_dict[index_backbone_compare - 2][1][9:15] in ["000111", "000100", "000101", "010111"] or
                        main_structure_dict[index_backbone_compare - 2][1][16:22] in ["000111", "000100", "000101", "010111"] or
                        main_structure_dict[index_backbone_compare - 2][1][23:29] in ["000111", "000100", "000101", "010111"] or
                        main_structure_dict[index_backbone_compare - 2][1][30:36] in ["000111", "000100", "000101", "010111"]):
                    subject_dict = main_structure_dict[index_backbone_compare - 2:index_backbone_compare]
                    index_subject_content = subject_dict[0]
                    index_subject = mark_dict_backup.index(index_subject_content)
                    subject_dict.append(index_subject)
                    #print("1", subject_dict)
                    break
                elif (main_structure_dict[index_backbone_compare - 1][1][2:8] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_backbone_compare - 1][1][9:15] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_backbone_compare - 1][1][16:22] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_backbone_compare - 1][1][23:29] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_backbone_compare - 1][1][30:36] in ["000111", "000100", "010111"]):
                    subject_dict = main_structure_dict[index_backbone_compare - 1:index_backbone_compare]
                    index_subject_content = subject_dict[0]
                    index_subject = mark_dict_backup.index(index_subject_content)
                    subject_dict.append(index_subject)
                    #print("2", subject_dict)
                    break

        for i in adv_compare_dict_p:
            index_backbone_compare_end = adv_compare_dict_p.index(i)
            if i[0][3::] in ["还要", "要"]:
                index_backbone_compare_end = adv_compare_dict_0.index(i)
                adv_compare_dict = adv_compare_dict_p[0:index_backbone_compare_end]
                predicate_dict = adv_compare_dict_p[index_backbone_compare_end + 1::]
                index_predicate_content = predicate_dict[0]
                index_predicate = mark_dict_backup.index(index_predicate_content)
                predicate_dict.append(index_predicate)
            elif (i[1][2:8] == "000101" or i[1][9:15] == "000101" or i[1][16:22] == "000101" or i[1][23:29] == "000101" or i[1][30:36] == "000101") and \
                    adv_compare_dict_p[index_backbone_compare_end - 1][0][3::] not in ["还要", "要"]:
                index_backbone_compare_end = adv_compare_dict_p.index(i)
                adv_compare_dict = adv_compare_dict_p[0:index_backbone_compare_end]
                predicate_dict = adv_compare_dict_p[index_backbone_compare_end::]
                index_predicate_content = predicate_dict[0]
                index_predicate = mark_dict_backup.index(index_predicate_content)
                predicate_dict.append(index_predicate)
    except Exception:
        pass

    try:

        if len(subject_dict) == 2 and len(subject_dict[1]) == 36:
            subject_dict = [subject_dict]

        if len(adv_compare_dict) == 2 and len(adv_compare_dict[1]) == 36:
            adv_compare_dict = [adv_compare_dict]

        if len(predicate_dict) == 2 and len(predicate_dict[1]) == 36:
            predicate_dict = [predicate_dict]

    except Exception:
        pass

    try:
        main_structure_dict = [x for x in main_structure_dict if x not in subject_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in adv_compare_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in predicate_dict]
    except Exception:
        pass


    #print("s", subject_dict)
    #print("adv", adv_compare_dict)
    #print("p", predicate_dict)

    try:
        if (len(subject_dict) == 0 or len(adv_compare_dict) == 0 or len(predicate_dict) == 0) and (main_structure_dict != main_structure_dict_del_conj):
            main_structure_dict = copy.deepcopy(main_structure_dict_del_conj)
            subject_dict = []
            adv_compare_dict = []
            predicate_dict = []
            for i in main_structure_dict:
                if i[0][3::] in dot_dict:
                    main_structure_dict.remove(i)

        main_rest = copy.deepcopy(main_structure_dict)

        if len(subject_dict) !=0 and len(adv_compare_dict) and len(predicate_dict) != 0:
            return "s", subject_dict, "adv_compare", adv_compare_dict, "p", predicate_dict, "adj", adj, "adv", adv, "complement", complement, "conj", conj_dict, "main_rest", main_rest

    except Exception:
        pass

    #print("Backbone17", main_structure_dict)

    # 18.处理简单主谓宾结构“我看了电影”、“我吃饭”
    index_v_simple = 0
    index_subject_content = []
    index_predicate_content = []
    index_object_content = []
    index_subject = 0
    index_predicate = 0
    index_object = 0
    try:
        for i in main_structure_dict:
            if (i[1][2:8] in ["000001", "000101"] or i[1][9:15] in ["000001", "000101"] or i[1][16:22] in ["000001", "000101"] or i[1][23:29] in ["000001", "000101"] or
                    i[1][30:36] in ["000001", "000101"]):
                index_v_simple = main_structure_dict.index(i)
                if (main_structure_dict[index_v_simple + 1][1][2:8] in ["000111", "000100", "010111", "000010"] or
                    main_structure_dict[index_v_simple + 1][1][9:15] in ["000111", "000100", "010111", "000010"] or
                    main_structure_dict[index_v_simple + 1][1][16:22] in ["000111", "000100", "010111", "000010"] or
                    main_structure_dict[index_v_simple + 1][1][23:29] in ["000111", "000100", "010111", "000010"] or
                    main_structure_dict[index_v_simple + 1][1][30:36] in ["000111", "000100", "010111", "000010"]) and (
                        main_structure_dict[index_v_simple - 1][1][2:8] in ["000111", "000100", "010111", "000011"] or
                        main_structure_dict[index_v_simple - 1][1][9:15] in ["000111", "000100", "010111", "000011"] or
                        main_structure_dict[index_v_simple - 1][1][16:22] in ["000111", "000100", "010111", "000011"] or
                        main_structure_dict[index_v_simple - 1][1][23:29] in ["000111", "000100", "010111", "000011"] or
                        main_structure_dict[index_v_simple - 1][1][30:36] in ["000111", "000100", "010111", "000011"]) and (
                        main_structure_dict[index_v_simple - 1][1][2:8] not in ["111110", "110101", "000110"] and
                        main_structure_dict[index_v_simple - 1][1][9:15] not in ["111110", "110101", "000110"] and
                        main_structure_dict[index_v_simple - 1][1][16:22] not in ["111110", "110101", "000110"] and
                        main_structure_dict[index_v_simple - 1][1][23:29] not in ["111110", "110101", "000110"] and
                        main_structure_dict[index_v_simple - 1][1][30:36] not in ["111110", "110101", "000110"]):
                    subject_dict = main_structure_dict[index_v_simple - 1:index_v_simple]
                    index_subject_content = subject_dict[0]
                    index_subject = mark_dict_backup.index(index_subject_content)
                    subject_dict.append(index_subject)
                    predicate_dict = main_structure_dict[index_v_simple:index_v_simple + 1]
                    index_predicate = mark_dict_backup.index(predicate_dict[0])
                    predicate_dict.append(index_predicate)
                    object_dict = main_structure_dict[index_v_simple + 1::]
                    index_object_content = object_dict[0]
                    index_object = mark_dict_backup.index(index_object_content)
                    object_dict.append(index_object)
                    # print("1")
                elif (main_structure_dict_adv[index_v_simple + 1][1][2:8] in ["000111", "000100", "010111", "000010"] or
                      main_structure_dict[index_v_simple + 1][1][9:15] in ["000111", "000100", "010111", "000010"] or
                      main_structure_dict[index_v_simple + 1][1][16:22] in ["000111", "000100", "010111", "000010"] or
                      main_structure_dict[index_v_simple + 1][1][23:29] in ["000111", "000100", "010111", "000010"] or
                      main_structure_dict[index_v_simple + 1][1][30:36] in ["000111", "000100", "010111",
                                                                            "000010"]) and (
                        main_structure_dict[index_v_simple - 1][1][2:8] in ["110101", "000110", "000011"] or
                        main_structure_dict[index_v_simple - 1][1][9:15] in ["110101", "000110", "000011"] or
                        main_structure_dict[index_v_simple - 1][1][16:22] in ["110101", "000110", "000011"] or
                        main_structure_dict[index_v_simple - 1][1][23:29] in ["110101", "000110", "000011"] or
                        main_structure_dict[index_v_simple - 1][1][30:36] in ["110101", "000110", "000011"]) and (
                        main_structure_dict[index_v_simple - 2][1][2:8] in ["000111", "000100", "010111", "000010"] or
                        main_structure_dict[index_v_simple - 2][1][9:15] in ["000111", "000100", "010111", "000010"] or
                        main_structure_dict[index_v_simple - 2][1][16:22] in ["000111", "000100", "010111", "000010"] or
                        main_structure_dict[index_v_simple - 2][1][23:29] in ["000111", "000100", "010111", "000010"] or
                        main_structure_dict[index_v_simple - 2][1][30:36] in ["000111", "000100", "010111", "000010"]):
                    subject_dict = main_structure_dict[index_v_simple - 2:index_v_simple - 2]
                    index_subject_content = subject_dict[0]
                    index_subject = mark_dict_backup.index(index_subject_content)
                    subject_dict.append(index_subject)
                    predicate_dict = main_structure_dict[index_v_simple - 1:index_v_simple + 1]
                    index_predicate = mark_dict_backup.index(predicate_dict[0])
                    predicate_dict.append(index_predicate)
                    object_dict = main_structure_dict[index_v_simple + 1::]
                    index_object_content = object_dict[0]
                    index_object = mark_dict_backup.index(index_object_content)
                    object_dict.append(index_object)
                    # print("2")
                elif (main_structure_dict[index_v_simple + 1][1][2:8] in ["110101", "110011", "010111", "000010"] or
                      main_structure_dict[index_v_simple + 1][1][9:15] in ["110101", "110011", "010111", "000010"] or
                      main_structure_dict[index_v_simple + 1][1][16:22] in ["110101", "110011", "010111", "000010"] or
                      main_structure_dict[index_v_simple + 1][1][23:29] in ["110101", "110011", "010111", "000010"] or
                      main_structure_dict[index_v_simple + 1][1][30:36] in ["110101", "110011", "010111",
                                                                            "000010"]) and (
                        main_structure_dict[index_v_simple + 2][1][2:8] in ["000111", "000100", "010111", "000011"] or
                        main_structure_dict[index_v_simple + 2][1][9:15] in ["000111", "000100", "010111", "000011"] or
                        main_structure_dict[index_v_simple + 2][1][16:22] in ["000111", "000100", "010111", "000011"] or
                        main_structure_dict[index_v_simple + 2][1][23:29] in ["000111", "000100", "010111", "000011"] or
                        main_structure_dict[index_v_simple + 2][1][30:36] in ["000111", "000100", "010111",
                                                                              "000011"]) and (
                        main_structure_dict[index_v_simple - 1][1][2:8] in ["000111", "000100", "010111", "000011"] or
                        main_structure_dict[index_v_simple - 1][1][9:15] in ["000111", "000100", "010111", "000011"] or
                        main_structure_dict[index_v_simple - 1][1][16:22] in ["000111", "000100", "010111", "000011"] or
                        main_structure_dict[index_v_simple - 1][1][23:29] in ["000111", "000100", "010111", "000011"] or
                        main_structure_dict[index_v_simple - 1][1][30:36] in ["000111", "000100", "010111", "000011"]):
                    subject_dict = main_structure_dict[index_v_simple - 1:index_v_simple]
                    index_subject_content = subject_dict[0]
                    index_subject = mark_dict.index(index_subject_content)
                    subject_dict.append(index_subject)
                    predicate_dict = main_structure_dict[index_v_simple:index_v_simple + 2]
                    index_predicate_content = predicate_dict[0]
                    index_predicate = mark_dict_backup.index(index_predicate_content)
                    predicate_dict.append(index_predicate)
                    object_dict = main_structure_dict[index_v_simple + 2::]
                    index_object_content = object_dict[0]
                    index_object = mark_dict_backup.index(index_object_content)
                    object_dict.append(index_object)
                    # print("3")
    except Exception:
        pass

    try:
        if len(subject_dict) == 2 and len(subject_dict[1]) == 36:
            subject_dict = [subject_dict]

        if len(predicate_dict) == 2 and len(predicate_dict[1]) == 36:
            predicate_dict = [predicate_dict]

        if len(object_dict) == 2 and len(object_dict[1]) == 36:
            object_dict = [object_dict]
    except Exception:
        pass

    try:
        main_structure_dict = [x for x in main_structure_dict if x not in subject_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in predicate_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in object_dict]
    except Exception:
        pass

    # print("s", subject_dict)
    # print("p", predicate_dict)
    # print("o", object_dict)

    try:
        if len(subject_dict) == 0 and len(predicate_dict) == 0 and len(
                predicate_dict) == 0 and main_structure_dict != main_structure_dict_del_conj:
            main_strucutre_dict = copy.deepcopy(main_structure_dict_del_conj)
            subject_dict = []
            predicate_dict = []
            object_dict = []
            for i in main_structure_dict:
                if i[0][3::] in dot_dict:
                    main_structure_dict.remove(i)

        main_rest = copy.deepcopy(main_structure_dict)

        if len(subject_dict) != 0 and len(predicate_dict) != 0 and len(predicate_dict) != 0:
            return "s", subject_dict, "p", predicate_dict, "o", object_dict, "adj", adj, "adv", adv, "complement", complement, "conj", conj_dict, "main_rest", main_rest

    except Exception:
        pass

    #print("Backbone18", main_structure_dict)

    #19.处理（“很”，“不要太”)形容词/名（+"了"、“的”）直接做谓语
    remove_word = []
    index_subject_content = []
    index_predicate_content = []
    index_object_content = []
    index_subject = 0
    index_object = 0
    try:
        for i in main_structure_dict:
            index_adj_asverb = main_structure_dict.index(i)
            if (i[1][2:8] in ["000101", "000111", "010111"] or i[1][9:15] in ["000101", "000111", "010111"] or i[1][
                                                                                                               16:22] in [
                    "000101", "000111", "010111"] or
                i[1][23:29] in ["000101", "000111", "010111"] or i[1][30:36] in ["000101", "000111", "010111"]) and (
                    main_structure_dict[index_adj_asverb - 1][1][2:8] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_adj_asverb - 1][1][9:15] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_adj_asverb - 1][1][16:22] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_adj_asverb - 1][1][23:29] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_adj_asverb - 1][1][30:36] in ["000111", "000100", "010111"]) and (
                    main_structure_dict[index_adj_asverb + 1][0][3::] in ["了", "的"]):
                predicate_dict = main_structure_dict[index_adj_asverb:index_adj_asverb + 2]
                index_predicate_content = predicate_dict[0]
                index_predicate = mark_dict_backup.index(index_predicate_content)
                predicate_dict.append(index_predicate)
                subject_dict = main_structure_dict[index_adj_asverb - 1]
                index_subject_content = subject_dict[0]
                index_subject = mark_dict_backup.index(index_subject_content)
                subject_dict.append(index_subject)
                # print("1")
            elif (i[1][2:8] in ["000101", "000111"] or i[1][9:15] in ["000101", "000111"] or i[1][16:22] in ["000101",
                                                                                                             "000111"] or
                  i[1][23:29] in ["000101", "000111"] or i[1][30:36] in ["000101", "000111"]) and (
                    main_structure_dict[index_adj_asverb - 1][1][2:8] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_adj_asverb - 1][1][9:15] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_adj_asverb - 1][1][16:22] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_adj_asverb - 1][1][23:29] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_adj_asverb - 1][1][30:36] in ["000111", "000100", "010111"]) and (
                    main_structure_dict[index_adj_asverb - 1][0][3::] != main_structure_dict[index_adj_asverb][0][
                                                                         3::]) and (
                    main_structure_dict[index_adj_asverb + 1][0][3::] not in ["了", "的"]) and (
                    main_structure_dict[index_adj_asverb + 1][1][2:8] not in ["000001", "000111", "000100",
                                                                              "010111"] and
                    main_structure_dict[index_adj_asverb + 1][1][9:15] not in ["000001", "000111", "000100",
                                                                               "010111"] and
                    main_structure_dict[index_adj_asverb + 1][1][16:22] not in ["000001", "000111", "000100",
                                                                                "010111"] and
                    main_structure_dict[index_adj_asverb + 1][1][23:29] not in ["000001", "000111", "000100",
                                                                                "010111"] and
                    main_structure_dict[index_adj_asverb + 1][1][30:36] not in ["000001", "000111", "000100",
                                                                                "010111"]):
                predicate_dict = main_structure_dict[index_adj_asverb:index_adj_asverb + 1]
                index_predicate_content = predicate_dict[0]
                index_predicate = mark_dict_backup.index(index_predicate_content)
                predicate_dict.append(index_predicate)
                subject_dict = main_structure_dict[index_adj_asverb - 1:index_adj_asverb]
                index_subject_content = subject_dict[0]
                index_subject = mark_dict_backup.index(index_subject_content)
                subject_dict.append(index_subject)
                # print("2")
            elif (i[1][2:8] in ["000101", "000111"] or i[1][9:15] in ["000101", "000111"] or i[1][16:22] in ["000101",
                                                                                                             "000111"] or
                  i[1][23:29] in ["000101", "000111"] or i[1][30:36] in ["000101", "000111"]) and (
                    main_structure_dict[index_adj_asverb - 1][1][2:8] == "000110" or
                    main_structure_dict[index_adj_asverb - 1][1][9:15] == "000110" or
                    main_structure_dict[index_adj_asverb - 1][1][16:22] == "000110" or
                    main_structure_dict[index_adj_asverb - 1][1][23:29] == "000110" or
                    main_structure_dict[index_adj_asverb - 1][1][30:36] == "000110") and (
                    main_structure_dict[index_adj_asverb - 2][1][2:8] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_adj_asverb - 2][1][9:15] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_adj_asverb - 2][1][16:22] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_adj_asverb - 2][1][23:29] in ["000111", "000100", "010111"] or
                    main_structure_dict[index_adj_asverb - 2][1][30:36] in ["000111", "000100", "010111"]):
                predicate_dict = main_structure_dict[index_adj_asverb - 1:index_adj_asverb + 1]
                index_predicate_content = predicate_dict[0]
                index_predicate = mark_dict_backup.index(index_predicate_content)
                predicate_dict.append(index_predicate)
                subject_dict = main_structure_dict[index_adj_asverb - 2:index_adj_asverb - 1]
                index_subject_content = subject_dict[0]
                index_subject = mark_dict_backup.index(index_subject_content)
                subject_dict.append(index_subject)
                # print("3")
            elif (i[1][2:8] in ["000101", "000111"] or i[1][9:15] in ["000101", "000111"] or i[1][16:22] in ["000101",
                                                                                                             "000111"] or
                  i[1][23:29] in ["000101", "000111"] or i[1][30:36] in ["000101", "000111"]) and (
                    main_structure_dict[index_adj_asverb - 1][1][2:8] == "000110" or
                    main_structure_dict[index_adj_asverb - 1][1][9:15] == "000110" or
                    main_structure_dict[index_adj_asverb - 1][1][16:22] == "000110" or
                    main_structure_dict[index_adj_asverb - 1][1][23:29] == "000110" or
                    main_structure_dict[index_adj_asverb - 1][1][30:36] == "000110"):
                predicate_dict = main_structure_dict[index_adj_asverb - 1:index_adj_asverb + 1]
                index_predicate_content = predicate_dict[0]
                index_predicate = mark_dict_backup.index(index_predicate_content)
                predicate_dict.append(index_predicate)
                # print("4")
                if (main_structure_dict[index_adj_asverb - 2][1][2:8] in ["000111", "000100", "110000"] or
                        main_structure_dict[index_adj_asverb - 2][1][9:15] in ["000111", "000100", "110000", "111011",
                                                                               "010111"] or
                        main_structure_dict[index_adj_asverb - 2][1][16:22] in ["000111", "000100", "110000", "111011",
                                                                                "010111"] or
                        main_structure_dict[index_adj_asverb - 2][1][23:29] in ["000111", "000100", "110000", "111011",
                                                                                "010111"] or
                        main_structure_dict[index_adj_asverb - 2][1][30:36] in ["000111", "000100", "110000", "111011",
                                                                                "010111"]):
                    subject_dict = main_structure_dict[index_adj_asverb - 2:index_adj_asverb - 1]
                    index_subject_content = subject_dict[0]
                    index_subject = mark_dict_backup.index(index_subject_content)
                    subject_dict.append(index_subject)
                    # print("41")
                elif (main_structure_dict[index_adj_asverb - 2][1][2:8] not in ["000111", "000100", "110000", "111011",
                                                                                "010111"] and
                      main_structure_dict[index_adj_asverb - 2][1][9:15] not in ["000111", "000100", "110000", "111011",
                                                                                 "010111"] and
                      main_structure_dict[index_adj_asverb - 2][1][16:22] not in ["000111", "000100", "110000",
                                                                                  "111011", "010111"] and
                      main_structure_dict[index_adj_asverb - 2][1][23:29] not in ["000111", "000100", "110000",
                                                                                  "111011", "010111"] and
                      main_structure_dict[index_adj_asverb - 2][1][30:36] not in ["000111", "000100", "110000",
                                                                                  "111011", "010111"]) and (
                        main_structure_dict[index_adj_asverb - 3][1][2:8] in ["000111", "000100", "110000", "111011",
                                                                              "010111"] or
                        main_structure_dict[index_adj_asverb - 3][1][9:15] in ["000111", "000100", "110000", "111011",
                                                                               "010111"] or
                        main_structure_dict[index_adj_asverb - 3][1][16:22] in ["000111", "000100", "110000", "111011",
                                                                                "010111"] or
                        main_structure_dict[index_adj_asverb - 3][1][23:29] in ["000111", "000100", "110000", "111011",
                                                                                "010111"] or
                        main_structure_dict[index_adj_asverb - 3][1][30:36] in ["000111", "000100", "110000", "111011",
                                                                                "010111"]) and (
                        main_structure_dict[index_adj_asverb - 2][0][3::] == main_structure_dict[index_adj_asverb - 3][
                                                                                 0][3::]):
                    subject_dict = main_structure_dict[index_adj_asverb - 3:index_adj_asverb - 2]
                    index_subject_content = subject_dict[0]
                    index_subject = mark_dict_backup.index(index_subject_content)
                    subject_dict.append(index_subject)
                    remove_word = main_structure_dict[index_adj_asverb - 2]
                    main_structure_dict.remove(remove_word)
                    # print("42")
    except Exception:
        pass

    try:

        if len(subject_dict) == 2 and len(subject_dict[1]) == 36:
            subject_dict = [subject_dict]

        if len(predicate_dict) == 2 and len(predicate_dict[1]) == 36:
            predicate_dict = [predicate_dict]

    except Exception:
        pass

    try:
        main_structure_dict = [x for x in main_structure_dict if x not in subject_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in predicate_dict]
    except Exception:
        pass

    #print("s", subject_dict)
    #print("p", predicate_dict)

    try:
        if len(subject_dict) == 0 or len(predicate_dict) == 0:
            subject_dict = []
            predicate_dict = []
            main_structure_dict = copy.deepcopy(main_structure_dict_del_conj)

        elif (len(subject_dict) == 0 or len(predicate_dict) == 0) and (
                main_structure_dict != main_structure_dict_del_conj):
            main_structure_dict = copy.deepcopy(main_structure_dict_del_conj)
            subject_dict = []
            predicate_dict = []
            for i in main_structure_dict:
                if i[0][3::] in dot_dict:
                    main_structure_dict.remove(i)

        main_rest = copy.deepcopy(main_structure_dict)

        if len(subject_dict) != 0 and len(predicate_dict) != 0:
            return "s", subject_dict, "p", predicate_dict, "adj", adj, "adv", adv, "complement", complement, "conj", conj_dict, "main_rest", main_rest

    except Exception:
        pass

    #print("Backbone19", main_structure_dict)

    #20.处理简单主谓结构“我哭了”
    index_v_simple = 0
    index_subject_content = []
    index_predicate_content = []
    index_object_content = []
    index_subject = 0
    index_predicate = 0
    index_object = 0
    try:
        for i in main_structure_dict:
            if (i[1][2:8] in ["000001", "000101"] or i[1][9:15] in ["000001", "000101"] or i[1][16:22] in ["000001", "000101"] or i[1][23:29] in ["000001", "000101"] or
                    i[1][30:36] in ["000001", "000101"]):
                index_v_simple = main_structure_dict.index(i)
                if (index_v_simple - 1 == 0) and (
                        main_structure_dict[index_v_simple - 1][1][2:8] in ["000111", "000100", "010111"] or
                        main_structure_dict[index_v_simple - 1][1][9:15] in ["000111", "000100", "010111"] or
                        main_structure_dict[index_v_simple - 1][1][16:22] in ["000111", "000100", "010111"] or
                        main_structure_dict[index_v_simple - 1][1][23:29] in ["000111", "000100", "010111"] or
                        main_structure_dict[index_v_simple - 1][1][30:36] in ["000111", "000100", "010111"]) and (
                        main_structure_dict[index_v_simple] == main_structure_dict[-1]):
                    subject_dict = main_structure_dict[index_v_simple - 1:index_v_simple]
                    index_subject_content = subject_dict[0]
                    index_subject = mark_dict_backup.index(index_subject_content)
                    subject_dict.append(index_subject)
                    predicate_dict = main_structure_dict[index_v_simple:index_v_simple + 1]
                    index_predicate = mark_dict_backup.index(predicate_dict[0])
                    predicate_dict.append(index_predicate)
    except Exception:
        pass

    try:
        if len(subject_dict) == 2 and len(subject_dict[1]) == 36:
            subject_dict = [subject_dict]

        if len(predicate_dict) == 2 and len(predicate_dict[1]) == 36:
            predicate_dict = [predicate_dict]

    except Exception:
        pass

    try:
        main_structure_dict = [x for x in main_structure_dict if x not in subject_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in predicate_dict]
    except Exception:
        pass

    #print("s", subject_dict)
    #print("p", predicate_dict)

    try:
        if len(subject_dict) == 0 and len(predicate_dict) == 0 and main_structure_dict != main_structure_dict_del_conj:
            main_strucutre_dict = copy.deepcopy(main_structure_dict_del_conj)
            subject_dict = []
            predicate_dict = []
            for i in main_structure_dict:
                if i[0][3::] in dot_dict:
                    main_structure_dict.remove(i)

        main_rest = copy.deepcopy(main_structure_dict)

        if len(subject_dict) != 0 and len(predicate_dict) != 0:
            return "s", subject_dict, "p", predicate_dict, "adj", adj, "adv", adv, "complement", complement, "conj", conj_dict, "main_rest", main_rest

    except Exception:
        pass

    #print("Backbone20", main_structure_dict)

    #21.处理简单谓宾结构“包括我”
    index_v_simple = 0
    index_predicate_content = []
    index_object_content = []
    index_predicate = 0
    index_object = 0
    try:
        for i in main_structure_dict:
            if (i[1][2:8] == "000001" or i[1][9:15] == "000001" or i[1][16:22] == "000001" or i[1][
                                                                                              23:29] == "000001" or
                    i[1][30:36] == "000001"):
                index_v_simple = main_structure_dict.index(i)
                if (main_structure_dict[index_v_simple] == main_structure_dict[0]) and (
                        main_structure_dict[index_v_simple + 1][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict[index_v_simple + 1][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict[index_v_simple + 1][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict[index_v_simple + 1][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict[index_v_simple + 1][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]):
                    predicate_dict = main_structure_dict[index_v_simple:index_v_simple + 1]
                    index_predicate = mark_dict_backup.index(predicate_dict[0])
                    predicate_dict.append(index_predicate)
                    object_dict = main_structure_dict[index_v_simple + 1::]
                    index_object_content = object_dict[0]
                    index_object = mark_dict_backup.index(index_object_content)
                    object_dict.append(index_object)
                elif (main_structure_dict[index_v_simple] == main_structure_dict[0]) and(main_structure_dict[index_v_simple + 1][0][3::] == "于") and (
                        main_structure_dict[index_v_simple + 2][1][2:8] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict[index_v_simple + 2][1][9:15] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict[index_v_simple + 2][1][16:22] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict[index_v_simple + 2][1][23:29] in ["000111", "000100", "110000", "111011", "010111"] or
                        main_structure_dict[index_v_simple + 2][1][30:36] in ["000111", "000100", "110000", "111011", "010111"]):
                    predicate_dict = main_structure_dict[index_v_simple:index_v_simple + 2]
                    index_predicate = mark_dict_backup.index(predicate_dict[0])
                    predicate_dict.append(index_predicate)
                    object_dict = main_structure_dict[index_v_simple + 2::]
                    index_object_content = object_dict[0]
                    index_object = mark_dict_backup.index(index_object_content)
                    object_dict.append(index_object)
                elif (main_structure_dict[index_v_simple - 1][1][2:8] in ["000110", "111110"] or
                        main_structure_dict[index_v_simple - 1][1][9:15] in ["000110", "111110"] or
                        main_structure_dict[index_v_simple - 1][1][16:22] in ["000110", "111110"] or
                        main_structure_dict[index_v_simple - 1][1][23:29] in ["000110", "111110"] or
                        main_structure_dict[index_v_simple - 1][1][30:36] in ["000110", "111110"]):
                    predicate_dict = main_structure_dict[index_v_simple-1:index_v_simple+1]
                    index_predicate = mark_dict_backup.index(predicate_dict[0])
                    predicate_dict.append(index_predicate)
                    object_dict = main_structure_dict[index_v_simple + 1::]
                    index_object_content = object_dict[0]
                    index_object = mark_dict_backup.index(index_object_content)
                    object_dict.append(index_object)
    except Exception:
        pass

    try:
        if len(predicate_dict) == 2 and len(predicate_dict[1]) == 36:
            predicate_dict = [predicate_dict]

        if len(object_dict) == 2 and len(object_dict[1]) == 36:
            object_dict = [object_dict]
    except Exception:
        pass

    try:
        main_structure_dict = [x for x in main_structure_dict if x not in predicate_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in object_dict]
    except Exception:
        pass

    #print("p", predicate_dict)
    #print("o", object_dict)
    #print("conj_dict19", conj_dict)

    try:
        if len(predicate_dict) == 0 and len(object_dict == 0) and main_structure_dict != main_structure_dict_del_conj:
            main_strucutre_dict = copy.deepcopy(main_structure_dict_del_conj)
            predicate_dict = []
            object_dict = []
            for i in main_structure_dict:
                if i[0][3::] in dot_dict:
                    main_structure_dict.remove(i)

        main_rest = copy.deepcopy(main_structure_dict)

        if len(predicate_dict) != 0 and len(object_dict) != 0:
            return "p", predicate_dict, "o", object_dict, "adj", adj, "adv", adv, "complement", complement, "conj", conj_dict, "main_rest", main_rest

    except Exception:
        pass

    #print("Backbone21", main_structure_dict)

    #22 去除结构中跟其他成分末尾字相同但词性不同的字
    index_i = 0

    try:
        for i in main_structure_dict:
            index_i = mark_dict.index(i)
            for j in adv:
                if (i[0][3::] == j[-2][0][3::]) and (index_i == j[-1]+1):
                    main_structure_dict.remove(i)
    except Exception:
        pass

    try:
        for i in main_structure_dict:
            index_i = mark_dict.index(i)
            for j in adj:
                if (i[0][3::] == j[-2][0][3::]) and (index_i == j[-1]+1):
                    main_structure_dict.remove(i)
    except Exception:
        pass

    try:
        for i in main_structure_dict:
            index_i = mark_dict.index(i)
            for j in complement:
                if (i[0][3::] == j[-2][0][3::]) and (index_i == j[-1]+1):
                    main_structure_dict.remove(i)
    except Exception:
        pass

    try:
        for i in main_structure_dict:
            index_i = mark_dict.index(i)
            for j in predicate_dict:
                if (i[0][3::] == j[-2][0][3::]) and (index_i == j[-1]+1):
                    main_structure_dict.remove(i)
    except Exception:
        pass

    try:
        for i in main_structure_dict:
            index_i = mark_dict.index(i)
            for j in predicate_subjectclause_dict:
                if (i[0][3::] == j[-2][0][3::]) and (index_i == j[-1]+1):
                    main_structure_dict.remove(i)
    except Exception:
        pass

    try:
        for i in main_structure_dict:
            index_i = mark_dict.index(i)
            for j in predicate_in_objectclause_dict:
                if (i[0][3::] == j[-2][0][3::]) and (index_i == j[-1]+1):
                    main_structure_dict.remove(i)
    except Exception:
        pass

    try:
        for i in main_structure_dict:
            index_i = mark_dict.index(i)
            for j in predicate_represent_dict:
                if (i[0][3::] == j[-2][0][3::]) and (index_i == j[-1]+1):
                    main_structure_dict.remove(i)
    except Exception:
        pass

    try:
        for i in main_structure_dict:
            index_i = mark_dict.index(i)
            for j in predicate_2_dict:
                if (i[0][3::] == j[-2][0][3::]) and (index_i == j[-1]+1):
                    main_structure_dict.remove(i)
    except Exception:
        pass

    try:
        for i in main_structure_dict:
            index_i = mark_dict.index(i)
            for j in object_dict:
                if (i[0][3::] == j[-2][0][3::]) and (index_i == j[-1]+1):
                    main_structure_dict.remove(i)
    except Exception:
        pass

    try:
        for i in main_structure_dict:
            index_i = mark_dict.index(i)
            for j in object_subjectclause_dict:
                if (i[0][3::] == j[-2][0][3::]) and (index_i == j[-1]+1):
                    main_structure_dict.remove(i)
    except Exception:
        pass

    try:
        for i in main_structure_dict:
            index_i = mark_dict.index(i)
            for j in object_in_objectclause_dict:
                if (i[0][3::] == j[-2][0][3::]) and (index_i == j[-1]+1):
                    main_structure_dict.remove(i)
    except Exception:
        pass

    try:
        for i in main_structure_dict:
            index_i = mark_dict.index(i)
            for j in object_2_dict:
                if (i[0][3::] == j[-2][0][3::]) and (index_i == j[-1]+1):
                    main_structure_dict.remove(i)
    except Exception:
        pass

    try:
        for i in main_structure_dict:
            index_i = mark_dict.index(i)
            for j in object_represent_dict:
                if (i[0][3::] == j[-2][0][3::]) and (index_i == j[-1]+1):
                    main_structure_dict.remove(i)
    except Exception:
        pass

    main_rest = copy.deepcopy(main_structure_dict)

    # 23.处理简单谓词结构“给力”
    index_v_simple = 0
    index_subject_content = []
    index_predicate_content = []
    index_object_content = []
    index_subject = 0
    index_predicate = 0
    index_object = 0

    try:
        for i in main_structure_dict:
            if (len(main_structure_dict) == 1) and (i[1][2:8] in ["000001"] or i[1][9:15] in ["000001"] or i[1][16:22] in ["000001"] or i[1][23:29] in ["000001"] or
                    i[1][30:36] in ["000001"]):
                index_v_simple = main_structure_dict.index(i)
                predicate_dict = main_structure_dict
                index_predicate = mark_dict_backup.index(predicate_dict[0])
                predicate_dict.append(index_predicate)
    except Exception:
        pass

    try:
        if len(predicate_dict) == 2 and len(predicate_dict[1]) == 36:
            predicate_dict = [predicate_dict]
    except Exception:
        pass

    #print("p", predicate_dict)

    try:
        main_structure_dict = [x for x in main_structure_dict if x not in predicate_dict]
    except Exception:
        pass

    #print("Backbone23", main_structure_dict)

    try:
        if len(predicate_dict) == 0 and main_structure_dict != main_structure_dict_del_conj:
            main_structure_dict = copy.deepcopy(main_structure_dict_del_conj)
            predicate_dict = []

        main_rest = copy.deepcopy(main_structure_dict)

        if len(predicate_dict) != 0:
            return "p", predicate_dict, "adj", adj, "adv", adv, "complement", complement, "conj", conj_dict, "main_rest", main_rest

    except Exception:
        pass

    # 24.处理无谓语动词的句子
    index_i = 0
    index_adj = 0
    index_subject = []
    index_predicate = []
    count_v = 0
    count_adj = 0

    try:
        for i in main_structure_dict:
            if i[1][2:8] in ["000001"] or i[1][9:15] in ["000001"] or i[1][16:22] in ["000001"] or i[1][23:29] in ["000001"] or i[1][30:36] in ["000001"]:
                count_v += 1
            elif i[1][2:8] in ["000101"] or i[1][9:15] in ["000101"] or i[1][16:22] in ["000101"] or i[1][23:29] in ["000101"] or i[1][30:36] in ["000101"]:
                count_adj += 1
    except Exception:
        pass

    try:
        if count_v == 0 and count_adj > 0:
            for i in main_structure_dict:
                index_i = main_structure_dict.index(i)
                if i[1][2:8] in ["000101"] or i[1][9:15] in ["000101"] or i[1][16:22] in ["000101"] or i[1][23:29] in ["000101"] or i[1][30:36] in ["000101"]:
                   if (main_structure_dict[index_adj] == main_structure_dict[-1]) and (main_structure_dict[index_adj-1][1][2:8] in ["000111", "000100", "010111"] or main_structure_dict[index_adj-1][1][9:15] in ["000111", "000100", "010111"] or main_structure_dict[index_adj-1][1][16:22] in ["000111", "000100", "010111"] or main_structure_dict[index_adj-1][1][23:29] in ["000111", "000100", "010111"] or main_structure_dict[index_adj-1][1][30:36] in ["000111", "000100", "010111"]):
                        subject_dict = main_structure_dict[0:index_adj]
                        index_subject = mark_dict_backup.index(subject_dict[0])
                        subject_dict.append(index_subject)
                        predicate_dict = main_structure_dict[index_adj::]
                        index_predicate = mark_dict_backup.index(predicate_dict[0])
                        predicate_dict.append(index_predicate)
                   elif (main_structure_dict[index_adj] != main_structure_dict[-1]) and (main_structure_dict[-1][1][2:8] in ["000111", "000100", "010111"] or main_structure_dict[-1][1][9:15] in ["000111", "000100", "010111"] or main_structure_dict[-1][1][16:22] in ["000111", "000100", "010111"] or main_structure_dict[-1][1][23:29] in ["000111", "000100", "010111"] or main_structure_dict[-1][1][30:36] in ["000111", "000100", "010111"]):
                        subject_dict = main_structure_dict[-1::]
                        index_subject = mark_dict_backup.index(subject_dict[0])
                        subject_dict.append(index_subject)
                        adj_no_v_dict = main_structure_dict[0:-1]
                        if adj_no_v_dict != []:
                            index_adj = mark_dict.index(adj_no_v_dict[-1])
                            adj_no_v_dict.append(index_adj)
                            adj.append(adj_no_v_dict)
                            flag_empty_content += 1
        elif count_v == 0 and count_adj == 0:
            if main_structure_dict[-1][1][2:8] in ["000111", "000100", "010111"] or main_structure_dict[-1][1][9:15] in ["000111", "000100", "010111"] or main_structure_dict[-1][1][16:22] in ["000111", "000100", "010111"] or main_structure_dict[-1][1][23:29] in ["000111", "000100", "010111"] or main_structure_dict[-1][1][30:36] in ["000111", "000100", "010111"]:
                subject_dict = main_structure_dict[-1::]
                index_subject = mark_dict_backup.index(subject_dict[0])
                subject_dict.append(index_subject)
                adj_no_v_dict = main_structure_dict[0:-1]
                if adj_no_v_dict != []:
                    index_adj = mark_dict.index(adj_no_v_dict[-1])
                    adj_no_v_dict.append(index_adj)
                    adj.append(adj_no_v_dict)
                    flag_empty_content += 1
    except Exception:
        pass

    try:
        if len(subject_dict) == 2 and len(subject_dict[1]) == 36:
            subject_dict = [subject_dict]
        elif len(predicate_dict) == 2 and len(predicate_dict[1]) == 36:
            predicate_dict = [predicate_dict]
        elif len(adj_no_v_dict) != 0 and len(adj_no_v_dict[0]) != 2:
            adj_no_v_dict = [adj_no_v_dict]
    except Exception:
        pass

    try:
        main_structure_dict = [x for x in main_structure_dict if x not in subject_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in predicate_dict]
        main_structure_dict = [x for x in main_structure_dict if x not in adj_no_v_dict]
    except Exception:
        pass

    # print("s", subject_dict)
    # print("p", predicate_dict)
    # print("adj", adj)

    try:
        if len(subject_dict) == 0 and main_structure_dict != main_structure_dict_del_conj:
            main_structure_dict = copy.deepcopy(main_structure_dict_del_conj)
            predicate_dict = []

        main_rest = copy.deepcopy(main_structure_dict)

        if len(subject_dict) != 0:
            return "s", subject_dict, "p", predicate_dict, "adj", adj, "main_rest", main_rest
    except Exception:
        pass

    #print("Backbone24", main_structure_dict)

    if len(predicate_dict) == 0 and len(predicate_represent_dict) == 0 and len(predicate_subjectclause_dict) == 0 and len(predicate_objectclause_dict) == 0:
        main_structure_dict = []
        mark_dict = []
        tp_adv_dict = []
        tp_adv_dict_single = []
        tp_adv_dict_ft = []
        tp_adv_dict_ft_single = []
        adv_sigh_dict = []
        adv_as_dict = []
        adv_middle_dict = []
        adv_simple_dict = []
        adv_with_sb_dict = []
        adv_inorderto_dict = []
        adv_there_be_dict = []
        adv_through_dict = []
        adv_until_dict = []
        complement_degree_to_dict = []
        complement_degree_de_dict = []
        complement_adj_le_dict = []
        complement_degree_dict = []
        complement_specialuse_dict = []
        complement_specialtreat_dict = []
        adj_ap_n_de_dict = []
        adj_should_dict = []
        adj_v_dict = []
        adj_np_v_dict = []
        adj_number_dict = []
        adj_tp_dict = []
        adj_double_dict = []
        adj_and_dict = []
        adj_and_v_dict = []
        adj_belong_dict = []
        adj_de_single_dict = []
        adj_connected_dict = []
        adj_connected_complex_dict = []
        adv_compare_dict = []
        adj_n_1_dict = []
        adj_between_dict = []
        adj_prep_dict = []
        adj_begin_dict = []
        middle_adv_dict = []
        adj_be_de_dict = []
        adj_note_dict = []
        predicate_dict = []
        predicate_2_dict = []
        subject_dict = []
        subject_2_dict = []
        object_dict = []
        object_2_dict = []
        modal_verb_dict = []
        modal_verb_conclusion = []
        compare_verb_dict = []
        conj_dict = []
        verb_j_dict = []
        adj_asverb_dict = []
        verb_j_conclusion = []
        two_verbs_dict = []
        objectclause_dict = []
        predicate_objectclause_dict = []
        subject_objectclause_dict = []
        object_objectclause_dict = []
        predicate_in_objectclause_dict = []
        subject_in_objectclause_dict = []
        object_in_objectclause_dict = []
        subject_subjectclause_dict = []
        predicate_subjectclause_dict = []
        object_subjectclause_dict = []
        subject_in_subjectclause_dict = []
        predicate_in_subjectclause_dict = []
        object_in_subjectclause_dict = []
        subjectclause_dict = []
        subject_twosubject_dict = []
        there_be_dict = []
        subject_represent_dict = []
        predicate_represent_dict = []
        object_represent_dict = []
        predicate_in_represent_dict = []
        object_in_represent_dict = []
        adj = []
        adv = []
        complement = []

        #print("a_middle_adv_dict", middle_adv_dict)

def Clear_components():
    main_structure_dict = []
    mark_dict = []
    tp_adv_dict = []
    tp_adv_dict_single = []
    tp_adv_dict_ft = []
    tp_adv_dict_ft_single = []
    adv_sigh_dict = []
    adv_as_dict = []
    adv_middle_dict = []
    adv_simple_dict = []
    adv_with_sb_dict = []
    adv_inorderto_dict = []
    adv_there_be_dict = []
    adv_through_dict = []
    adv_until_dict = []
    complement_degree_to_dict = []
    complement_degree_de_dict = []
    complement_adj_le_dict = []
    complement_degree_dict = []
    complement_specialuse_dict = []
    complement_specialtreat_dict = []
    adj_ap_n_de_dict = []
    adj_should_dict = []
    adj_v_dict = []
    adj_np_v_dict = []
    adj_number_dict = []
    adj_tp_dict = []
    adj_double_dict = []
    adj_and_dict = []
    adj_and_v_dict = []
    adj_belong_dict = []
    adj_de_single_dict = []
    adj_connected_dict = []
    adj_connected_complex_dict = []
    adv_compare_dict = []
    adj_n_1_dict = []
    adj_between_dict = []
    adj_prep_dict = []
    adj_begin_dict = []
    middle_adv_dict = []
    adj_be_de_dict = []
    adj_note_dict = []
    predicate_dict = []
    predicate_2_dict = []
    subject_dict = []
    subject_2_dict = []
    object_dict = []
    object_2_dict = []
    modal_verb_dict = []
    modal_verb_conclusion = []
    compare_verb_dict = []
    conj_dict = []
    verb_j_dict = []
    adj_asverb_dict = []
    verb_j_conclusion = []
    two_verbs_dict = []
    objectclause_dict = []
    predicate_objectclause_dict = []
    subject_objectclause_dict = []
    object_objectclause_dict = []
    predicate_in_objectclause_dict = []
    subject_in_objectclause_dict = []
    object_in_objectclause_dict = []
    subject_subjectclause_dict = []
    predicate_subjectclause_dict = []
    object_subjectclause_dict = []
    subject_in_subjectclause_dict = []
    predicate_in_subjectclause_dict = []
    object_in_subjectclause_dict = []
    subjectclause_dict = []
    subject_twosubject_dict = []
    there_be_dict = []
    subject_represent_dict = []
    predicate_represent_dict = []
    object_represent_dict = []
    predicate_in_represent_dict = []
    object_in_represent_dict = []
    adj = []
    adv = []
    complement = []

def Write_components():
    global predicate_dict
    global subject_dict
    global subject_2_dict
    global object_dict
    global object_2_dict
    global predicate_2_dict
    global modal_verb_conclusion
    global modal_verb_dict
    global compare_verb_dict
    global conj_dict
    global two_verbs_dict
    global verb_j_dict
    global verb_j_conclusion
    global predicate_objectclause_dict
    global subject_objectclause_dict
    global object_objectclause_dict
    global predicate_in_objectclause_dict
    global subject_in_objectclause_dict
    global object_in_objectclause_dict
    global adv_there_be_dict
    global subjectclause_dict
    global objectclause_dict
    global subject_subjectclause_dict
    global predicate_subjectclause_dict
    global object_subjectclause_dict
    global subject_in_subjectclause_dict
    global predicate_in_subjectclause_dict
    global object_in_subjectclause_dict
    global subject_represent_dict
    global predicate_represent_dict
    global object_represent_dict
    global predicate_in_represent_dict
    global object_in_represent_dict

    if len(adv_there_be_dict) != 0:
        adv_there_be_dict.insert(0, "adv_there_be")
    if len(modal_verb_dict) != 0:
        modal_verb_dict.insert(0, "mv")
    if len(subject_dict) != 0:
        subject_dict.insert(0, "s")
    if len(subject_2_dict) != 0:
        subject_2_dict.insert(0, "s_2")
    if len(predicate_dict) != 0:
        predicate_dict.insert(0, "p")
    if len(predicate_2_dict) != 0:
        predicate_2_dict.insert(0, "p_2")
    if len(object_dict) != 0:
        object_dict.insert(0, "o")
    if len(object_2_dict) != 0:
        object_2_dict.insert(0, "o_2")
    if len(subject_objectclause_dict) != 0:
        subject_objectclause_dict.insert(0, "s_oc")
    if len(subject_subjectclause_dict) != 0:
        subject_subjectclause_dict.insert(0, "s_sc")
    if len(predicate_objectclause_dict) != 0:
        predicate_objectclause_dict.insert(0, "p_oc")
    if len(predicate_subjectclause_dict) != 0:
        predicate_subjectclause_dict.insert(0, "p_sc")
    if len(object_objectclause_dict) != 0:
        object_objectclause_dict.insert(0, "o_oc")
    if len(object_subjectclause_dict) != 0:
        object_subjectclause_dict.insert(0, "o_sc")
    if len(subject_in_objectclause_dict) != 0:
        subject_in_objectclause_dict.insert(0, "s_in_oc")
    if len(subject_in_subjectclause_dict) != 0:
        subject_in_subjectclause_dict.insert(0, "s_in_sc")
    if len(predicate_objectclause_dict) != 0:
        predicate_in_objectclause_dict.insert(0, "p_in_oc")
    if len(predicate_subjectclause_dict) != 0:
        predicate_in_subjectclause_dict.insert(0, "p_in_sc")
    if len(object_in_objectclause_dict) != 0:
        object_in_objectclause_dict.insert(0, "o_in_oc")
    if len(object_in_subjectclause_dict) != 0:
        object_in_subjectclause_dict.insert(0, "o_in_sc")
    if len(subject_represent_dict) != 0:
        subject_represent_dict.insert(0, "s_re")
    if len(predicate_represent_dict) != 0:
        predicate_represent_dict.insert(0, "p_re")
    if len(object_represent_dict) != 0:
        object_represent_dict.insert(0, "o_re")
    if len(predicate_in_represent_dict) != 0:
        predicate_in_represent_dict.insert(0, "p_in_re")
    if len(object_in_represent_dict) != 0:
        object_in_represent_dict.insert(0, "o_in_re")
    if len(adv_compare_dict) != 0:
        adv_compare_dict.insert(0, "adv_compare")
    if len(verb_j_dict) != 0:
        verb_j_dict.insert(0, "v_j")

def Combine_all(re):
    global mark_dict
    global predicate_dict
    global subject_dict
    global subject_2_dict
    global object_dict
    global object_2_dict
    global predicate_2_dict
    global modal_verb_dict
    global compare_verb_dict
    global conj_dict
    global two_verbs_dict
    global verb_j_dict
    global predicate_objectclause_dict
    global subject_objectclause_dict
    global object_objectclause_dict
    global predicate_in_objectclause_dict
    global object_in_objectclause_dict
    global subject_in_objectclause_dict
    global predicate_in_objectclause_dict
    global object_in_objectclause_dict
    global subject_in_objectclause_dict
    global subject_subjectclause_dict
    global predicate_subjectclause_dict
    global object_subjectclause_dict
    global subject_in_subjectclause_dict
    global predicate_in_subjectclause_dict
    global object_in_subjectclause_dict
    global adv_there_be_dict
    global subject_represent_dict
    global predicate_represent_dict
    global object_represent_dict
    global predicate_in_represent_dict
    global object_in_represent_dict

    global index_combine_dot

    global adj_ap_n_de_dict
    global adj_should_dict
    global adj_v_dict
    global adj_np_v_dict
    global adj_number_dict
    global adj_tp_dict
    global adj_double_dict
    global adj_and_dict
    global adj_and_v_dict
    global adj_belong_dict
    global adj_de_single_dict
    global adj_connected_complex_dict
    global adj_note_dict

    global tp_adv_dict
    global tp_adv_dict_single
    global tp_adv_dict_ft
    global tp_adv_dict_ft_single
    global adv_sigh_dict
    global adv_as_dict
    global complement_degree_to_dict
    global complement_drgree_de_dict
    global complement_adj_le_dict
    global complement_degree_dict
    global complement_specialuse_dict
    global complement_specialtreat_dict
    global adv_middle_dict
    global adv_with_sb_dict
    global adv_inorderto_dict
    global adv_through_dict
    global adv_until_dict
    global main_structure_dict
    global mark_dict_backup
    global adj_asverb_dict
    global adj
    global adv
    global complement

    list = copy.deepcopy(mark_dict)


    #print("mark_dict", mark_dict)
    #print("object_dict", object_dict)
    #print("adj", adj)
    #print("mark_dict_backup", mark_dict_backup)

    # 0.1 把主宾中含有并列成分的拆分
    subject_1st = []
    subject_mid = []
    subject_2nd = []
    object_1st = []
    object_mid = []
    object_2nd = []
    index_break = 0
    index_mark = 0

    try:
        for i in subject_dict:
            if i[0][3::] in ["和", "及", "同", "以及", "并且", "且", "或", "又", "与"]:
                index_break = subject_dict.index(i)
                subject_1st = subject_dict[0:index_break]
                subject_mid = subject_dict[index_break:index_break+1]
                subject_2nd = subject_dict[index_break+1:-1]

        for j in mark_dict_backup:
            index_mark = mark_dict.index(j)
            if len(subject_1st)> 0 and subject_1st[1] == j:
                subject_1st.append(index_mark)
            elif len(subject_2nd)> 0 and subject_2nd[0] == j:
                subject_2nd.append(index_mark)

        if len(subject_1st) > 0 and len(subject_2nd) > 0:
            subject_dict = subject_1st + subject_mid + subject_2nd

    except Exception:
        pass

    try:
        for i in object_dict:
            if i[0][3::] in ["和", "及", "同", "以及", "并且", "且", "或", "又", "与"]:
                #print("ok")
                index_break = object_dict.index(i)
                object_1st = object_dict[0:index_break]
                object_mid = object_dict[index_break:index_break + 1]
                object_2nd = object_dict[index_break + 1:-1]
    except Exception:
        pass

    #print("object_1st", object_1st)
    #print("object_2nd", object_2nd)

    for j in mark_dict_backup:
        index_mark = mark_dict_backup.index(j)
        if len(object_1st)> 0 and object_1st[1] == j:
            object_1st.append(index_mark)
        elif len(object_2nd)> 0 and object_2nd[0] == j:
            object_2nd.append(index_mark)

    if len(object_1st) >0 and len(object_2nd) > 0:
        object_dict = object_1st + object_mid + object_2nd

    #print("o_combine", object_dict)

    #1.1 把定附着在主宾上
    list_index = []
    adj_sorted = []
    flag_note = 0

    try:
        for i in adj:
            for j in adj_note_dict:
                if i == j:
                    adj.remove(i)
                    flag_note = 1
    except Exception:
        pass

    if len(adj_note_dict) == 2:
        if isinstance(adj_note_dict[-1], int):
            adj_note_dict = [adj_note_dict]

    try:
        if len(adj) != 0:
            for i in adj:
                list_index.append(i[-1])

        list_index.sort(reverse=True)
        #print("list_index", list_index)

        for i in list_index:
            for j in adj:
                if i == j[-1]:
                    adj_sorted.append(j)
        #print("adj_sorted", adj_sorted)

    except Exception:
        pass

    flag = 0

    #后置定语
    try:
        for i in adj_note_dict:
            if len(subject_dict) != 0 and int(i[-1]) == int(subject_dict[-1]) + 1:
                subject_dict = subject_dict + ["*"] + i
                adj_note_dict.remove(i)
            elif len(subject_2_dict) != 0 and int(i[-1]) == int(subject_2_dict[-1]) + 1:
                subject_2_dict = subject_2_dict + ["*"] + i
                adj_note_dict.remove(i)
            elif len(object_dict) != 0 and int(i[-1]) == int(object_dict[-1]) + 1:
                object_dict = object_dict + ["*"] + i
                adj_note_dict.remove(i)
            elif len(object_2_dict) != 0 and int(i[-1]) == int(object_2_dict[-1]) + 1:
                object_2_dict = object_2_dict + ["*"] + i
                adj_note_dict.remove(i)
            elif len(subject_in_subjectclause_dict) != 0 and int(i[-1]) == int(subject_in_subjectclause_dict[-1]) + 1:
                subject_in_subjectclause_dict = subject_in_subjectclause_dict + ["*"] + i
                adj_note_dict.remove(i)
            elif len(object_in_subjectclause_dict) != 0 and int(i[-1]) == int(object_in_subjectclause_dict[-1]) + 1:
                object_in_subjectclause_dict = object_in_subjectclause_dict + ["*"] + i
                adj_note_dict.remove(i)
            elif len(subject_subjectclause_dict) != 0 and int(i[-1]) == int(subject_subjectclause_dict[-1]) + 1:
                subject_subjectclause_dict = subject_subjectclause_dict + ["*"] + i
                adj_note_dict.remove(i)
            elif len(object_subjectclause_dict) != 0 and int(i[-1]) == int(object_subjectclause_dict[-1]) + 1:
                object_subjectclause_dict = object_subjectclause_dict + ["*"] + i
                adj_note_dict.remove(i)
            elif len(subject_objectclause_dict) != 0 and int(i[-1]) == int(subject_objectclause_dict[-1]) + 1:
                subject_objectclause_dict = subject_objectclause_dict + ["*"] + i
                adj_note_dict.remove(i)
            elif len(object_objectclause_dict) != 0 and int(i[-1]) == int(object_objectclause_dict[-1]) + 1:
                object_objectclause_dict = object_objectclause_dict + ["*"] + i
                adj_note_dict.remove(i)
            elif len(subject_in_objectclause_dict) != 0 and int(i[-1]) == int(subject_in_objectclause_dict[-1]) + 1:
                subject_in_objectclause_dict = subject_in_objectclause_dict + ["*"] + i
                adj_note_dict.remove(i)
            elif len(object_in_objectclause_dict) != 0 and int(i[-1]) == int(object_in_objectclause_dict[-1]) + 1:
                object_in_objectclause_dict = object_in_objectclause_dict + ["*"] + i
                adj_note_dict.remove(i)
            elif len(subject_represent_dict) != 0 and int(i[-1]) == int(subject_represent_dict[-1]) + 1:
                subject_represent_dict = subject_represent_dict + ["*"] + i
                adj_note_dict.remove(i)
            elif len(object_represent_dict) != 0 and int(i[-1]) == int(object_represent_dict[-1]) + 1:
                object_represent_dict = object_represent_dict + ["*"] + i
                adj_note_dict.remove(i)
    except Exception:
        pass

    try:
        for i in adj_sorted:
            if (len(subject_dict)!= 0) and (i[-1] < subject_dict[-1]):
                subject_dict = i + ["*"] + subject_dict
                adj_sorted.remove(i)
    except Exception:
        pass

    #主语中有并列成分
    index_combine = 0
    subject_1 = []
    try:
        for i in adj_sorted:
            if len(subject_mid) != 0 and (len(subject_dict) != 0) and (i[-1] < subject_dict[-1]):
                subject_dict = i + ["*"] + subject_dict
                adj_sorted.remove(i)
            elif len(subject_mid) != 0:
                for j in subject_dict:
                    if isinstance(j, int):
                        index_combine = subject_dict.index(j)
                        subject_1 = subject_dict[index_combine - 1:index_combine + 1]
                        if i[-1] == j - 1:
                            subject_1 = i + ["*"] + subject_1
                            subject_dict[index_combine - 1] = subject_1
                            subject_dict.remove(j)

    except Exception:
        pass

    #print("subject_dict_combine", subject_dict)

    try:
        for i in adj_sorted:
            if (len(subject_2_dict) != 0) and (subject_dict[-1] < i[-1] < subject_2_dict[-1]):
                subject_2_dict = i + ["*"] + subject_2_dict
                adj_sorted.remove(i)
    except Exception:
        pass

    try:
        for i in adj_sorted:
            if (len(object_dict)!= 0) and (len(subject_2_dict) != 0) and (subject_2_dict[-1] <i[-1] < object_dict[-1]):
                object_dict = i + ["*"] + object_dict
                adj_sorted.remove(i)
    except Exception:
        pass

    #print("adj_sorted", adj_sorted)

    # 宾语中有并列成分
    index_combine = 0
    object_1 = []
    try:
        for i in adj_sorted:
            if len(object_mid) == 0 and (len(object_dict)!= 0) and (len(subject_2_dict) == 0) and (subject_dict[-1] <i[-1] < object_dict[-1]):
                object_dict = i + ["*"] + object_dict
                adj_sorted.remove(i)
            elif len(object_mid) != 0:
                for j in object_dict:
                    if isinstance(j,int):
                        index_combine = object_dict.index(j)
                        object_1 = object_dict[index_combine-1:index_combine+1]
                        if i[-1] == j - 1:
                            object_1 = i + ["*"] + object_1
                            object_dict[index_combine-1] = object_1
                            object_dict.remove(j)

    except Exception:
        pass

    #print("object_dict_combine", object_dict)

    flag = 0

    #print("1object_dict", object_dict)

    try:
        for i in adj_sorted:
            if (len(object_dict)!= 0) and (len(object_2_dict) == 0) and (i[-1] <object_dict[-1]):
                for j in object_dict:
                    if j == "*":
                        flag += 1
                if flag == 0:
                    object_dict = i + ["*"] + object_dict
    except Exception:
        pass

    #print("2object_dict", object_dict)

    try:
        for i in adj_sorted:
            if (len(object_2_dict)!= 0) and (object_dict[-1] <i[-1] < object_2_dict[-1]):
                object_2_dict = i + ["*"] + object_2_dict
                adj_sorted.remove(i)
    except Exception:
        pass

    try:
        for i in adj_sorted:
            if (len(subject_in_subjectclause_dict)!= 0) and (i[-1] < subject_in_subjectclause_dict[-1]):
                subject_in_subjectclause_dict = i + ["*"] + subject_in_subjectclause_dict
                adj_sorted.remove(i)
    except Exception:
        pass

    try:
        for i in adj_sorted:
            if (len(object_in_subjectclause_dict)!= 0) and (object_in_subjectclause_dict < i[-1] < subject_in_subjectclause_dict[-1]):
                object_in_subjectclause_dict = i + ["*"] + object_in_subjectclause_dict
                adj_sorted.remove(i)
    except Exception:
        pass

    try:
        for i in adj_sorted:
            if (len(subject_subjectclause_dict)!= 0) and (object_in_subjectclause_dict < i[-1] < subject_subjectclause_dict[-1]):
                subject_subjectclause_dict = i + ["*"] + subject_subjectclause_dict
                adj_sorted.remove(i)
    except Exception:
        pass

    try:
        for i in adj_sorted:
            if (len(object_subjectclause_dict)!= 0) and (subject_subjectclause_dict < i[-1] < object_subjectclause_dict[-1]):
                object_subjectclause_dict = i + ["*"] + object_subjectclause_dict
                adj_sorted.remove(i)
    except Exception:
        pass

    try:
        for i in adj_sorted:
            if (len(subject_objectclause_dict)!= 0) and (i[-1] < subject_objectclause_dict[-1]):
                subject_objectclause_dict = i + ["*"] + subject_objectclause_dict
                adj_sorted.remove(i)
    except Exception:
        pass

    try:
        for i in adj_sorted:
            if (len(object_objectclause_dict)!=0) and (subject_objectclause_dict[-1] < i[-1] < object_objectclause_dict[-1]):
                object_objectclause_dict = i + ["*"] + object_objectclause_dict
                adj_sorted.remove(i)
    except Exception:
        pass

    try:
        for i in adj_sorted:
            if (len(subject_in_objectclause_dict)!= 0) and (object_objectclause_dict[-1] < i[-1] < subject_in_objectclause_dict[-1]):
                subject_in_objectclause_dict = i + ["*"] + subject_in_objectclause_dict
                adj_sorted.remove(i)
    except Exception:
        pass

    try:
        for i in adj_sorted:
            if (len(object_in_objectclause_dict)!= 0) and (subject_in_objectclause_dict[-1] < i[-1] < object_in_objectclause_dict[-1]):
                object_in_objectclause_dict = i + ["*"] + object_in_objectclause_dict
                adj_sorted.remove(i)
    except Exception:
        pass


    try:
        for i in adj_sorted:
            if (len(subject_represent_dict)!= 0) and (i[-1] < subject_represent_dict[-1]):
                subject_represent_dict = i + ["*"] + subject_represent_dict
                adj_sorted.remove(i)
    except Exception:
        pass

    try:
        for i in adj_sorted:
            if (len(subject_represent_dict)!= 0) and (len(object_represent_dict)!= 0) and ( subject_represent_dict[-1] < i[-1] < object_represent_dict[-1]):
                object_represent_dict = i + ["*"] + object_represent_dict
                adj_sorted.remove(i)
    except Exception:
        pass

    try:
        for i in adj_sorted:
            if (len(object_represent_dict)!= 0) and (len(object_in_represent_dict)!= 0) and ( object_represent_dict[-1] < i[-1] < object_in_represent_dict[-1]):
                object_in_represent_dict = i + ["*"] + object_in_represent_dict
                adj_sorted.remove(i)
    except Exception:
        pass

    index_adj = 0
    word = ""
    word_next = ""
    word_before = ""

    if len(adj_sorted) > 0:
        for i in adj_sorted:
            index_adj = int(i[-1])
            word = mark_dict_backup[index_adj]
            word_next = mark_dict_backup[index_adj + 1]
            word_before = mark_dict_backup[index_adj - 1]
            if word_next in subject_dict:
                index_word = subject_dict.index(word_next)
                subject_dict.insert(index_word, i[0:-1])
            elif word_before in subject_dict:
                index_word = subject_dict.index(word_before)
                subject_dict.insert(index_word+1, i[0:-1])
            elif word_next in subject_2_dict:
                index_word = subject_2_dict.index(word_next)
                subject_2_dict.insert(index_word, i[0:-1])
            elif word_before in subject_2_dict:
                index_word = subject_2_dict.index(word_before)
                subject_2_dict.insert(index_word+1, i[0:-1])
            elif word_next in object_dict:
                index_word = object_dict.index(word_next)
                object_dict.insert(index_word, i[0:-1])
            elif word_before in object_dict:
                index_word = object_dict.index(word_before)
                object_dict.insert(index_word+1, i[0:-1])
            elif word_next in object_2_dict:
                index_word = object_2_dict.index(word_next)
                object_2_dict.insert(index_word, i[0:-1])
            elif word_before in object_2_dict:
                index_word = object_2_dict.index(word_before)
                object_2_dict.insert(index_word+1, i[0:-1])
            elif word_next in subject_objectclause_dict:
                index_word = subject_objectclause_dict.index(word_next)
                subject_objectclause_dict.insert(index_word, i[0:-1])
            elif word_before in subject_objectclause_dict:
                index_word = subject_objectclause_dict.index(word_before)
                subject_objectclause_dict.insert(index_word+1, i[0:-1])
            elif word_next in object_objectclause_dict:
                index_word = object_objectclause_dict.index(word_next)
                object_objectclause_dict.insert(index_word, i[0:-1])
            elif word_before in object_objectclause_dict:
                index_word = object_objectclause_dict.index(word_before)
                object_objectclause_dict.insert(index_word+1, i[0:-1])
            elif word_next in object_in_objectclause_dict:
                index_word = object_in_objectclause_dict.index(word_next)
                object_in_objectclause_dict.insert(index_word, i[0:-1])
            elif word_before in object_in_objectclause_dict:
                index_word = object_in_objectclause_dict.index(word_before)
                object_in_objectclause_dict.insert(index_word+1, i[0:-1])
            elif word_next in subject_in_objectclause_dict:
                index_word = subject_in_objectclause_dict.index(word_next)
                subject_in_objectclause_dict.insert(index_word, i[0:-1])
            elif word_before in subject_in_objectclause_dict:
                index_word = subject_in_objectclause_dict.index(word_before)
                subject_in_objectclause_dict.insert(index_word+1, i[0:-1])
            elif word_next in subject_subjectclause_dict:
                index_word = subject_subjectclause_dict.index(word_next)
                subject_subjectclause_dict.insert(index_word, i[0:-1])
            elif word_before in subject_subjectclause_dict:
                index_word = subject_subjectclause_dict.index(word_before)
                subject_subjectclause_dict.insert(index_word+1, i[0:-1])
            elif word_next in object_subjectclause_dict:
                index_word = object_subjectclause_dict.index(word_next)
                object_subjectclause_dict.insert(index_word, i[0:-1])
            elif word_before in object_subjectclause_dict:
                index_word = object_subjectclause_dict.index(word_before)
                object_subjectclause_dict.insert(index_word+1, i[0:-1])
            elif word_next in subject_in_subjectclause_dict:
                index_word = subject_in_subjectclause_dict.index(word_next)
                subject_in_subjectclause_dict.insert(index_word, i[0:-1])
            elif word_before in subject_in_subjectclause_dict:
                index_word = subject_in_subjectclause_dict.index(word_before)
                subject_in_subjectclause_dict.insert(index_word+1, i[0:-1])
            elif word_next in object_in_subjectclause_dict:
                index_word = object_in_subjectclause_dict.index(word_next)
                object_in_subjectclause_dict.insert(index_word, i[0:-1])
            elif word_before in object_in_subjectclause_dict:
                index_word = object_in_subjectclause_dict.index(word_before)
                object_in_subjectclause_dict.insert(index_word+1, i[0:-1])
            elif word_next in subject_represent_dict:
                index_word = subject_represent_dict.index(word_next)
                subject_represent_dict.insert(index_word, i[0:-1])
            elif word_before in subject_represent_dict:
                index_word = subject_represent_dict.index(word_before)
                subject_represent_dict.insert(index_word+1, i[0:-1])
            elif word_next in object_represent_dict:
                index_word = object_represent_dict.index(word_next)
                object_represent_dict.insert(index_word, i[0:-1])
            elif word_before in object_represent_dict:
                index_word = object_represent_dict.index(word_before)
                object_represent_dict.insert(index_word+1, i[0:-1])
            elif word_next in object_in_represent_dict:
                index_word = object_in_represent_dict.index(word_next)
                object_in_represent_dict.insert(index_word, i[0:-1])
            elif word_before in object_in_represent_dict:
                index_word = object_in_represent_dict.index(word_before)
                object_in_represent_dict.insert(index_word+1, i[0:-1])

    adj_sorted = []

    #print("s_2", subject_2_dict)

    #2.2 把状附着到谓上
    list_index = []
    adv_sorted = []

    #print("adv", adv)

    try:
        if len(adv) != 0:
            for i in adv:
                if i != []:
                    list_index.append(i[-1])

        list_index.sort(reverse=True)

        for i in list_index:
            for j in adv:
                if j != []:
                    if i == int(j[-1]):
                        adv_sorted.append(j)
    except Exception:
        pass

    #print("adv_sorted", adv_sorted)

    #print("modal", modal_verb_dict)

    try:
        for i in adv_sorted:
            if (len(modal_verb_dict)!=0) and i[-1] != 0 and (i[-1] < modal_verb_dict[-1]):
                modal_verb_dict = i + ["*"] + modal_verb_dict
                adv_sorted.remove(i)
    except Exception:
        pass

    #print("1advp", modal_verb_dict)
    #print("1adv_sorted", adv_sorted)

    try:
        for i in adv_sorted:
            if (len(compare_verb_dict)!=0) and i[-1] != 0 and (i[-1] < modal_verb_dict[-1]):
                compare_verb_dict = i + ["*"] + compare_verb_dict
                adv_sorted.remove(i)
    except Exception:
        pass

    #print("2advp", compare_verb_dict)
    #print("2adv_sorted", adv_sorted)

    try:
        for i in adv_sorted:
            if (len(verb_j_dict)!=0) and i[-1] != 0 and (i[-1] < verb_j_dict[-1]):
                #print("ok")
                verb_j_dict = i + ["*"] + verb_j_dict
                adv_sorted.remove(i)
    except Exception:
        pass

    #print("3advp", verb_j_dict)
    #print("3adv_sorted", adv_sorted)
    #print("predicate", predicate_dict)

    try:
        for i in adv_sorted:
            if (len(predicate_dict) != 0 and len(modal_verb_dict)==0 and len(compare_verb_dict)== 0 and len(verb_j_dict)==0) and (i[-1] < predicate_dict[-1]):
                predicate_dict = i + ["*"] + predicate_dict
                adv_sorted.remove(i)
    except Exception:
        pass

    #print("4advp", predicate_dict)
    #print("4adv_sorted", adv_sorted)

    try:
        for i in adv_sorted:
            if (len(predicate_dict) != 0 and len(modal_verb_dict)!=0) and i[-1] != 0 and (modal_verb_dict[-1] < i[-1] < predicate_dict[-1]):
                predicate_dict = i + ["*"] + predicate_dict
                adv_sorted.remove(i)
    except Exception:
        pass

    #print("5advp", predicate_dict)
    #print("5adv_sorted", adv_sorted)

    try:
        for i in adv_sorted:
            if (len(predicate_dict) != 0 and len(compare_verb_dict)!=0) and i[-1] != 0 and (compare_verb_dict[-1] < i[-1] < predicate_dict[-1]):
                predicate_dict = i + ["*"] + predicate_dict
                adv_sorted.remove(i)
    except Exception:
        pass

    #print("6advp", predicate_dict)
    #print("6adv_sorted", adv_sorted)

    try:
        for i in adv_sorted:
            if (len(predicate_dict) != 0 and len(verb_j_dict)!=0) and i[-1] != 0 and (verb_j_dict[-1] < i[-1] < predicate_dict[-1]):
                predicate_dict = i + ["*"] + predicate_dict
                adv_sorted.remove(i)
    except Exception:
        pass

    #print("7advp", predicate_dict)
    #print("7adv_sorted", adv_sorted)

    try:
        for i in adv_sorted:
            if (len(predicate_2_dict) != 0) and i[-1] != 0 and (predicate_dict[-1] < i[-1] < predicate_2_dict[-1]):
                predicate_2_dict = i + ["*"] + predicate_2_dict
                adv_sorted.remove(i)
    except Exception:
        pass

    #print("8advp",predicate_2_dict)
    #print("8adv_sorted", adv_sorted)

    try:
        for i in adv_sorted:
            if (len(adj_asverb_dict) != 0 and len(modal_verb_dict)==0  and i[-1] != 0 and len(compare_verb_dict)== 0 and len(verb_j_dict)==0) and (i[-1] < adj_asverb_dict[-1]):
                adj_asverb_dict = i + ["*"] + adj_asverb_dict
                adv_sorted.remove(i)
    except Exception:
        pass

    #print("9advp",adj_asverb_dict)
    #print("9adv_sorted", adv_sorted)

    try:
        for i in adv_sorted:
            if (len(adj_asverb_dict) != 0 and len(modal_verb_dict) != 0) and i[-1] != 0 and (modal_verb_dict[-1] < i[-1] < adj_asverb_dict[-1]):
                adj_asverb_dict = i + ["*"] + adj_asverb_dict
                adv_sorted.remove(i)
    except Exception:
        pass

    #print("10advp", adj_asverb_dict)
    #print("10adv_sorted", adv_sorted)

    try:
        for i in adv_sorted:
            if (len(adj_asverb_dict) != 0 and len(compare_verb_dict) != 0) and i[-1] != 0 and (compare_verb_dict[-1] < i[-1] < adj_asverb_dict[-1]):
                adj_asverb_dict = i + ["*"] + adj_asverb_dict
                adv_sorted.remove(i)
    except Exception:
        pass

    #print("11advp", adj_asverb_dict)
    #print("11adv_sorted", adv_sorted)

    try:
        for i in adv_sorted:
            if (len(adj_asverb_dict) != 0 and len(verb_j_dict) != 0) and i[-1] != 0 and (verb_j_dict[-1] < i[-1] < adj_asverb_dict[-1]):
                adj_asverb_dict = i + ["*"] + adj_asverb_dict
                adv_sorted.remove(i)
    except Exception:
        pass

    #print("12advp", adj_asverb_dict)
    #print("12adv_sorted", adv_sorted)

    try:
        for i in adv_sorted:
            if (len(predicate_in_subjectclause_dict)!=0) and i[-1] != 0 and (i[-1] < predicate_in_subjectclause_dict[-1]):
                predicate_in_subjectclause_dict = i + ["*"] + predicate_in_subjectclause_dict
                adv_sorted.remove(i)
    except Exception:
        pass

    #print("13advp", predicate_in_subjectclause_dict)
    #print("13adv_sorted", adv_sorted)

    try:
        for i in adv_sorted:
            if (len(predicate_subjectclause_dict)!=0) and i[-1] != 0 and ( predicate_in_subjectclause_dict[-1] < i[-1] < predicate_subjectclause_dict[-1]):
                predicate_subjectclause_dict = i + ["*"] + predicate_subjectclause_dict
                adv_sorted.remove(i)
    except Exception:
        pass

    #print("14adv_sorted", adv_sorted)

    try:
        for i in adv_sorted:
            if (len(predicate_objectclause_dict)!=0) and i[-1] != 0 and (i[-1] < predicate_objectclause_dict[-1]):
                predicate_objectclause_dict = i + ["*"] + predicate_objectclause_dict
                adv_sorted.remove(i)
    except Exception:
        pass

    #print("15adv_sorted", adv_sorted)

    try:
        for i in adv_sorted:
            if (len(predicate_in_objectclause_dict)!=0) and i[-1] != 0 and (predicate_objectclause_dict[-1] < i[-1] < predicate_in_objectclause_dict[-1]):
                predicate_in_objectclause_dict = i + ["*"] + predicate_in_objectclause_dict
                adv_sorted.remove(i)
    except Exception:
        pass

    #print("16adv_sorted", adv_sorted)

    try:
        for i in adv_sorted:
            if (len(predicate_represent_dict)!=0) and i[-1] != 0 and (i[-1] < predicate_represent_dict[-1]):
                predicate_represent_dict = i + ["*"] + predicate_represent_dict
                adv_sorted.remove(i)
    except Exception:
        pass

    #print("17adv_sorted", adv_sorted)

    try:
        for i in adv_sorted:
            if (len(predicate_represent_dict)!=0) and (len(predicate_in_represent_dict)!=0) and ( predicate_represent_dict < i[-1] < predicate_in_represent_dict[-1]):
                predicate_in_represent_dict = i + ["*"] + predicate_in_represent_dict
                adv_sorted.remove(i)
    except Exception:
        pass

    #print("18adv_sorted", adv_sorted)

    index_adv = 0
    if len(adv_sorted) > 0:
        for i in adv_sorted:
            index_adv = int(i[-1])
            word = mark_dict_backup[index_adv]
            word_next = mark_dict_backup[index_adv + 1]
            if word_next in predicate_dict:
                index_word = predicate_dict.index(word_next)
                predicate_dict.insert(index_word, i[0:-1])
            elif word_next in predicate_2_dict:
                index_word = predicate_2_dict.index(word_next)
                predicate_2_dict.insert(index_word, i[0:-1])
            elif word_next in predicate_objectclause_dict:
                index_word = predicate_objectclause_dict.index(word_next)
                predicate_objectclause_dict.insert(index_word, i[0:-1])
            elif word_next in predicate_in_objectclause_dict:
                index_word = predicate_in_objectclause_dict.index(word_next)
                predicate_in_objectclause_dict.insert(index_word, i[0:-1])
            elif word_next in predicate_subjectclause_dict:
                index_word = predicate_subjectclause_dict.index(word_next)
                predicate_subjectclause_dict.insert(index_word, i[0:-1])
            elif word_next in predicate_in_subjectclause_dict:
                index_word = predicate_in_subjectclause_dict.index(word_next)
                predicate_in_subjectclause_dict.insert(index_word, i[0:-1])
            elif word_next in predicate_represent_dict:
                index_word = predicate_represent_dict.index(word_next)
                predicate_represent_dict.insert(index_word, i[0:-1])
            elif word_next in predicate_in_represent_dict:
                index_word = predicate_in_represent_dict.index(word_next)
                predicate_in_represent_dict.insert(index_word, i[0:-1])

    adv_sorted = []

    #print("18advp", predicate_in_represent_dict)

    #3. 把补语附着到谓上
    list_index = []
    complement_sorted = []

    try:
        if len(complement) != 0:
            for i in complement:
                list_index.append(i[-1])

        list_index.sort(reverse=True)
        # print("list_index", list_index)
        for i in list_index:
            for j in complement:
                if i == j[-1]:
                    complement_sorted.append(j)
        # print("complement_sorted", complement_sorted)
    except Exception:
        pass

    try:
        for i in complement_sorted:
            if (len(predicate_dict) != 0) and i[-1] != len(mark_dict_backup)-1 and ( predicate_dict[-1] <i[-1] < predicate_2_dict[-1]):
                predicate_dict = predicate_dict + ["*"] + i
                complement_sorted.remove(i)
    except Exception:
        pass

    try:
        for i in complement_sorted:
            if (len(adj_asverb_dict) != 0) and i[-1] != len(mark_dict_backup)-1 and (i[-1] > adj_asverb_dict[-1]):
                adj_asverb_dict = adj_asverb_dict + ["*"] + i
                complement_sorted.remove(i)
    except Exception:
        pass

    try:
        for i in complement_sorted:
            if (len(predicate_2_dict) != 0) and i[-1] != len(mark_dict_backup)-1 and (predicate_2_dict[-1] < i[-1]):
                predicate_2_dict = predicate_2_dict + ["*"] + i
                complement_sorted.remove(i)
    except Exception:
        pass

    try:
        for i in complement_sorted:
            if (len(predicate_in_represent_dict) != 0) and i[-1] != len(mark_dict_backup)-1 and (i[-1] > predicate_in_represent_dict[-1]):
                predicate_in_represent_dict = predicate_in_represent_dict + ["*"] + i
                complement_sorted.remove(i)
    except Exception:
        pass

    # 4. 把状附着到宾上
    list_index = []
    #print("adv", adv_sorted)

    #print("o", object_dict)
    try:
        for i in adv_sorted:
            if (len(object_dict)!= 0) and (int(i[-1]) == int(object_dict[-1])-1):
                object_dict = i + ["*"] + object_dict
                adv_sorted.remove(i)
    except Exception:
        pass

    #print("19adv_sorted", adv_sorted)

    try:
        for i in adv_sorted:
            if (len(object_in_objectclause_dict)!= 0) and (int(i[-1]) == int(object_in_objectclause_dict[-1])-1):
                object_in_objectclause_dict = i + ["*"] + object_in_objectclause_dict
                adv_sorted.remove(i)
    except Exception:
        pass

    #print("20adv_sorted", adv_sorted)

    try:
        for i in adv_sorted:
            if (len(object_in_represent_dict)!= 0) and (int(i[-1]) == int(object_in_represent_dict[-1])-1):
                object_in_represent_dict = i + ["*"] + object_in_represent_dict
                adv_sorted.remove(i)
    except Exception:
        pass

    #print("21adv_sorted", adv_sorted)

    index_com = 0
    if len(complement_sorted) > 0:
        for i in complement_sorted:
            index_com = int(i[-1])
            word = mark_dict_backup[index_com]
            word_before = mark_dict_backup[index_com - 1]
            if word_before in predicate_dict:
                index_word = predicate_dict.index(word_before)
                predicate_dict.insert(index_word+1, i[0:-1])
            elif word_before in predicate_2_dict:
                index_word = predicate_2_dict.index(word_before)
                predicate_2_dict.insert(index_word+1, i[0:-1])
            elif word_before in predicate_objectclause_dict:
                index_word = predicate_objectclause_dict.index(word_before)
                predicate_objectclause_dict.insert(index_word+1, i[0:-1])
            elif word_before in predicate_in_objectclause_dict:
                index_word = predicate_in_objectclause_dict.index(word_before)
                predicate_in_objectclause_dict.insert(index_word+1, i[0:-1])
            elif word_before in predicate_subjectclause_dict:
                index_word = predicate_subjectclause_dict.index(word_before)
                predicate_subjectclause_dict.insert(index_word+1, i[0:-1])
            elif word_before in predicate_in_subjectclause_dict:
                index_word = predicate_in_subjectclause_dict.index(word_before)
                predicate_in_subjectclause_dict.insert(index_word+1, i[0:-1])
            elif word_before in predicate_represent_dict:
                index_word = predicate_represent_dict.index(word_before)
                predicate_represent_dict.insert(index_word+1, i[0:-1])
            elif word_before in predicate_in_represent_dict:
                index_word = predicate_in_represent_dict.index(word_before)
                predicate_in_represent_dict.insert(index_word+1, i[0:-1])

    complement_sorted = []
    #print("subject_represent_dict", subject_represent_dict)
    #print("predicate_represent_dict", predicate_represent_dict)
    #print("object_represent_dict", object_represent_dict)
    #print("predicate_in_represent_dict", predicate_in_represent_dict)
    #print("object_in_represent_dict", object_in_represent_dict)
    #print("mark_dict_backup", mark_dict_backup)

    #5. 把主谓宾各部分连接
    try:
        if len(adv_there_be_dict) != 0:
            main_structure_dict = adv_there_be_dict + ["*"] + predicate_dict + ["+"] + object_dict
    except Exception:
        pass

    #print("1",main_structure_dict)

    try:
        if (len(subject_2_dict) != 0) and len(predicate_2_dict) != 0:
            main_structure_dict = subject_dict + ["+"] + predicate_dict + ["+"] + object_dict + ["+"] + subject_2_dict + ["+"] + predicate_2_dict + ["+"] + object_2_dict
    except Exception:
        pass

    #print("2",main_structure_dict)

    try:
        if len(subject_objectclause_dict) != 0 and len(predicate_objectclause_dict) != 0 and len(object_objectclause_dict) != 0 and len(modal_verb_dict) != 0:
            main_structure_dict = subject_objectclause_dict + ["+"] + modal_verb_dict + ["+"] + predicate_objectclause_dict + ["+"] + object_objectclause_dict
    except Exception:
        pass

    #print("3",main_structure_dict)

    try:
        if (len(subject_objectclause_dict) == 0 and len(predicate_objectclause_dict) == 0 and len(object_objectclause_dict) == 0) and (
        len(subject_2_dict) == 0 and len(predicate_2_dict) == 0) and (len(modal_verb_dict) != 0):
            main_structure_dict = subject_dict + ["+"] + modal_verb_dict + ["+"] + predicate_dict + ["+"] + object_dict
    except Exception:
        pass

    #print("4",main_structure_dict)

    try:
        if (len(subject_objectclause_dict) == 0 and len(predicate_objectclause_dict) == 0 and len(object_objectclause_dict) == 0) and (len(subject_2_dict) != 0 and len(predicate_2_dict) != 0) and (len(modal_verb_dict) != 0):
            main_structure_dict = subject_dict + ["+"] + modal_verb_dict + ["+"] + predicate_dict + ["+"] + object_dict + ["+"] + predicate_2_dict + ["+"] + object_2_dict
    except Exception:
        pass

    #print("5",main_structure_dict)

    try:
        if (len(subject_objectclause_dict) == 0 and len(predicate_objectclause_dict) == 0 and len(object_objectclause_dict) == 0) and (len(subject_2_dict) != 0 and len(modal_verb_dict) != 0):
            main_structure_dict = subject_dict + ["+"] + modal_verb_dict + ["+"] + subject_2_dict + ["+"] + predicate_dict + ["+"]  + object_dict
    except Exception:
        pass

    #print("6",main_structure_dict)

    try:
        if (len(subject_objectclause_dict) == 0 and len(predicate_objectclause_dict) == 0 and len(object_objectclause_dict) == 0) and (len(subject_dict) != 0 and len(modal_verb_dict) != 0 and len(predicate_dict) != 0):
            main_structure_dict = subject_dict + ["+"] + modal_verb_dict + ["+"] + predicate_dict + + object_dict
    except Exception:
        pass

    #print("7",main_structure_dict)

    try:
        if (len(subject_objectclause_dict) == 0 and len(predicate_objectclause_dict) == 0 and len(object_objectclause_dict) == 0) and (len(subject_dict) != 0 and len(verb_j_dict) != 0 and len(predicate_dict) != 0) and len(object_dict) != 0 and len(object_2_dict) != 0:
            main_structure_dict = subject_dict + ["+"] + verb_j_dict + ["+"] + object_dict + ["+"] + predicate_dict + ["+"] + object_2_dict
        elif (len(subject_objectclause_dict) == 0 and len(predicate_objectclause_dict) == 0 and len(object_objectclause_dict) == 0) and (len(subject_dict) != 0 and len(verb_j_dict) != 0 and len(predicate_dict) != 0) and len(object_dict) != 0 and len(object_2_dict) == 0:
            main_structure_dict = subject_dict + ["+"] + verb_j_dict + ["+"] + predicate_dict + ["+"] + object_dict
        elif (len(subject_objectclause_dict) == 0 and len(predicate_objectclause_dict) == 0 and len(object_objectclause_dict) == 0) and (len(subject_dict) != 0 and len(verb_j_dict) != 0 and len(predicate_dict) != 0) and len(object_dict) == 0 and len(object_2_dict) == 0:
            main_structure_dict = subject_dict + ["+"] + verb_j_dict + ["+"] + predicate_dict + ["+"]
    except Exception:
        pass

    #print("80",main_structure_dict)

    try:
        if (len(subject_objectclause_dict) == 0 and len(predicate_objectclause_dict) == 0 and len(object_objectclause_dict) == 0) and (len(subject_2_dict) == 0 and len(predicate_2_dict) == 0) and (len(modal_verb_dict) == 0) and (len(verb_j_dict) == 0) and (len(subject_dict) != 0 and len(predicate_dict) != 0 and len(object_dict) != 0):
            main_structure_dict = subject_dict + ["+"] + predicate_dict + ["+"] + object_dict
    except Exception:
        pass

    #print("8",main_structure_dict)

    try:
        if (len(subject_objectclause_dict) == 0 and len(predicate_objectclause_dict) == 0 and len(object_objectclause_dict) == 0) and (len(subject_2_dict) == 0 and len(predicate_2_dict) == 0) and (len(modal_verb_dict) == 0) and (len(verb_j_dict) == 0)  and (len(subject_dict) == 0 and len(predicate_dict) != 0 and len(object_dict) != 0):
            main_structure_dict = predicate_dict + ["+"] + object_dict
    except Exception:
        pass

    #print("81", main_structure_dict)

    try:
        if (len(subject_objectclause_dict) == 0 and len(predicate_objectclause_dict) == 0 and len(object_objectclause_dict) == 0) and (len(subject_2_dict) == 0 and len(predicate_2_dict) == 0) and (len(modal_verb_dict) == 0) and (len(verb_j_dict) == 0)  and (len(subject_dict) == 0 and len(predicate_dict) != 0 and len(object_dict) == 0):
            main_structure_dict = predicate_dict + ["+"] + object_dict
    except Exception:
        pass

    #print("82", main_structure_dict)

    try:
        if (len(subject_objectclause_dict) == 0 and len(predicate_objectclause_dict) == 0 and len(object_objectclause_dict) == 0) and (
            len(subject_dict) != 0 and len(predicate_dict) != 0 and len(object_dict) == 0 and len(subject_2_dict) != 0 and len(predicate_2_dict) != 0 and len(object_2_dict == 0)) and (len(modal_verb_dict) == 0) and (len(verb_j_dict) == 0) :
            main_structure_dict = subject_dict + ["+"] + predicate_dict + ["+"] + subject_2_dict + ["+"] + predicate_2_dict
    except Exception:
        pass

    #print("9",main_structure_dict)

    try:
        if len(subject_dict) != 0 and len(predicate_dict) != 0 and len(object_dict) != 0 and len(subject_2_dict) == 0 and len(predicate_2_dict) != 0 and len(object_2_dict) != 0 and len(modal_verb_dict) == 0 and (len(verb_j_dict) == 0) :
            main_structure_dict = subject_dict + ["+"] + predicate_dict + ["+"] + object_dict + ["+"] + predicate_2_dict + ["+"] + object_2_dict
    except Exception:
        pass

    #print("9.5",main_structure_dict)

    try:
        if (len(subject_objectclause_dict) != 0 and len(predicate_objectclause_dict) != 0 and len(object_objectclause_dict) != 0) and (len(subject_in_objectclause_dict) != 0 and len(predicate_in_objectclause_dict) != 0 and len(object_in_objectclause_dict) != 0) and (
            len(subject_2_dict) == 0 and len(predicate_2_dict) == 0) and (len(modal_verb_dict) == 0) and (len(verb_j_dict) == 0) :
            main_structure_dict = subject_objectclause_dict + ["+"] + predicate_objectclause_dict + ["+"] + object_objectclause_dict + ["+"] + subject_in_objectclause_dict + ["+"] + predicate_in_objectclause_dict + ["+"] + object_in_objectclause_dict
    except Exception:
        pass

    #print("10",main_structure_dict)

    try:
        if (len(subject_objectclause_dict) != 0 and len(predicate_objectclause_dict) != 0 and len(object_objectclause_dict) == 0) and (len(subject_in_objectclause_dict) != 0 and len(predicate_in_objectclause_dict) != 0 and len(object_in_objectclause_dict) != 0) and (
            len(subject_2_dict) == 0 and len(predicate_2_dict) == 0) and (len(modal_verb_dict) == 0) and (len(verb_j_dict) == 0):
            main_structure_dict = subject_objectclause_dict + ["+"] + predicate_objectclause_dict + ["+"] + subject_in_objectclause_dict + ["+"] + predicate_in_objectclause_dict + ["+"] + object_in_objectclause_dict
        elif (len(subject_objectclause_dict) != 0 and len(predicate_objectclause_dict) != 0 and len(object_objectclause_dict) == 0) and (len(subject_in_objectclause_dict) != 0 and len(predicate_in_objectclause_dict) != 0 and len(object_in_objectclause_dict) == 0) and (
            len(subject_2_dict) == 0 and len(predicate_2_dict) == 0) and (len(modal_verb_dict) == 0) and (len(verb_j_dict) == 0):
            main_structure_dict = subject_objectclause_dict + ["+"] + predicate_objectclause_dict + ["+"] + subject_in_objectclause_dict + ["+"] + predicate_in_objectclause_dict
    except Exception:
        pass

    #print("11",main_structure_dict)

    try:
        if (len(subject_objectclause_dict) != 0 and len(predicate_objectclause_dict) != 0 and len(object_objectclause_dict) != 0) and (len(subject_in_objectclause_dict) == 0 and len(predicate_in_objectclause_dict) != 0 and len(object_in_objectclause_dict) != 0) and (len(subject_2_dict) == 0 and len(predicate_2_dict) == 0) and (len(modal_verb_dict) == 0) and (len(verb_j_dict) == 0):
            main_structure_dict = subject_objectclause_dict + ["+"] + predicate_objectclause_dict + ["+"] + object_objectclause_dict + ["+"] + predicate_in_objectclause_dict + ["+"] + object_in_objectclause_dict
    except Exception:
        pass

    #print("12",main_structure_dict)

    try:
        if (len(subject_objectclause_dict) != 0 and len(predicate_objectclause_dict) != 0 and len(object_objectclause_dict) == 0) and (len(subject_in_objectclause_dict) == 0 and len(predicate_in_objectclause_dict) != 0 and len(object_in_objectclause_dict) != 0) and (len(subject_2_dict) == 0 and len(predicate_2_dict) == 0) and (len(modal_verb_dict) == 0) and (len(verb_j_dict) == 0):
            main_structure_dict = subject_objectclause_dict + ["+"] + predicate_objectclause_dict + ["+"] + predicate_in_objectclause_dict + ["+"] + object_in_objectclause_dict
    except Exception:
        pass

    #print("13",main_structure_dict)

    try:
        if len(subject_represent_dict) != 0 and len(predicate_represent_dict) != 0 and len(object_represent_dict) != 0 and len(predicate_in_represent_dict) != 0 and len(object_in_represent_dict) != 0 and (len(modal_verb_dict) == 0) and (len(verb_j_dict) == 0):
            main_structure_dict = subject_represent_dict + ["+"] + predicate_represent_dict + ["+"] + object_represent_dict + ["+"] + predicate_in_represent_dict + ["+"] + object_in_represent_dict
    except Exception:
        pass

    #print("14",main_structure_dict)

    try:
        if (len(subject_in_subjectclause_dict) != 0 and len(predicate_in_subjectclause_dict) != 0 and len(object_in_subjectclause_dict) != 0) and (len(subject_subjectclause_dict) != 0 and len(predicate_subjectclause_dict) != 0 and len(object_subjectclause_dict) != 0) and (len(subject_2_dict) == 0 and len(predicate_2_dict) == 0) and (len(modal_verb_dict) == 0) and (len(verb_j_dict) == 0):
            main_structure_dict = subject_in_subjectclause_dict + ["+"] + predicate_in_subjectclause_dict + ["+"] + object_in_subjectclause_dict + ["+"] + subject_subjectclause_dict + ["+"] + predicate_subjectclause_dict + ["+"] + object_subjectclause_dict
        elif (len(subject_in_subjectclause_dict) != 0 and len(predicate_in_subjectclause_dict) != 0 and len(object_in_subjectclause_dict) != 0) and (len(subject_subjectclause_dict) == 0 and len(predicate_subjectclause_dict) != 0 and len(object_subjectclause_dict) != 0) and (len(subject_2_dict) == 0 and len(predicate_2_dict) == 0) and (len(modal_verb_dict) == 0) and (len(verb_j_dict) == 0):
            main_structure_dict = subject_in_subjectclause_dict + ["+"] + predicate_in_subjectclause_dict + ["+"] + object_in_subjectclause_dict + ["+"] + predicate_subjectclause_dict + ["+"] + object_subjectclause_dict
        elif (len(subject_in_subjectclause_dict) != 0 and len(predicate_in_subjectclause_dict) != 0 and len(object_in_subjectclause_dict) != 0) and (len(subject_subjectclause_dict) != 0 and len(predicate_subjectclause_dict) != 0 and len(object_subjectclause_dict) == 0) and (len(subject_2_dict) == 0 and len(predicate_2_dict) == 0) and (len(modal_verb_dict) == 0) and (len(verb_j_dict) == 0):
            main_structure_dict = subject_in_subjectclause_dict + ["+"] + predicate_in_subjectclause_dict + ["+"] + object_in_subjectclause_dict + ["+"] + subject_subjectclause_dict + ["+"] + predicate_subjectclause_dict
        elif (len(subject_in_subjectclause_dict) != 0 and len(predicate_in_subjectclause_dict) != 0 and len(object_in_subjectclause_dict) != 0) and (len(subject_subjectclause_dict) == 0 and len(predicate_subjectclause_dict) != 0 and len(object_subjectclause_dict) == 0) and (len(subject_2_dict) == 0 and len(predicate_2_dict) == 0) and (len(modal_verb_dict) == 0) and (len(verb_j_dict) == 0):
            main_structure_dict = subject_in_subjectclause_dict + ["+"] + predicate_in_subjectclause_dict + ["+"] + object_in_subjectclause_dict + ["+"] + predicate_subjectclause_dict
        elif (len(subject_in_subjectclause_dict) == 0 and len(predicate_in_subjectclause_dict) != 0 and len(object_in_subjectclause_dict) != 0) and (len(subject_subjectclause_dict) != 0 and len(predicate_subjectclause_dict) != 0 and len(object_subjectclause_dict) != 0) and (len(subject_2_dict) == 0 and len(predicate_2_dict) == 0) and (len(modal_verb_dict) == 0) and (len(verb_j_dict) == 0):
            main_structure_dict = predicate_in_subjectclause_dict + ["+"] + object_in_subjectclause_dict + ["+"] + subject_subjectclause_dict + ["+"] + predicate_subjectclause_dict + ["+"] + object_subjectclause_dict
        elif (len(subject_in_subjectclause_dict) == 0 and len(predicate_in_subjectclause_dict) != 0 and len(object_in_subjectclause_dict) != 0) and (len(subject_subjectclause_dict) == 0 and len(predicate_subjectclause_dict) != 0 and len(object_subjectclause_dict) != 0) and (len(subject_2_dict) == 0 and len(predicate_2_dict) == 0) and (len(modal_verb_dict) == 0) and (len(verb_j_dict) == 0):
            main_structure_dict = predicate_in_subjectclause_dict + ["+"] + object_in_subjectclause_dict + ["+"] + predicate_subjectclause_dict + ["+"] + object_subjectclause_dict
        elif (len(subject_in_subjectclause_dict) == 0 and len(predicate_in_subjectclause_dict) != 0 and len(object_in_subjectclause_dict) != 0) and (len(subject_subjectclause_dict) != 0 and len(predicate_subjectclause_dict) != 0 and len(object_subjectclause_dict) == 0) and (len(subject_2_dict) == 0 and len(predicate_2_dict) == 0) and (len(modal_verb_dict) == 0) and (len(verb_j_dict) == 0):
            main_structure_dict = predicate_in_subjectclause_dict + ["+"] + object_in_subjectclause_dict + ["+"] + subject_subjectclause_dict + ["+"] + predicate_subjectclause_dict
        elif (len(subject_in_subjectclause_dict) == 0 and len(predicate_in_subjectclause_dict) != 0 and len(object_in_subjectclause_dict) != 0) and (len(subject_subjectclause_dict) == 0 and len(predicate_subjectclause_dict) != 0 and len(object_subjectclause_dict) == 0) and (len(subject_2_dict) == 0 and len(predicate_2_dict) == 0) and (len(modal_verb_dict) == 0) and (len(verb_j_dict) == 0):
            main_structure_dict = predicate_in_subjectclause_dict + ["+"] + object_in_subjectclause_dict + ["+"] + predicate_subjectclause_dict
        elif (len(subject_in_subjectclause_dict) != 0 and len(predicate_in_subjectclause_dict) != 0 and len(object_in_subjectclause_dict) == 0) and (len(subject_subjectclause_dict) != 0 and len(predicate_subjectclause_dict) != 0 and len(object_subjectclause_dict) != 0) and (len(subject_2_dict) == 0 and len(predicate_2_dict) == 0) and (len(modal_verb_dict) == 0) and (len(verb_j_dict) == 0):
            main_structure_dict = subject_in_subjectclause_dict + ["+"] + predicate_in_subjectclause_dict + ["+"] + subject_subjectclause_dict + ["+"] + predicate_subjectclause_dict + ["+"] + object_subjectclause_dict
        elif (len(subject_in_subjectclause_dict) != 0 and len(predicate_in_subjectclause_dict) != 0 and len(object_in_subjectclause_dict) == 0) and (len(subject_subjectclause_dict) == 0 and len(predicate_subjectclause_dict) != 0 and len(object_subjectclause_dict) != 0) and (len(subject_2_dict) == 0 and len(predicate_2_dict) == 0) and (len(modal_verb_dict) == 0) and (len(verb_j_dict) == 0):
            main_structure_dict = subject_in_subjectclause_dict + ["+"] + predicate_in_subjectclause_dict + ["+"] + predicate_subjectclause_dict + ["+"] + object_subjectclause_dict
        elif (len(subject_in_subjectclause_dict) != 0 and len(predicate_in_subjectclause_dict) != 0 and len(object_in_subjectclause_dict) == 0) and (len(subject_subjectclause_dict) != 0 and len(predicate_subjectclause_dict) != 0 and len(object_subjectclause_dict) == 0) and (len(subject_2_dict) == 0 and len(predicate_2_dict) == 0) and (len(modal_verb_dict) == 0) and (len(verb_j_dict) == 0):
            main_structure_dict = subject_in_subjectclause_dict + ["+"] + predicate_in_subjectclause_dict + ["+"] + subject_subjectclause_dict + ["+"] + predicate_subjectclause_dict
        elif (len(subject_in_subjectclause_dict) != 0 and len(predicate_in_subjectclause_dict) != 0 and len(object_in_subjectclause_dict) == 0) and (len(subject_subjectclause_dict) == 0 and len(predicate_subjectclause_dict) != 0 and len(object_subjectclause_dict) == 0) and (len(subject_2_dict) == 0 and len(predicate_2_dict) == 0) and (len(modal_verb_dict) == 0) and (len(verb_j_dict) == 0):
            main_structure_dict = subject_in_subjectclause_dict + ["+"] + predicate_in_subjectclause_dict + ["+"] + predicate_subjectclause_dict
        elif (len(subject_in_subjectclause_dict) == 0 and len(predicate_in_subjectclause_dict) != 0 and len(object_in_subjectclause_dict) == 0) and (len(subject_subjectclause_dict) != 0 and len(predicate_subjectclause_dict) != 0 and len(object_subjectclause_dict) != 0) and (len(subject_2_dict) == 0 and len(predicate_2_dict) == 0) and (len(modal_verb_dict) == 0) and (len(verb_j_dict) == 0):
            main_structure_dict = predicate_in_subjectclause_dict + ["+"] + subject_subjectclause_dict + ["+"] + predicate_subjectclause_dict + ["+"] + object_subjectclause_dict
        elif (len(subject_in_subjectclause_dict) == 0 and len(predicate_in_subjectclause_dict) != 0 and len(object_in_subjectclause_dict) == 0) and (len(subject_subjectclause_dict) == 0 and len(predicate_subjectclause_dict) != 0 and len(object_subjectclause_dict) != 0) and (len(subject_2_dict) == 0 and len(predicate_2_dict) == 0) and (len(modal_verb_dict) == 0) and (len(verb_j_dict) == 0):
            main_structure_dict = predicate_in_subjectclause_dict + ["+"] + predicate_subjectclause_dict + ["+"] + object_subjectclause_dict
        elif (len(subject_in_subjectclause_dict) == 0 and len(predicate_in_subjectclause_dict) != 0 and len(object_in_subjectclause_dict) == 0) and (len(subject_subjectclause_dict) != 0 and len(predicate_subjectclause_dict) != 0 and len(object_subjectclause_dict) == 0) and (len(subject_2_dict) == 0 and len(predicate_2_dict) == 0) and (len(modal_verb_dict) == 0) and (len(verb_j_dict) == 0):
            main_structure_dict = predicate_in_subjectclause_dict + ["+"] + subject_subjectclause_dict + ["+"] + predicate_subjectclause_dict
        elif (len(subject_in_subjectclause_dict) == 0 and len(predicate_in_subjectclause_dict) != 0 and len(object_in_subjectclause_dict) == 0) and (len(subject_subjectclause_dict) == 0 and len(predicate_subjectclause_dict) != 0 and len(object_subjectclause_dict) == 0) and (len(subject_2_dict) == 0 and len(predicate_2_dict) == 0) and (len(modal_verb_dict) == 0) and (len(verb_j_dict) == 0):
            main_structure_dict = predicate_in_subjectclause_dict + ["+"] + predicate_subjectclause_dict
    except Exception:
        pass

    #print("15",main_structure_dict)

    try:
        if len(subject_dict) != 0 and len(predicate_dict) != 0 and len(object_dict) != 0 and len(predicate_2_dict) == 0 and len(predicate_objectclause_dict) == 0 and len(predicate_subjectclause_dict) == 0 and len(predicate_represent_dict) == 0 and len(modal_verb_dict) == 0 and (len(verb_j_dict) == 0):
            main_structure_dict = subject_dict + ["+"] + predicate_dict + ["+"] + object_dict

    except Exception:
        pass

    #print("16",main_structure_dict)

    try:
        if len(subject_dict) != 0 and len(predicate_dict) != 0 and len(object_dict) == 0 and len(predicate_2_dict) == 0 and len(predicate_objectclause_dict) == 0 and len(predicate_subjectclause_dict) == 0 and len(predicate_represent_dict) == 0 and len(modal_verb_dict) == 0 and (len(verb_j_dict) == 0):
            main_structure_dict = subject_dict + ["+"] + predicate_dict
    except Exception:
        pass

    #print("17",main_structure_dict)

    try:
        if len(subject_dict) != 0 and len(predicate_dict) != 0 and len(subject_2_dict) != 0 and len(
                predicate_2_dict) != 0 and len(predicate_objectclause_dict) == 0 and len(predicate_subjectclause_dict) == 0 and len(predicate_represent_dict) == 0 and len(modal_verb_dict) == 0 and (len(verb_j_dict) == 0):
            main_structure_dict = subject_dict + ["+"] + predicate_dict + ["+"] + subject_2_dict + [
                "+"] + predicate_2_dict
    except Exception:
        pass

    #print("18", main_structure_dict)

    try:
        if len(subject_dict) != 0 and len(predicate_dict) == 0 and len(subject_2_dict) == 0 and len(
                predicate_2_dict) == 0 and len(predicate_objectclause_dict) == 0 and len(predicate_subjectclause_dict) == 0 and len(predicate_represent_dict) == 0 and len(modal_verb_dict) == 0 and (len(verb_j_dict) == 0):
            main_structure_dict = subject_dict
    except Exception:
        pass

    #print("19", main_structure_dict)

    #如果选择完主谓宾的剩余句式结构中还有元素，则直接插入已标注主谓宾的main_structure_dict
    try:
        for i in re:
            if i == "main_rest":
                index_i = re.index(i)
                main_rest = re[index_i + 1]

        index_mark_backup = 0
        index_insert = 0

        for i in mark_dict_backup:
            if i == main_rest[-1]:
                index_mark_backup = mark_dict_backup.index(i)

        for i in main_structure_dict:
            if isinstance(i, int) and index_mark_backup == i - 1:
                index_insert = main_structure_dict.index(i)

        main_structure_dict.insert(index_insert - 1, main_rest)
    except Exception:
        pass

    #print("20", main_structure_dict)


    #print("conj_dict", conj_dict)
    #print("main_structure_dict", main_structure_dict)

    try:
        for j in main_structure_dict:
            index_j = main_structure_dict.index(j)
            if isinstance(j, int):
                if conj_dict[-1] == j - 1:
                    main_structure_dict.insert(index_j - 2, conj_dict[0])
                    main_structure_dict.insert(index_j - 1, conj_dict[-1])
                    main_structure_dict.insert(index_j, "+")
                    break
            else:
                pass
    except Exception:
        pass

    try:
        if main_structure_dict[-1] == '+':
            main_structure_dict = main_structure_dict[:-2]
    except Exception:
        pass

    try:
        for i in adv_sorted:
            if i[-1] == 0:
                main_structure_dict.insert(0, i)
                main_structure_dict.insert(1, "*")
                main_structure_dict.insert(2, "(")
                main_structure_dict.insert(-1, ")")
    except Exception:
        pass

    try:
        for i in complement_sorted:
            if i[-1] == len(mark_dict_backup):
                main_structure_dict.insert(-1, i)
                main_structure_dict.insert(-2, "*")
                main_structure_dict.insert(0, "(")
                main_structure_dict.insert(-3, ")")
    except Exception:
        pass

    # print("s", subject_dict)
    # print("p", predicate_dict)
    #print("main_structure_dict", main_structure_dict)

    main_structure_dict_adj = []
    main_structure_dict_adv = []
    predicate_dict = []
    subject_dict = []
    subject_2_dict = []
    object_dict = []
    object_2_dict = []
    predicate_2_dict = []
    modal_verb_dict = []
    compare_verb_dict = []
    conj_dict = []
    two_verbs_dict = []
    verb_j_dict = []
    predicate_objectclause_dict = []
    subject_objectclause_dict = []
    object_objectclause_dict = []
    predicate_in_objectclause_dict = []
    object_in_objectclause_dict = []
    subject_in_objectclause_dict = []
    predicate_in_objectclause_dict = []
    object_in_objectclause_dict = []
    subject_in_objectclause_dict = []
    adv_there_be_dict = []
    adj_ap_n_de_dict = []
    adj_should_dict = []
    adj_v_dict = []
    adj_np_v_dict = []
    adj_number_dict = []
    adj_tp_dict = []
    adj_double_dict = []
    adj_and_dict = []
    adj_and_v_dict = []
    adj_belong_dict = []
    adj_de_single_dict = []
    adj_connected_complex_dict = []
    adv_compare_dict = []
    adj_n_1_dict = []
    adj_between_dict = []
    adj_prep_dict = []
    adj_begin_dict = []
    middle_adv_dict = []
    tp_adv_dict = []
    tp_adv_dict_single = []
    tp_adv_dict_ft = []
    tp_adv_dict_ft_single = []
    adv_sigh_dict = []
    adv_as_dict = []
    adv_middle_dict = []
    adv_simple_dict = []
    adv_with_sb_dict = []
    adv_inorderto_dict = []
    adv_there_be_dict = []
    adv_through_dict = []
    adv_until_dict = []
    complement_degree_to_dict = []
    complement_drgree_de_dict = []
    complement_adj_le_dict = []
    complement_degree_dict = []
    complement_specialuse_dict = []
    complement_specialtreat_dict = []
    adv_middle_dict = []
    adv_with_sb_dict = []
    adv_inorderto_dict = []
    adv_through_dict = []
    adv_until_dict = []
    mark_dict = []
    main_structure_dict_del_conj = []

    #print("mark_dict_backup", mark_dict_backup)

    return main_structure_dict

def Recog_conj():
    global sen
    global conj_dict
    global mark_dict
    global df

    # 1. 标记
    Load_database_marks()
    Mark_words()

    #print("md", mark_dict)

    # 2.处理连词
    try:
        for i in mark_dict:
            index_i_conj = mark_dict.index(i)
            if (i[1][2:8] == "010101" or i[1][9:15] == "010101" or i[1][16:22] == "010101" or i[1][23:29] == "010101" or i[1][30:36] == "010101"):
                conj_dict.append(i)
    except Exception:
        pass

    #print("conj_dict", conj_dict)

def Pre_treat_backbone(c):
    global mark_dict
    global sen
    global conj_dict
    global df

    # 1. 分词
    #Cut_words(c)

    # 2. 中文人名识别及标注
    #Chinese_name_recognition()

    # 3. 加载词性标注数据库，建立数词列表/专有名词表，标注数词词性
    Load_database_marks()
    YP_cut_words()
    Mark_number()
    Mark_words(c)

    #print("mark_dict", mark_dict)

    # 4. 词性优选原则处理
    Component_priority()

    # 5. 处理定语
    Treat_adj()

    # 6. 处理状语、补语
    Treat_adv_complement()

    # 7. 联合所有部分
    re = Treat_backbone()
    #print("re", re)

    #print("s", subject_dict)
    #print("p", predicate_dict)
    #print("o", object_dict)

    return re

def Post_treat_backbone(re):
    global mark_dict
    global sen
    global conj_dict
    global df

    # 1. 备注各部分名称
    Write_components()

    # 2. 联合所有部分
    return Combine_all(re)

def Main_structure_analyze(c):

    # 1. 分词
    Cut_words(c)

    # 2. 中文人名识别及标注/百家姓加载
    #Chinese_name_recognition()
    Load_baijia_list()

    # 3. 加载词性标注数据库，建立数词列表/专有名词表，标注数词词性
    Load_database_marks()
    YP_cut_words()
    Mark_number()
    Mark_words()

    # 4. 词性优选原则处理
    Component_priority()

    # 5. 处理定语
    Treat_adj()

    # 6. 处理状语、补语
    Treat_adv_complement()

    # 7. 处理主结构
    Treat_backbone()

    # 8. 备注各部分名称
    Write_components()

    # 9. 联合所有部分
    return Combine_all()

def Plan_b():
    global main_structure_dict
    global main_structure_dict_backup
    global sen
    global conj_dict
    global df
    global subject_dict
    global predicate_dict
    global object_dict


    print("m", main_structure_dict_backup)
    index_i = 0

    try:
        for i in main_structure_dict_backup:
            if (i[1][2:8] == "000001" or i[1][9:15] == "000001" or i[1][16:22] == "000001" or i[1][23:29] == "000001" or i[1][30:36] == "000001"):
                index_i = main_structure_dict_backup.index(i)
                predicate_dict = main_structure_dict_backup[index_i:index_i+1]
                if main_structure_dict_backup[index_i-1][1][2:8] in ["000111", "000100", "010111"] or main_structure_dict_backup[index_i - 1][1][9:15] in ["000111", "000100", "010111"] or main_structure_dict_backup[index_i - 1][1][16:22] in ["000111", "000100", "010111"] or main_structure_dict_backup[index_i - 1][1][23:29] in ["000111", "000100", "010111"] or main_structure_dict_backup[index_i - 1][1][30:36] in ["000111", "000100", "010111"]:
                    subject_dict = main_structure_dict_backup[index_i-1:index_i]
                    object_dict = main_structure_dict_backup[index_i+1::]
                    break
                elif main_structure_dict_backup[index_i-1][1][2:8] not in ["000111", "000100", "010111"] and main_structure_dict_backup[index_i - 1][1][9:15] not in ["000111", "000100", "010111"] and main_structure_dict_backup[index_i - 1][1][16:22] not in ["000111", "000100", "010111"] and main_structure_dict_backup[index_i - 1][1][23:29] not in ["000111", "000100", "010111"] and main_structure_dict_backup[index_i - 1][1][30:36] not in ["000111", "000100", "010111"] and (
                        main_structure_dict_backup[index_i - 2][1][2:8] in ["000111", "000100", "010111"] or
                        main_structure_dict_backup[index_i - 2][1][9:15] in ["000111", "000100", "010111"] or
                        main_structure_dict_backup[index_i - 2][1][16:22] in ["000111", "000100", "010111"] or
                        main_structure_dict_backup[index_i - 2][1][23:29] in ["000111", "000100", "010111"] or
                        main_structure_dict_backup[index_i - 2][1][30:36] in ["000111", "000100", "010111"]):
                    predicate_dict = main_structure_dict_backup[index_i-1:index_i + 1]
                    subject_dict = main_structure_dict_backup[index_i-2:index_i-1]
                    object_dict = main_structure_dict_backup[index_i+1::]
                    break
                elif (main_structure_dict_backup[index_i-1][1][2:8] not in ["000111", "000100", "010111"] and main_structure_dict_backup[index_i - 1][1][9:15] not in ["000111", "000100", "010111"] and main_structure_dict_backup[index_i - 1][1][16:22] not in ["000111", "000100", "010111"] and main_structure_dict_backup[index_i - 1][1][23:29] not in ["000111", "000100", "010111"]) \
                        and ((main_structure_dict_backup[index_i-2][1][2:8] not in ["000111", "000100", "010111"] and main_structure_dict_backup[index_i - 2][1][9:15] not in ["000111", "000100", "010111"] and main_structure_dict_backup[index_i - 2][1][16:22] not in ["000111", "000100", "010111"] and main_structure_dict_backup[index_i - 2][1][23:29] not in ["000111", "000100", "010111"])) \
                        and main_structure_dict_backup[index_i - 2][1][30:36] not in ["000111", "000100", "010111"] and (
                        main_structure_dict_backup[index_i - 3][1][2:8] in ["000111", "000100", "010111"] or
                        main_structure_dict_backup[index_i - 3][1][9:15] in ["000111", "000100", "010111"] or
                        main_structure_dict_backup[index_i - 3][1][16:22] in ["000111", "000100", "010111"] or
                        main_structure_dict_backup[index_i - 3][1][23:29] in ["000111", "000100", "010111"] or
                        main_structure_dict_backup[index_i - 3][1][30:36] in ["000111", "000100", "010111"]):
                    predicate_dict = main_structure_dict_backup[index_i-2:index_i + 1]
                    subject_dict = main_structure_dict_backup[index_i-3:index_i-2]
                    object_dict =main_structure_dict_backup[index_i+1::]
                    break
    except Exception:
        pass

    Write_components()

    # print("p5", predicate_dict)
    # print("s5", subject_dict)
    # print("o5", object_dict)

    if len(predicate_dict) != 0 and len(subject_dict) != 0 and len(object_dict) != 0:
        main_structure_dict = subject_dict + ["+"] + predicate_dict + ["+"] + object_dict
    elif len(predicate_dict) != 0 and len(subject_dict) != 0 and len(object_dict) == 0:
        main_structure_dict = subject_dict + ["+"] + predicate_dict
    elif len(predicate_dict) != 0 and len(subject_dict) == 0 and len(object_dict) != 0:
        main_structure_dict = predicate_dict + ["+"] + object_dict
    elif len(predicate_dict) != 0 and len(subject_dict) == 0 and len(object_dict) == 0:
        main_structure_dict = predicate_dict

    subject_dict = []
    predicate_dict = []
    object_dict = []

    return main_structure_dict

def Combine_speaker(c_after_analyze):
    global speaker

    if len(speaker) != 0:
        speaker.insert(-1, "(speaker)")
    #print("speaker", speaker)

    c_after_analyze = speaker + c_after_analyze

    #print("c_after_analyze", c_after_analyze)

    return c_after_analyze


if __name__ == "__main__":

    # 分析句子成分：把需要分析成分的句子放入sentence.txt

    with open("./sentence.txt", "r", newline='', encoding='utf-8') as f:
        content = f.readlines()
        print(content)

    for c in content:
        Cut_words(c)
        Def_speaker()
        Cut_words_hanlp(c)
        re = Pre_treat_backbone(c)
        c_after_analyze = Post_treat_backbone(re)

        if len(c_after_analyze) == 0:
            c_after_analyze = Plan_b()

        c_after_analyze = Combine_speaker(c_after_analyze)

        print("c_after_analyze2", c_after_analyze)












